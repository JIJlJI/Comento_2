
ECUProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a438  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800a608  0800a608  0000b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a700  0800a700  0000c0a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a700  0800a700  0000b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a708  0800a708  0000c0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a708  0800a708  0000b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a70c  0800a70c  0000b70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0800a710  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c40  200000a4  0800a7b4  0000c0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ce4  0800a7b4  0000cce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8e9  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a8  00000000  00000000  000279bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0002ba68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001220  00000000  00000000  0002d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e2b  00000000  00000000  0002e400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7c0  00000000  00000000  0005422b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc13d  00000000  00000000  000709eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cb28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a6c  00000000  00000000  0014cb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001535d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a5f0 	.word	0x0800a5f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	0800a5f0 	.word	0x0800a5f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <CAN_Init>:
extern osMutexId_t CommMutexHandleHandle;

static CAN_RxHeaderTypeDef RxHeader;
static uint8_t RxData[8];

void CAN_Init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
    HAL_CAN_Start(&hcan1);
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <CAN_Init+0x18>)
 80005f2:	f001 fac5 	bl	8001b80 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005f6:	2102      	movs	r1, #2
 80005f8:	4802      	ldr	r0, [pc, #8]	@ (8000604 <CAN_Init+0x18>)
 80005fa:	f001 fcf7 	bl	8001fec <HAL_CAN_ActivateNotification>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000e4 	.word	0x200000e4

08000608 <CAN_RxCallback>:

// 인터럽트 콜백 -> 수신 데이터 큐에 넣기
void CAN_RxCallback(CAN_HandleTypeDef *hcan) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <CAN_RxCallback+0x2c>)
 8000612:	4a09      	ldr	r2, [pc, #36]	@ (8000638 <CAN_RxCallback+0x30>)
 8000614:	2100      	movs	r1, #0
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f001 fbc6 	bl	8001da8 <HAL_CAN_GetRxMessage>
    osMessageQueuePut(CanQueueHandle, RxData, 0, 0);
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <CAN_RxCallback+0x34>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	2200      	movs	r2, #0
 8000624:	4903      	ldr	r1, [pc, #12]	@ (8000634 <CAN_RxCallback+0x2c>)
 8000626:	f005 fd81 	bl	800612c <osMessageQueuePut>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000dc 	.word	0x200000dc
 8000638:	200000c0 	.word	0x200000c0
 800063c:	20000228 	.word	0x20000228

08000640 <Process_CAN_Response>:

// CAN 응답 전송 함수
void Process_CAN_Response(uint8_t *data) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	@ 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]

    TxHeader.StdId = 0x7E8;
 8000652:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 8000656:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28

    // OBD2 Mode 03: Read DTC
    if (data[1] == 0x43) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3301      	adds	r3, #1
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b43      	cmp	r3, #67	@ 0x43
 800066c:	d11a      	bne.n	80006a4 <Process_CAN_Response+0x64>
        if (DTC_Table.active) {
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <Process_CAN_Response+0xa0>)
 8000670:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00e      	beq.n	8000696 <Process_CAN_Response+0x56>
            TxData[0] = 0x03; TxData[1] = 0x43;
 8000678:	2303      	movs	r3, #3
 800067a:	733b      	strb	r3, [r7, #12]
 800067c:	2343      	movs	r3, #67	@ 0x43
 800067e:	737b      	strb	r3, [r7, #13]
            TxData[2] = (DTC_Table.DTC_Code >> 8) & 0xFF;
 8000680:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <Process_CAN_Response+0xa0>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	b29b      	uxth	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	73bb      	strb	r3, [r7, #14]
            TxData[3] = DTC_Table.DTC_Code & 0xFF;
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <Process_CAN_Response+0xa0>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	e015      	b.n	80006c2 <Process_CAN_Response+0x82>
        } else {
            TxData[0] = 0x01; TxData[1] = 0x43; TxData[2] = 0x00;
 8000696:	2301      	movs	r3, #1
 8000698:	733b      	strb	r3, [r7, #12]
 800069a:	2343      	movs	r3, #67	@ 0x43
 800069c:	737b      	strb	r3, [r7, #13]
 800069e:	2300      	movs	r3, #0
 80006a0:	73bb      	strb	r3, [r7, #14]
 80006a2:	e00e      	b.n	80006c2 <Process_CAN_Response+0x82>
        }
    }
    // OBD2 Mode 04: Clear DTC
    else if (data[1] == 0x04) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d113      	bne.n	80006d6 <Process_CAN_Response+0x96>
        DTC_Table.active = 0;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <Process_CAN_Response+0xa0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        EEPROM_WriteDTC();
 80006b6:	f000 f909 	bl	80008cc <EEPROM_WriteDTC>
        TxData[0] = 0x01; TxData[1] = 0x44;
 80006ba:	2301      	movs	r3, #1
 80006bc:	733b      	strb	r3, [r7, #12]
 80006be:	2344      	movs	r3, #68	@ 0x44
 80006c0:	737b      	strb	r3, [r7, #13]
    else {
        // 기타 명령은 무시
        return;
    }

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	f107 020c 	add.w	r2, r7, #12
 80006ca:	f107 0118 	add.w	r1, r7, #24
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <Process_CAN_Response+0xa4>)
 80006d0:	f001 fa9a 	bl	8001c08 <HAL_CAN_AddTxMessage>
 80006d4:	e000      	b.n	80006d8 <Process_CAN_Response+0x98>
        return;
 80006d6:	bf00      	nop
}
 80006d8:	3730      	adds	r7, #48	@ 0x30
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	200000e4 	.word	0x200000e4

080006e8 <CAN_StartTask>:

// CAN Task
void CAN_StartTask(void *argument) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    uint8_t rxBuf[8];
    for(;;) {
        if (osMessageQueueGet(CanQueueHandle, rxBuf, NULL, osWaitForever) == osOK) {
 80006f0:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <CAN_StartTask+0x4c>)
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	f107 0108 	add.w	r1, r7, #8
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	2200      	movs	r2, #0
 80006fe:	f005 fd75 	bl	80061ec <osMessageQueueGet>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d110      	bne.n	800072a <CAN_StartTask+0x42>
            osMutexAcquire(CommMutexHandleHandle, osWaitForever);
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <CAN_StartTask+0x50>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	4618      	mov	r0, r3
 8000712:	f005 faf0 	bl	8005cf6 <osMutexAcquire>
            Process_CAN_Response(rxBuf);
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff90 	bl	8000640 <Process_CAN_Response>
            osMutexRelease(CommMutexHandleHandle);
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <CAN_StartTask+0x50>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f005 fb31 	bl	8005d8c <osMutexRelease>
        }
        osDelay(10);
 800072a:	200a      	movs	r0, #10
 800072c:	f005 fa42 	bl	8005bb4 <osDelay>
        if (osMessageQueueGet(CanQueueHandle, rxBuf, NULL, osWaitForever) == osOK) {
 8000730:	e7de      	b.n	80006f0 <CAN_StartTask+0x8>
 8000732:	bf00      	nop
 8000734:	20000228 	.word	0x20000228
 8000738:	2000022c 	.word	0x2000022c

0800073c <UART_StartTask>:
#include <string.h>

extern UART_HandleTypeDef huart2;
extern osMutexId_t CommMutexHandleHandle;

void UART_StartTask(void *argument) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b098      	sub	sp, #96	@ 0x60
 8000740:	af02      	add	r7, sp, #8
 8000742:	6078      	str	r0, [r7, #4]
    char msg[80];

    for(;;) {
        osMutexAcquire(CommMutexHandleHandle, osWaitForever);
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <UART_StartTask+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	4618      	mov	r0, r3
 800074e:	f005 fad2 	bl	8005cf6 <osMutexAcquire>

        // DTC 상태를 UART로 출력
        snprintf(msg, sizeof(msg), "[ECU] DTC: 0x%04X Active:%d\r\n",
                 DTC_Table.DTC_Code, DTC_Table.active);
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <UART_StartTask+0x68>)
 8000754:	881b      	ldrh	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "[ECU] DTC: 0x%04X Active:%d\r\n",
 8000756:	461a      	mov	r2, r3
                 DTC_Table.DTC_Code, DTC_Table.active);
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <UART_StartTask+0x68>)
 800075a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
        snprintf(msg, sizeof(msg), "[ECU] DTC: 0x%04X Active:%d\r\n",
 800075e:	f107 0008 	add.w	r0, r7, #8
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4613      	mov	r3, r2
 8000766:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <UART_StartTask+0x6c>)
 8000768:	2150      	movs	r1, #80	@ 0x50
 800076a:	f009 f83d 	bl	80097e8 <sniprintf>

        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd4c 	bl	8000210 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	b29a      	uxth	r2, r3
 800077c:	f107 0108 	add.w	r1, r7, #8
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	4809      	ldr	r0, [pc, #36]	@ (80007ac <UART_StartTask+0x70>)
 8000786:	f004 fd49 	bl	800521c <HAL_UART_Transmit>

        osMutexRelease(CommMutexHandleHandle);
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <UART_StartTask+0x64>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f005 fafc 	bl	8005d8c <osMutexRelease>
        osDelay(1000);  // 1초마다 출력
 8000794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000798:	f005 fa0c 	bl	8005bb4 <osDelay>
        osMutexAcquire(CommMutexHandleHandle, osWaitForever);
 800079c:	bf00      	nop
 800079e:	e7d1      	b.n	8000744 <UART_StartTask+0x8>
 80007a0:	2000022c 	.word	0x2000022c
 80007a4:	20000000 	.word	0x20000000
 80007a8:	0800a608 	.word	0x0800a608
 80007ac:	200001b8 	.word	0x200001b8

080007b0 <eeprom_cs_select>:

// 전역 변수
DTC_Table_t DTC_Table = { 0x1234, "Brake UV Fault", 0 };

// CS 핀 제어 (CS핀이 low일때만 명령을 받음)
static inline void eeprom_cs_select(void) { HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); }
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	2200      	movs	r2, #0
 80007b6:	2104      	movs	r1, #4
 80007b8:	4802      	ldr	r0, [pc, #8]	@ (80007c4 <eeprom_cs_select+0x14>)
 80007ba:	f002 f9c1 	bl	8002b40 <HAL_GPIO_WritePin>
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40020400 	.word	0x40020400

080007c8 <eeprom_cs_deselect>:
static inline void eeprom_cs_deselect(void) { HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); }
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	2201      	movs	r2, #1
 80007ce:	2104      	movs	r1, #4
 80007d0:	4802      	ldr	r0, [pc, #8]	@ (80007dc <eeprom_cs_deselect+0x14>)
 80007d2:	f002 f9b5 	bl	8002b40 <HAL_GPIO_WritePin>
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40020400 	.word	0x40020400

080007e0 <eeprom_write_bytes>:
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
    eeprom_cs_deselect();
}

// 바이트 쓰기 (DMA 사용)
static void eeprom_write_bytes(uint16_t address, uint8_t* data, uint16_t size) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	80fb      	strh	r3, [r7, #6]
 80007ec:	4613      	mov	r3, r2
 80007ee:	80bb      	strh	r3, [r7, #4]
    uint8_t header[3];
    uint8_t wren_cmd = EEPROM_WREN_CMD;
 80007f0:	2306      	movs	r3, #6
 80007f2:	72fb      	strb	r3, [r7, #11]

    // WREN 명령어 전송 (쓰기 활성화)
    eeprom_cs_select();
 80007f4:	f7ff ffdc 	bl	80007b0 <eeprom_cs_select>
    HAL_SPI_Transmit(&hspi1, &wren_cmd, 1, 100);
 80007f8:	f107 010b 	add.w	r1, r7, #11
 80007fc:	2364      	movs	r3, #100	@ 0x64
 80007fe:	2201      	movs	r2, #1
 8000800:	481a      	ldr	r0, [pc, #104]	@ (800086c <eeprom_write_bytes+0x8c>)
 8000802:	f003 fe2a 	bl	800445a <HAL_SPI_Transmit>
    eeprom_cs_deselect();
 8000806:	f7ff ffdf 	bl	80007c8 <eeprom_cs_deselect>
    osDelay(5);
 800080a:	2005      	movs	r0, #5
 800080c:	f005 f9d2 	bl	8005bb4 <osDelay>

    // WRITE 명령어, 쓰기 시작 주소 설정
    header[0] = EEPROM_WRITE_CMD;
 8000810:	2302      	movs	r3, #2
 8000812:	733b      	strb	r3, [r7, #12]
    header[1] = (address >> 8) & 0xFF;  // 상위 8비트만 남기고 나머지 비트 제거
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b29b      	uxth	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	737b      	strb	r3, [r7, #13]
    header[2] = address & 0xFF;         // 하위 8비트만 남김
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	73bb      	strb	r3, [r7, #14]

    // DMA로 명령어, 주소 전송
    eeprom_cs_select();
 8000824:	f7ff ffc4 	bl	80007b0 <eeprom_cs_select>
    HAL_SPI_Transmit_DMA(&hspi1, header, 3);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2203      	movs	r2, #3
 800082e:	4619      	mov	r1, r3
 8000830:	480e      	ldr	r0, [pc, #56]	@ (800086c <eeprom_write_bytes+0x8c>)
 8000832:	f004 fa19 	bl	8004c68 <HAL_SPI_Transmit_DMA>
    osSemaphoreAcquire(spiTxDoneSemaphoreHandle, 100);  // DMA 완료 기다림
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <eeprom_write_bytes+0x90>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2164      	movs	r1, #100	@ 0x64
 800083c:	4618      	mov	r0, r3
 800083e:	f005 fb6b 	bl	8005f18 <osSemaphoreAcquire>

    // DMA로 실제 데이터 전송
    HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000842:	88bb      	ldrh	r3, [r7, #4]
 8000844:	461a      	mov	r2, r3
 8000846:	6839      	ldr	r1, [r7, #0]
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <eeprom_write_bytes+0x8c>)
 800084a:	f004 fa0d 	bl	8004c68 <HAL_SPI_Transmit_DMA>
    osSemaphoreAcquire(spiTxDoneSemaphoreHandle, 100);  // DMA 완료 기다림
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <eeprom_write_bytes+0x90>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2164      	movs	r1, #100	@ 0x64
 8000854:	4618      	mov	r0, r3
 8000856:	f005 fb5f 	bl	8005f18 <osSemaphoreAcquire>
    eeprom_cs_deselect();
 800085a:	f7ff ffb5 	bl	80007c8 <eeprom_cs_deselect>

    // EEPROM이 내부적으로 데이터를 다 쓸 때까지 대기
    osDelay(5);
 800085e:	2005      	movs	r0, #5
 8000860:	f005 f9a8 	bl	8005bb4 <osDelay>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000160 	.word	0x20000160
 8000870:	20000220 	.word	0x20000220

08000874 <eeprom_read_bytes>:

// 바이트 읽기 (Polling) (읽기의 경우 데이터가 작아 polling이 간단)
static void eeprom_read_bytes(uint16_t address, uint8_t *data, uint16_t size) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	80fb      	strh	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	80bb      	strh	r3, [r7, #4]
    uint8_t header[3] = {
 8000884:	2305      	movs	r3, #5
 8000886:	733b      	strb	r3, [r7, #12]
    	EEPROM_CMD_RDSR,
        (uint8_t)(address >> 8),
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	b29b      	uxth	r3, r3
 800088e:	b2db      	uxtb	r3, r3
    uint8_t header[3] = {
 8000890:	737b      	strb	r3, [r7, #13]
        (uint8_t)(address & 0xFF)
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	b2db      	uxtb	r3, r3
    uint8_t header[3] = {
 8000896:	73bb      	strb	r3, [r7, #14]
    };

    eeprom_cs_select();
 8000898:	f7ff ff8a 	bl	80007b0 <eeprom_cs_select>
    HAL_SPI_Transmit(&hspi1, header, 3, HAL_MAX_DELAY);
 800089c:	f107 010c 	add.w	r1, r7, #12
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	2203      	movs	r2, #3
 80008a6:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <eeprom_read_bytes+0x54>)
 80008a8:	f003 fdd7 	bl	800445a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, size, HAL_MAX_DELAY);
 80008ac:	88ba      	ldrh	r2, [r7, #4]
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	6839      	ldr	r1, [r7, #0]
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <eeprom_read_bytes+0x54>)
 80008b6:	f003 ff14 	bl	80046e2 <HAL_SPI_Receive>
    eeprom_cs_deselect();
 80008ba:	f7ff ff85 	bl	80007c8 <eeprom_cs_deselect>
}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000160 	.word	0x20000160

080008cc <EEPROM_WriteDTC>:



// DTC_Table을 EEPROM에 기록
void EEPROM_WriteDTC(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    eeprom_write_bytes(EEPROM_DTC_ADDR, (uint8_t*)&DTC_Table, sizeof(DTC_Table));
 80008d0:	2236      	movs	r2, #54	@ 0x36
 80008d2:	4903      	ldr	r1, [pc, #12]	@ (80008e0 <EEPROM_WriteDTC+0x14>)
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff83 	bl	80007e0 <eeprom_write_bytes>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000

080008e4 <EEPROM_ReadDTC>:

// EEPROM에서 DTC_Table 읽기
void EEPROM_ReadDTC(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    eeprom_read_bytes(EEPROM_DTC_ADDR, (uint8_t*)&DTC_Table, sizeof(DTC_Table));
 80008e8:	2236      	movs	r2, #54	@ 0x36
 80008ea:	4903      	ldr	r1, [pc, #12]	@ (80008f8 <EEPROM_ReadDTC+0x14>)
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff ffc1 	bl	8000874 <eeprom_read_bytes>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000000 	.word	0x20000000

080008fc <EEPROM_LogNewDTC>:

// 새로운 DTC 추가 (중복 방지)
bool EEPROM_LogNewDTC(uint32_t dtc_code) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];               //DTC 코드 저장공간
    uint16_t write_address = 0xFFFF; // 새 코드 저장 주소
 8000904:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000908:	83fb      	strh	r3, [r7, #30]
    bool already_exists = false;
 800090a:	2300      	movs	r3, #0
 800090c:	777b      	strb	r3, [r7, #29]

    for (int i = 0; i < 32; i++) { // DTC_MAX_COUNT = 32 가정
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e02c      	b.n	800096e <EEPROM_LogNewDTC+0x72>
        uint16_t addr = EEPROM_DTC_ADDR + sizeof(DTC_Table) + (i * 4);  // eeprom에서의 주소 계산. 기본 시작 주소 + dtc 테이블 크기 + 각 코드*4(각코드는 4byte)
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	b29b      	uxth	r3, r3
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	b29b      	uxth	r3, r3
 800091c:	3336      	adds	r3, #54	@ 0x36
 800091e:	82fb      	strh	r3, [r7, #22]
        eeprom_read_bytes(addr, buffer, 4);    // addr 주소에서 4바이트 읽어서 buffer에 저장
 8000920:	f107 010c 	add.w	r1, r7, #12
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	2204      	movs	r2, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ffa3 	bl	8000874 <eeprom_read_bytes>

        uint32_t existing_dtc =        //읽은 데이터를 32비트로 조립
            ((uint32_t)buffer[0] << 24) |
 800092e:	7b3b      	ldrb	r3, [r7, #12]
 8000930:	061a      	lsls	r2, r3, #24
            ((uint32_t)buffer[1] << 16) |
 8000932:	7b7b      	ldrb	r3, [r7, #13]
 8000934:	041b      	lsls	r3, r3, #16
            ((uint32_t)buffer[0] << 24) |
 8000936:	431a      	orrs	r2, r3
            ((uint32_t)buffer[2] << 8)  |
 8000938:	7bbb      	ldrb	r3, [r7, #14]
 800093a:	021b      	lsls	r3, r3, #8
            ((uint32_t)buffer[1] << 16) |
 800093c:	4313      	orrs	r3, r2
            (uint32_t)buffer[3];
 800093e:	7bfa      	ldrb	r2, [r7, #15]
        uint32_t existing_dtc =        //읽은 데이터를 32비트로 조립
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]

        if (existing_dtc == dtc_code) {          // 중복여부 호가인
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	d102      	bne.n	8000952 <EEPROM_LogNewDTC+0x56>
            already_exists = true;
 800094c:	2301      	movs	r3, #1
 800094e:	777b      	strb	r3, [r7, #29]
            break;
 8000950:	e010      	b.n	8000974 <EEPROM_LogNewDTC+0x78>
        }
        if (write_address == 0xFFFF && existing_dtc == 0xFFFFFFFF) {    // 빈공간찾기. 읽은 값이 모두 1이면 빈공간, 주소가 모두 1이면 아직 주소를 찾지 못함.
 8000952:	8bfb      	ldrh	r3, [r7, #30]
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	4293      	cmp	r3, r2
 800095a:	d105      	bne.n	8000968 <EEPROM_LogNewDTC+0x6c>
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000962:	d101      	bne.n	8000968 <EEPROM_LogNewDTC+0x6c>
            write_address = addr;
 8000964:	8afb      	ldrh	r3, [r7, #22]
 8000966:	83fb      	strh	r3, [r7, #30]
    for (int i = 0; i < 32; i++) { // DTC_MAX_COUNT = 32 가정
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	3301      	adds	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	2b1f      	cmp	r3, #31
 8000972:	ddcf      	ble.n	8000914 <EEPROM_LogNewDTC+0x18>
        }
    }

    if (already_exists) return true;
 8000974:	7f7b      	ldrb	r3, [r7, #29]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <EEPROM_LogNewDTC+0x82>
 800097a:	2301      	movs	r3, #1
 800097c:	e020      	b.n	80009c0 <EEPROM_LogNewDTC+0xc4>
    if (write_address == 0xFFFF) {
 800097e:	8bfb      	ldrh	r3, [r7, #30]
 8000980:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000984:	4293      	cmp	r3, r2
 8000986:	d104      	bne.n	8000992 <EEPROM_LogNewDTC+0x96>
        printf("[EEPROM] Log area full\r\n");
 8000988:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <EEPROM_LogNewDTC+0xcc>)
 800098a:	f008 ff25 	bl	80097d8 <puts>
        return false;
 800098e:	2300      	movs	r3, #0
 8000990:	e016      	b.n	80009c0 <EEPROM_LogNewDTC+0xc4>
    }

    buffer[0] = (dtc_code >> 24) & 0xFF;    // dtc를 4바이트로 분해해서 버퍼에 넣음
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	0e1b      	lsrs	r3, r3, #24
 8000996:	b2db      	uxtb	r3, r3
 8000998:	733b      	strb	r3, [r7, #12]
    buffer[1] = (dtc_code >> 16) & 0xFF;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	0c1b      	lsrs	r3, r3, #16
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	737b      	strb	r3, [r7, #13]
    buffer[2] = (dtc_code >> 8) & 0xFF;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	73bb      	strb	r3, [r7, #14]
    buffer[3] = dtc_code & 0xFF;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	73fb      	strb	r3, [r7, #15]

    eeprom_write_bytes(write_address, buffer, 4);
 80009b0:	f107 010c 	add.w	r1, r7, #12
 80009b4:	8bfb      	ldrh	r3, [r7, #30]
 80009b6:	2204      	movs	r2, #4
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff11 	bl	80007e0 <eeprom_write_bytes>
    return true;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	0800a628 	.word	0x0800a628

080009cc <Deactivate_Motor_And_Valve>:
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
void StartDefaultTask(void *argument);
void Activate_Motor_And_Valve(void) { };
void Deactivate_Motor_And_Valve(void) { };
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <__io_putchar>:
void MX_FREERTOS_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009e4:	1d39      	adds	r1, r7, #4
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	2201      	movs	r2, #1
 80009ec:	4803      	ldr	r0, [pc, #12]	@ (80009fc <__io_putchar+0x20>)
 80009ee:	f004 fc15 	bl	800521c <HAL_UART_Transmit>
    return ch;
 80009f2:	687b      	ldr	r3, [r7, #4]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200001b8 	.word	0x200001b8

08000a00 <HAL_I2C_ErrorCallback>:

void BrakeControlTask(void *argument);
void I2cMonitorTask(void *argument);
void SpiEepromTask(void *argument);
void DtcProcessingTask(void *argument);
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) { if (hi2c->Instance == I2C1) g_i2c_state = I2C_STATE_IDLE; }
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <HAL_I2C_ErrorCallback+0x24>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d102      	bne.n	8000a18 <HAL_I2C_ErrorCallback+0x18>
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <HAL_I2C_ErrorCallback+0x28>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40005400 	.word	0x40005400
 8000a28:	20000239 	.word	0x20000239

08000a2c <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) { if (hi2c->Instance == I2C1) pmic_i2c_dma_rx_callback_handler(); }
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <HAL_I2C_MemRxCpltCallback+0x20>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_I2C_MemRxCpltCallback+0x16>
 8000a3e:	f000 fb8f 	bl	8001160 <pmic_i2c_dma_rx_callback_handler>
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400

08000a50 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) { if (hspi->Instance == SPI1) osSemaphoreRelease(spiTxDoneSemaphoreHandle); }
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <HAL_SPI_TxCpltCallback+0x24>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d104      	bne.n	8000a6c <HAL_SPI_TxCpltCallback+0x1c>
 8000a62:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <HAL_SPI_TxCpltCallback+0x28>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f005 faa8 	bl	8005fbc <osSemaphoreRelease>
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40013000 	.word	0x40013000
 8000a78:	20000220 	.word	0x20000220

08000a7c <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) { osSemaphoreRelease(canTxDoneSemaphoreHandle); }
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f005 fa97 	bl	8005fbc <osSemaphoreRelease>
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000224 	.word	0x20000224

08000a9c <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) { osSemaphoreRelease(canTxDoneSemaphoreHandle); }
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 fa87 	bl	8005fbc <osSemaphoreRelease>
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000224 	.word	0x20000224

08000abc <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) { osSemaphoreRelease(canTxDoneSemaphoreHandle); }
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	4b04      	ldr	r3, [pc, #16]	@ (8000ad8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f005 fa77 	bl	8005fbc <osSemaphoreRelease>
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000224 	.word	0x20000224

08000adc <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) { CAN_RxCallback(hcan); }
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fd8f 	bl	8000608 <CAN_RxCallback>
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0c0      	sub	sp, #256	@ 0x100
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afa:	f000 fdf5 	bl	80016e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afe:	f000 f92f 	bl	8000d60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b02:	f000 fa4f 	bl	8000fa4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b06:	f000 f98b 	bl	8000e20 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000b0a:	f000 f9bd 	bl	8000e88 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b0e:	f000 f9e9 	bl	8000ee4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b12:	f000 fa1d 	bl	8000f50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef canfilterconfig = {0};
 8000b16:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000b1a:	2228      	movs	r2, #40	@ 0x28
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f008 ff70 	bl	8009a04 <memset>
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000b30:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000b34:	4619      	mov	r1, r3
 8000b36:	4872      	ldr	r0, [pc, #456]	@ (8000d00 <main+0x20c>)
 8000b38:	f000 ff44 	bl	80019c4 <HAL_CAN_ConfigFilter>

  CAN_Init();           // CAN 시작 + 인터럽트 활성화
 8000b3c:	f7ff fd56 	bl	80005ec <CAN_Init>
  EEPROM_ReadDTC();     // 부팅 시 EEPROM에서 DTC 복원
 8000b40:	f7ff fed0 	bl	80008e4 <EEPROM_ReadDTC>
  printf("ECU System Initialized.\r\n");
 8000b44:	486f      	ldr	r0, [pc, #444]	@ (8000d04 <main+0x210>)
 8000b46:	f008 fe47 	bl	80097d8 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b4a:	f004 ff57 	bl	80059fc <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  eepromMutexHandle = osMutexNew(NULL);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f005 f84b 	bl	8005bea <osMutexNew>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a6c      	ldr	r2, [pc, #432]	@ (8000d08 <main+0x214>)
 8000b58:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  i2cRxDoneSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f005 f951 	bl	8005e06 <osSemaphoreNew>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a69      	ldr	r2, [pc, #420]	@ (8000d0c <main+0x218>)
 8000b68:	6013      	str	r3, [r2, #0]
  spiTxDoneSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f005 f949 	bl	8005e06 <osSemaphoreNew>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a66      	ldr	r2, [pc, #408]	@ (8000d10 <main+0x21c>)
 8000b78:	6013      	str	r3, [r2, #0]
  canTxDoneSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f005 f941 	bl	8005e06 <osSemaphoreNew>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4a63      	ldr	r2, [pc, #396]	@ (8000d14 <main+0x220>)
 8000b88:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  CanQueueHandle = osMessageQueueNew(8, sizeof(uint8_t[8]), NULL);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	2008      	movs	r0, #8
 8000b90:	f005 fa58 	bl	8006044 <osMessageQueueNew>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a60      	ldr	r2, [pc, #384]	@ (8000d18 <main+0x224>)
 8000b98:	6013      	str	r3, [r2, #0]
  dtcProcessingQueueHandle = osMessageQueueNew(8, sizeof(DtcEvent_t), NULL);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	2008      	movs	r0, #8
 8000ba0:	f005 fa50 	bl	8006044 <osMessageQueueNew>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4a5d      	ldr	r2, [pc, #372]	@ (8000d1c <main+0x228>)
 8000ba8:	6013      	str	r3, [r2, #0]
  dtcQueueHandle = osMessageQueueNew(8, sizeof(uint32_t), NULL);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2104      	movs	r1, #4
 8000bae:	2008      	movs	r0, #8
 8000bb0:	f005 fa48 	bl	8006044 <osMessageQueueNew>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a5a      	ldr	r2, [pc, #360]	@ (8000d20 <main+0x22c>)
 8000bb8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bba:	4a5a      	ldr	r2, [pc, #360]	@ (8000d24 <main+0x230>)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	485a      	ldr	r0, [pc, #360]	@ (8000d28 <main+0x234>)
 8000bc0:	f004 ff66 	bl	8005a90 <osThreadNew>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4a59      	ldr	r2, [pc, #356]	@ (8000d2c <main+0x238>)
 8000bc8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  const osThreadAttr_t i2cAttr  = { .stack_size = 256 * 4, .priority = osPriorityHigh };     /// 우선순위 반영
 8000bca:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000bce:	2224      	movs	r2, #36	@ 0x24
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f008 ff16 	bl	8009a04 <memset>
 8000bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000be0:	2328      	movs	r3, #40	@ 0x28
 8000be2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  const osThreadAttr_t spiAttr  = { .stack_size = 256 * 4, .priority = osPriorityAboveNormal };
 8000be6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000bea:	2224      	movs	r2, #36	@ 0x24
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f008 ff08 	bl	8009a04 <memset>
 8000bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const osThreadAttr_t dtcAttr = { .stack_size = 256 * 4, .priority = osPriorityAboveNormal };
 8000c02:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c06:	2224      	movs	r2, #36	@ 0x24
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f008 fefa 	bl	8009a04 <memset>
 8000c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000c18:	2320      	movs	r3, #32
 8000c1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  const osThreadAttr_t canAttr  = { .stack_size = 256 * 4, .priority = osPriorityNormal };
 8000c1e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c22:	2224      	movs	r2, #36	@ 0x24
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 feec 	bl	8009a04 <memset>
 8000c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c32:	2318      	movs	r3, #24
 8000c34:	663b      	str	r3, [r7, #96]	@ 0x60
  const osThreadAttr_t uartAttr = { .stack_size = 256 * 4, .priority = osPriorityBelowNormal };
 8000c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3a:	2224      	movs	r2, #36	@ 0x24
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f008 fee0 	bl	8009a04 <memset>
 8000c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const osThreadAttr_t brakeCtrlAttr = { .name = "BrakeControl", .stack_size = 256 * 4, .priority = osPriorityHigh };
 8000c4e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c52:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c56:	4618      	mov	r0, r3
 8000c58:	2324      	movs	r3, #36	@ 0x24
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f008 fed1 	bl	8009a04 <memset>
 8000c62:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c66:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c6a:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <main+0x23c>)
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c72:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c84:	2228      	movs	r2, #40	@ 0x28
 8000c86:	619a      	str	r2, [r3, #24]


  i2cMonitorTaskHandle = osThreadNew(I2cMonitorTask , NULL, &i2cAttr);
 8000c88:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4828      	ldr	r0, [pc, #160]	@ (8000d34 <main+0x240>)
 8000c92:	f004 fefd 	bl	8005a90 <osThreadNew>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <main+0x244>)
 8000c9a:	6013      	str	r3, [r2, #0]
  spiEepromTaskHandle  = osThreadNew(SpiEepromTask  , NULL, &spiAttr);
 8000c9c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4825      	ldr	r0, [pc, #148]	@ (8000d3c <main+0x248>)
 8000ca6:	f004 fef3 	bl	8005a90 <osThreadNew>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a24      	ldr	r2, [pc, #144]	@ (8000d40 <main+0x24c>)
 8000cae:	6013      	str	r3, [r2, #0]
  dtcTaskhandle 	   = osThreadNew(DtcProcessingTask, NULL, &dtcAttr);
 8000cb0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4822      	ldr	r0, [pc, #136]	@ (8000d44 <main+0x250>)
 8000cba:	f004 fee9 	bl	8005a90 <osThreadNew>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a21      	ldr	r2, [pc, #132]	@ (8000d48 <main+0x254>)
 8000cc2:	6013      	str	r3, [r2, #0]
  canTaskHandle        = osThreadNew(CAN_StartTask, NULL, &canAttr);
 8000cc4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2100      	movs	r1, #0
 8000ccc:	481f      	ldr	r0, [pc, #124]	@ (8000d4c <main+0x258>)
 8000cce:	f004 fedf 	bl	8005a90 <osThreadNew>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8000d50 <main+0x25c>)
 8000cd6:	6013      	str	r3, [r2, #0]
  uartTaskHandle       = osThreadNew(UART_StartTask, NULL, &uartAttr);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cdc:	461a      	mov	r2, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	481c      	ldr	r0, [pc, #112]	@ (8000d54 <main+0x260>)
 8000ce2:	f004 fed5 	bl	8005a90 <osThreadNew>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <main+0x264>)
 8000cea:	6013      	str	r3, [r2, #0]
  osThreadNew(BrakeControlTask, NULL, &brakeCtrlAttr);
 8000cec:	463b      	mov	r3, r7
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	481a      	ldr	r0, [pc, #104]	@ (8000d5c <main+0x268>)
 8000cf4:	f004 fecc 	bl	8005a90 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cf8:	f004 fea4 	bl	8005a44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <main+0x208>
 8000d00:	200000e4 	.word	0x200000e4
 8000d04:	0800a64c 	.word	0x0800a64c
 8000d08:	20000218 	.word	0x20000218
 8000d0c:	2000021c 	.word	0x2000021c
 8000d10:	20000220 	.word	0x20000220
 8000d14:	20000224 	.word	0x20000224
 8000d18:	20000228 	.word	0x20000228
 8000d1c:	20000230 	.word	0x20000230
 8000d20:	20000234 	.word	0x20000234
 8000d24:	0800a690 	.word	0x0800a690
 8000d28:	08001101 	.word	0x08001101
 8000d2c:	20000200 	.word	0x20000200
 8000d30:	0800a668 	.word	0x0800a668
 8000d34:	08000ff5 	.word	0x08000ff5
 8000d38:	20000204 	.word	0x20000204
 8000d3c:	0800100d 	.word	0x0800100d
 8000d40:	20000208 	.word	0x20000208
 8000d44:	08001041 	.word	0x08001041
 8000d48:	2000020c 	.word	0x2000020c
 8000d4c:	080006e9 	.word	0x080006e9
 8000d50:	20000210 	.word	0x20000210
 8000d54:	0800073d 	.word	0x0800073d
 8000d58:	20000214 	.word	0x20000214
 8000d5c:	08001091 	.word	0x08001091

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	@ 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2234      	movs	r2, #52	@ 0x34
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f008 fe48 	bl	8009a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <SystemClock_Config+0xb8>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	4a22      	ldr	r2, [pc, #136]	@ (8000e18 <SystemClock_Config+0xb8>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <SystemClock_Config+0xb8>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <SystemClock_Config+0xbc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dac:	4a1b      	ldr	r2, [pc, #108]	@ (8000e1c <SystemClock_Config+0xbc>)
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <SystemClock_Config+0xbc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 f819 	bl	8003e0c <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000de0:	f000 f996 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de4:	230f      	movs	r3, #15
 8000de6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fd40 	bl	8003884 <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e0a:	f000 f981 	bl	8001110 <Error_Handler>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3750      	adds	r7, #80	@ 0x50
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40007000 	.word	0x40007000

08000e20 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e26:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <MX_CAN1_Init+0x64>)
 8000e28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e6e:	f000 fcad 	bl	80017cc <HAL_CAN_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f000 f94a 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200000e4 	.word	0x200000e4
 8000e84:	40006400 	.word	0x40006400

08000e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000e8e:	4a13      	ldr	r2, [pc, #76]	@ (8000edc <MX_I2C1_Init+0x54>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <MX_I2C1_Init+0x58>)
 8000e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ea6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <MX_I2C1_Init+0x50>)
 8000ec6:	f001 fe55 	bl	8002b74 <HAL_I2C_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed0:	f000 f91e 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000010c 	.word	0x2000010c
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	000186a0 	.word	0x000186a0

08000ee4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000eea:	4a18      	ldr	r2, [pc, #96]	@ (8000f4c <MX_SPI1_Init+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000ef0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000f30:	220a      	movs	r2, #10
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_SPI1_Init+0x64>)
 8000f36:	f003 fa07 	bl	8004348 <HAL_SPI_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f40:	f000 f8e6 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000160 	.word	0x20000160
 8000f4c:	40013000 	.word	0x40013000

08000f50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f88:	f004 f8f8 	bl	800517c <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f92:	f000 f8bd 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001b8 	.word	0x200001b8
 8000fa0:	40004400 	.word	0x40004400

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <MX_GPIO_Init+0x4c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <MX_GPIO_Init+0x4c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <MX_GPIO_Init+0x4c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_GPIO_Init+0x4c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <MX_GPIO_Init+0x4c>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_GPIO_Init+0x4c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <I2cMonitorTask>:

/* USER CODE BEGIN 4 */
void I2cMonitorTask(void *argument) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  for(;;) {
    pmic_request_fault_read_dma();   // PMIC 상태를 DMA로 읽기
 8000ffc:	f000 f88e 	bl	800111c <pmic_request_fault_read_dma>
    osDelay(200);
 8001000:	20c8      	movs	r0, #200	@ 0xc8
 8001002:	f004 fdd7 	bl	8005bb4 <osDelay>
    pmic_request_fault_read_dma();   // PMIC 상태를 DMA로 읽기
 8001006:	bf00      	nop
 8001008:	e7f8      	b.n	8000ffc <I2cMonitorTask+0x8>
	...

0800100c <SpiEepromTask>:
  }
}

void SpiEepromTask(void *argument) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  for(;;) {
    osMutexAcquire(eepromMutexHandle, osWaitForever);
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <SpiEepromTask+0x30>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	4618      	mov	r0, r3
 800101e:	f004 fe6a 	bl	8005cf6 <osMutexAcquire>
    EEPROM_WriteDTC();   // EEPROM에 DTC 백업
 8001022:	f7ff fc53 	bl	80008cc <EEPROM_WriteDTC>
    osMutexRelease(eepromMutexHandle);
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SpiEepromTask+0x30>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f004 feae 	bl	8005d8c <osMutexRelease>
    osDelay(5000);
 8001030:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001034:	f004 fdbe 	bl	8005bb4 <osDelay>
    osMutexAcquire(eepromMutexHandle, osWaitForever);
 8001038:	bf00      	nop
 800103a:	e7eb      	b.n	8001014 <SpiEepromTask+0x8>
 800103c:	20000218 	.word	0x20000218

08001040 <DtcProcessingTask>:
  }
}

void DtcProcessingTask(void *argument) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    DtcEvent_t event;
    for(;;) {
        if (osMessageQueueGet(dtcProcessingQueueHandle, &event, NULL, osWaitForever) == osOK) {
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <DtcProcessingTask+0x48>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	f107 0108 	add.w	r1, r7, #8
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2200      	movs	r2, #0
 8001056:	f005 f8c9 	bl	80061ec <osMessageQueueGet>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f3      	bne.n	8001048 <DtcProcessingTask+0x8>
            if (event.command == DTC_EVENT_WRITE) {
 8001060:	7a3b      	ldrb	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <DtcProcessingTask+0x8>
                osMutexAcquire(eepromMutexHandle, osWaitForever);
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <DtcProcessingTask+0x4c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f04f 31ff 	mov.w	r1, #4294967295
 800106e:	4618      	mov	r0, r3
 8001070:	f004 fe41 	bl	8005cf6 <osMutexAcquire>
                EEPROM_LogNewDTC(event.dtc_code);                   // Fault 즉시 EEPROM 저장
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc40 	bl	80008fc <EEPROM_LogNewDTC>
                osMutexRelease(eepromMutexHandle);
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <DtcProcessingTask+0x4c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f004 fe83 	bl	8005d8c <osMutexRelease>
        if (osMessageQueueGet(dtcProcessingQueueHandle, &event, NULL, osWaitForever) == osOK) {
 8001086:	e7df      	b.n	8001048 <DtcProcessingTask+0x8>
 8001088:	20000230 	.word	0x20000230
 800108c:	20000218 	.word	0x20000218

08001090 <BrakeControlTask>:
        }
    }
}

// 브레이크 페달 신호를 감지하고 시스템 상태를 관리하는 Task
void BrakeControlTask(void *argument) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  for(;;) {
    bool isPedalPressed = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);   // PC13 핀에 브레이크 페달 신호가 연결되어 있다고 가정
 8001098:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109c:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <BrakeControlTask+0x68>)
 800109e:	f001 fd37 	bl	8002b10 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf0c      	ite	eq
 80010a8:	2301      	moveq	r3, #1
 80010aa:	2300      	movne	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
    bool isPressureZero = true;                // 압력을 확인하는 별도의 함수 구현 필요
 80010ae:	2301      	movs	r3, #1
 80010b0:	73bb      	strb	r3, [r7, #14]
    if (g_SystemState == SYS_STATE_FAULT) {    // fault 상태일 경우 모터, 밸브를 모두 deactivate 시킴
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <BrakeControlTask+0x6c>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d102      	bne.n	80010c2 <BrakeControlTask+0x32>
        Deactivate_Motor_And_Valve();
 80010bc:	f7ff fc86 	bl	80009cc <Deactivate_Motor_And_Valve>
 80010c0:	e016      	b.n	80010f0 <BrakeControlTask+0x60>
    }
    else if (isPedalPressed) {
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <BrakeControlTask+0x4a>
      // 페달이 밟히면 즉시 브레이킹 상태로 전환
      if(g_SystemState != SYS_STATE_BRAKING) {
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <BrakeControlTask+0x6c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d00e      	beq.n	80010f0 <BrakeControlTask+0x60>
          g_SystemState = SYS_STATE_BRAKING;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <BrakeControlTask+0x6c>)
 80010d4:	2202      	movs	r2, #2
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e00a      	b.n	80010f0 <BrakeControlTask+0x60>
      }
    }
    else {
      if (g_SystemState == SYS_STATE_BRAKING && isPressureZero) {            // 페달을 뗐고, 압력이 0이며, 현재 브레이킹 상태일 때만 IDLE로 복귀
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <BrakeControlTask+0x6c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d105      	bne.n	80010f0 <BrakeControlTask+0x60>
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <BrakeControlTask+0x60>
          g_SystemState = SYS_STATE_IDLE;
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <BrakeControlTask+0x6c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
      }
    }
    osDelay(20);
 80010f0:	2014      	movs	r0, #20
 80010f2:	f004 fd5f 	bl	8005bb4 <osDelay>
  for(;;) {
 80010f6:	e7cf      	b.n	8001098 <BrakeControlTask+0x8>
 80010f8:	40020800 	.word	0x40020800
 80010fc:	20000238 	.word	0x20000238

08001100 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001108:	2001      	movs	r0, #1
 800110a:	f004 fd53 	bl	8005bb4 <osDelay>
 800110e:	e7fb      	b.n	8001108 <StartDefaultTask+0x8>

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <pmic_request_fault_read_dma>:
extern osMessageQueueId_t dtcProcessingQueueHandle;
extern volatile I2C_State_t g_i2c_state;
extern uint8_t g_i2c_rx_buffer[3];
extern volatile SystemState_t g_SystemState;

void pmic_request_fault_read_dma(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
    if (g_i2c_state != I2C_STATE_IDLE) {
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <pmic_request_fault_read_dma+0x38>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10f      	bne.n	800114c <pmic_request_fault_read_dma+0x30>
        return;
    }
    g_i2c_state = I2C_STATE_READ_FAULTS_WAIT;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <pmic_request_fault_read_dma+0x38>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
    uint16_t dev_address = PMIC_SLAVE_ADDRESS;
 8001132:	23c0      	movs	r3, #192	@ 0xc0
 8001134:	80fb      	strh	r3, [r7, #6]
    HAL_I2C_Mem_Read_DMA(&hi2c1, dev_address, REGISTER_UV_OV_STATUS, I2C_MEMADD_SIZE_8BIT, g_i2c_rx_buffer, 3);
 8001136:	88f9      	ldrh	r1, [r7, #6]
 8001138:	2303      	movs	r3, #3
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <pmic_request_fault_read_dma+0x3c>)
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	2207      	movs	r2, #7
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <pmic_request_fault_read_dma+0x40>)
 8001146:	f001 fe59 	bl	8002dfc <HAL_I2C_Mem_Read_DMA>
 800114a:	e000      	b.n	800114e <pmic_request_fault_read_dma+0x32>
        return;
 800114c:	bf00      	nop
}
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000239 	.word	0x20000239
 8001158:	2000023c 	.word	0x2000023c
 800115c:	2000010c 	.word	0x2000010c

08001160 <pmic_i2c_dma_rx_callback_handler>:

void pmic_i2c_dma_rx_callback_handler(void) {          // 인터럽트 발생하면 실행. fault여부를 확인.
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
    if (g_i2c_state == I2C_STATE_READ_FAULTS_WAIT)
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <pmic_i2c_dma_rx_callback_handler+0xa0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b01      	cmp	r3, #1
 800116e:	d143      	bne.n	80011f8 <pmic_i2c_dma_rx_callback_handler+0x98>
    {
        RegisterUvOvStatus uv_ov_reg;
        uv_ov_reg.raw = g_i2c_rx_buffer[0];
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <pmic_i2c_dma_rx_callback_handler+0xa4>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	753b      	strb	r3, [r7, #20]
        RegisterOcStatus oc_reg;
        oc_reg.raw = g_i2c_rx_buffer[1];
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <pmic_i2c_dma_rx_callback_handler+0xa4>)
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	743b      	strb	r3, [r7, #16]
        RegisterSystemStatus temp_reg;
        temp_reg.raw = g_i2c_rx_buffer[2];
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <pmic_i2c_dma_rx_callback_handler+0xa4>)
 800117e:	789b      	ldrb	r3, [r3, #2]
 8001180:	733b      	strb	r3, [r7, #12]

        DtcEvent_t event;
        event.command = DTC_EVENT_WRITE;
 8001182:	2300      	movs	r3, #0
 8001184:	713b      	strb	r3, [r7, #4]


        //   SpiEepromTask을 깨움

        if (uv_ov_reg.bits.bucka_uv) {
 8001186:	7d3b      	ldrb	r3, [r7, #20]
 8001188:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <pmic_i2c_dma_rx_callback_handler+0x4a>
            event.dtc_code = 0x0C1234;         // OBD-2 코드가 C1234로 가정 (C : Chassis. 브레이크 시스템)
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <pmic_i2c_dma_rx_callback_handler+0xa8>)
 8001194:	60bb      	str	r3, [r7, #8]
            osMessageQueuePut(dtcProcessingQueueHandle, &event, 0U, 0U);
 8001196:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <pmic_i2c_dma_rx_callback_handler+0xac>)
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	1d39      	adds	r1, r7, #4
 800119c:	2300      	movs	r3, #0
 800119e:	2200      	movs	r2, #0
 80011a0:	f004 ffc4 	bl	800612c <osMessageQueuePut>
            g_SystemState = SYS_STATE_FAULT;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <pmic_i2c_dma_rx_callback_handler+0xb0>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	701a      	strb	r2, [r3, #0]
        }
        if (oc_reg.bits.bucka_oc) {
 80011aa:	7c3b      	ldrb	r3, [r7, #16]
 80011ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <pmic_i2c_dma_rx_callback_handler+0x6e>
            event.dtc_code = 0x0C1235;
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <pmic_i2c_dma_rx_callback_handler+0xb4>)
 80011b8:	60bb      	str	r3, [r7, #8]
            osMessageQueuePut(dtcProcessingQueueHandle, &event, 0U, 0U);
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <pmic_i2c_dma_rx_callback_handler+0xac>)
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	1d39      	adds	r1, r7, #4
 80011c0:	2300      	movs	r3, #0
 80011c2:	2200      	movs	r2, #0
 80011c4:	f004 ffb2 	bl	800612c <osMessageQueuePut>
            g_SystemState = SYS_STATE_FAULT;
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <pmic_i2c_dma_rx_callback_handler+0xb0>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	701a      	strb	r2, [r3, #0]
        }
        if (temp_reg.bits.pmic_temp_shutdown) {
 80011ce:	7b3b      	ldrb	r3, [r7, #12]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00b      	beq.n	80011f2 <pmic_i2c_dma_rx_callback_handler+0x92>
            event.dtc_code = 0x0C1236;
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <pmic_i2c_dma_rx_callback_handler+0xb8>)
 80011dc:	60bb      	str	r3, [r7, #8]
            osMessageQueuePut(dtcProcessingQueueHandle, &event, 0U, 0U);
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <pmic_i2c_dma_rx_callback_handler+0xac>)
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	1d39      	adds	r1, r7, #4
 80011e4:	2300      	movs	r3, #0
 80011e6:	2200      	movs	r2, #0
 80011e8:	f004 ffa0 	bl	800612c <osMessageQueuePut>
            g_SystemState = SYS_STATE_FAULT;
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <pmic_i2c_dma_rx_callback_handler+0xb0>)
 80011ee:	2203      	movs	r2, #3
 80011f0:	701a      	strb	r2, [r3, #0]
        }

        g_i2c_state = I2C_STATE_IDLE;
 80011f2:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <pmic_i2c_dma_rx_callback_handler+0xa0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
    }
}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000239 	.word	0x20000239
 8001204:	2000023c 	.word	0x2000023c
 8001208:	000c1234 	.word	0x000c1234
 800120c:	20000230 	.word	0x20000230
 8001210:	20000238 	.word	0x20000238
 8001214:	000c1235 	.word	0x000c1235
 8001218:	000c1236 	.word	0x000c1236

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_MspInit+0x54>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a11      	ldr	r2, [pc, #68]	@ (8001270 <HAL_MspInit+0x54>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_MspInit+0x54>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_MspInit+0x54>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <HAL_MspInit+0x54>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	@ 0x40
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <HAL_MspInit+0x54>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	210f      	movs	r1, #15
 800125e:	f06f 0001 	mvn.w	r0, #1
 8001262:	f001 f9d6 	bl	8002612 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <HAL_CAN_MspInit+0x94>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d134      	bne.n	8001300 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <HAL_CAN_MspInit+0x98>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	4a1b      	ldr	r2, [pc, #108]	@ (800130c <HAL_CAN_MspInit+0x98>)
 80012a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_CAN_MspInit+0x98>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_CAN_MspInit+0x98>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a14      	ldr	r2, [pc, #80]	@ (800130c <HAL_CAN_MspInit+0x98>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_CAN_MspInit+0x98>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012ce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012e0:	2309      	movs	r3, #9
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <HAL_CAN_MspInit+0x9c>)
 80012ec:	f001 fa7c 	bl	80027e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2105      	movs	r1, #5
 80012f4:	2014      	movs	r0, #20
 80012f6:	f001 f98c 	bl	8002612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012fa:	2014      	movs	r0, #20
 80012fc:	f001 f9a5 	bl	800264a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40006400 	.word	0x40006400
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	@ (8001398 <HAL_I2C_MspInit+0x84>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12b      	bne.n	800138e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a17      	ldr	r2, [pc, #92]	@ (800139c <HAL_I2C_MspInit+0x88>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <HAL_I2C_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001352:	23c0      	movs	r3, #192	@ 0xc0
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001362:	2304      	movs	r3, #4
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <HAL_I2C_MspInit+0x8c>)
 800136e:	f001 fa3b 	bl	80027e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_I2C_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	@ (800139c <HAL_I2C_MspInit+0x88>)
 800137c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_I2C_MspInit+0x88>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	@ 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40005400 	.word	0x40005400
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	@ (8001428 <HAL_SPI_MspInit+0x84>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12b      	bne.n	800141e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_SPI_MspInit+0x88>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <HAL_SPI_MspInit+0x88>)
 80013d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_SPI_MspInit+0x88>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_SPI_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a10      	ldr	r2, [pc, #64]	@ (800142c <HAL_SPI_MspInit+0x88>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_SPI_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013fe:	23e0      	movs	r3, #224	@ 0xe0
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140e:	2305      	movs	r3, #5
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	@ (8001430 <HAL_SPI_MspInit+0x8c>)
 800141a:	f001 f9e5 	bl	80027e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	@ 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40013000 	.word	0x40013000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a19      	ldr	r2, [pc, #100]	@ (80014b8 <HAL_UART_MspInit+0x84>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d12b      	bne.n	80014ae <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_UART_MspInit+0x88>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	4a17      	ldr	r2, [pc, #92]	@ (80014bc <HAL_UART_MspInit+0x88>)
 8001460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001464:	6413      	str	r3, [r2, #64]	@ 0x40
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <HAL_UART_MspInit+0x88>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_UART_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <HAL_UART_MspInit+0x88>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_UART_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800148e:	230c      	movs	r3, #12
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149e:	2307      	movs	r3, #7
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <HAL_UART_MspInit+0x8c>)
 80014aa:	f001 f99d 	bl	80027e8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	@ 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40004400 	.word	0x40004400
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f945 	bl	800178c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001502:	f006 fed7 	bl	80082b4 <xTaskGetSchedulerState>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d001      	beq.n	8001510 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800150c:	f007 fdcc 	bl	80090a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <CAN1_RX0_IRQHandler+0x10>)
 800151a:	f000 fd8d 	bl	8002038 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000e4 	.word	0x200000e4

08001528 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00a      	b.n	8001550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800153a:	f3af 8000 	nop.w
 800153e:	4601      	mov	r1, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf0      	blt.n	800153a <_read+0x12>
  }

  return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e009      	b.n	8001588 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fa2d 	bl	80009dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf1      	blt.n	8001574 <_write+0x12>
  }
  return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f008 fa34 	bl	8009aa0 <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20020000 	.word	0x20020000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000240 	.word	0x20000240
 800166c:	20004ce8 	.word	0x20004ce8

08001670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001698:	f7ff ffea 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	@ (80016d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	@ (80016d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	@ (80016e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016c2:	f008 f9f3 	bl	8009aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c6:	f7ff fa15 	bl	8000af4 <main>
  bx  lr    
 80016ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80016d8:	0800a710 	.word	0x0800a710
  ldr r2, =_sbss
 80016dc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80016e0:	20004ce4 	.word	0x20004ce4

080016e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC_IRQHandler>
	...

080016e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <HAL_Init+0x40>)
 80016f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_Init+0x40>)
 80016fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a07      	ldr	r2, [pc, #28]	@ (8001728 <HAL_Init+0x40>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 ff73 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001716:	200f      	movs	r0, #15
 8001718:	f000 f808 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171c:	f7ff fd7e 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 ff8b 	bl	8002666 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f000 ff53 	bl	8002612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000038 	.word	0x20000038
 8001784:	20000040 	.word	0x20000040
 8001788:	2000003c 	.word	0x2000003c

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000040 	.word	0x20000040
 80017b0:	20000244 	.word	0x20000244

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000244 	.word	0x20000244

080017cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0ed      	b.n	80019ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fd42 	bl	8001274 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001800:	f7ff ffd8 	bl	80017b4 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001806:	e012      	b.n	800182e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001808:	f7ff ffd4 	bl	80017b4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d90b      	bls.n	800182e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2205      	movs	r2, #5
 8001826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0c5      	b.n	80019ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0e5      	beq.n	8001808 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0202 	bic.w	r2, r2, #2
 800184a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800184c:	f7ff ffb2 	bl	80017b4 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001852:	e012      	b.n	800187a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001854:	f7ff ffae 	bl	80017b4 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b0a      	cmp	r3, #10
 8001860:	d90b      	bls.n	800187a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2205      	movs	r2, #5
 8001872:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e09f      	b.n	80019ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1e5      	bne.n	8001854 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7e1b      	ldrb	r3, [r3, #24]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d108      	bne.n	80018a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e007      	b.n	80018b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7e5b      	ldrb	r3, [r3, #25]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d108      	bne.n	80018cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e007      	b.n	80018dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7e9b      	ldrb	r3, [r3, #26]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d108      	bne.n	80018f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0220 	orr.w	r2, r2, #32
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e007      	b.n	8001906 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0220 	bic.w	r2, r2, #32
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7edb      	ldrb	r3, [r3, #27]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d108      	bne.n	8001920 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0210 	bic.w	r2, r2, #16
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e007      	b.n	8001930 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0210 	orr.w	r2, r2, #16
 800192e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7f1b      	ldrb	r3, [r3, #28]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d108      	bne.n	800194a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0208 	orr.w	r2, r2, #8
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e007      	b.n	800195a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0208 	bic.w	r2, r2, #8
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7f5b      	ldrb	r3, [r3, #29]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d108      	bne.n	8001974 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 0204 	orr.w	r2, r2, #4
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e007      	b.n	8001984 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0204 	bic.w	r2, r2, #4
 8001982:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	ea42 0103 	orr.w	r1, r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d003      	beq.n	80019e4 <HAL_CAN_ConfigFilter+0x20>
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	f040 80be 	bne.w	8001b60 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019e4:	4b65      	ldr	r3, [pc, #404]	@ (8001b7c <HAL_CAN_ConfigFilter+0x1b8>)
 80019e6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019fe:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	431a      	orrs	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2201      	movs	r2, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	401a      	ands	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d123      	bne.n	8001a8e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	401a      	ands	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a68:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3248      	adds	r2, #72	@ 0x48
 8001a6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	3348      	adds	r3, #72	@ 0x48
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d122      	bne.n	8001adc <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ab6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	3248      	adds	r2, #72	@ 0x48
 8001abc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ad0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ad2:	6939      	ldr	r1, [r7, #16]
 8001ad4:	3348      	adds	r3, #72	@ 0x48
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	401a      	ands	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001af6:	e007      	b.n	8001b08 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b22:	e007      	b.n	8001b34 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b52:	f023 0201 	bic.w	r2, r3, #1
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e006      	b.n	8001b6e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
  }
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	371c      	adds	r7, #28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40006400 	.word	0x40006400

08001b80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d12e      	bne.n	8001bf2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bac:	f7ff fe02 	bl	80017b4 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bb2:	e012      	b.n	8001bda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bb4:	f7ff fdfe 	bl	80017b4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b0a      	cmp	r3, #10
 8001bc0:	d90b      	bls.n	8001bda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e012      	b.n	8001c00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e5      	bne.n	8001bb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e006      	b.n	8001c00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
  }
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	@ 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c26:	7ffb      	ldrb	r3, [r7, #31]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d003      	beq.n	8001c34 <HAL_CAN_AddTxMessage+0x2c>
 8001c2c:	7ffb      	ldrb	r3, [r7, #31]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	f040 80ad 	bne.w	8001d8e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10a      	bne.n	8001c54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8095 	beq.w	8001d7e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	0e1b      	lsrs	r3, r3, #24
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c5e:	2201      	movs	r2, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c7a:	68f9      	ldr	r1, [r7, #12]
 8001c7c:	6809      	ldr	r1, [r1, #0]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3318      	adds	r3, #24
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	440b      	add	r3, r1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e00f      	b.n	8001cac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c96:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ca0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3318      	adds	r3, #24
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	440b      	add	r3, r1
 8001caa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3318      	adds	r3, #24
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	440b      	add	r3, r1
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	7d1b      	ldrb	r3, [r3, #20]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d111      	bne.n	8001cec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3318      	adds	r3, #24
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	6811      	ldr	r1, [r2, #0]
 8001cdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3318      	adds	r3, #24
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3304      	adds	r3, #4
 8001cea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3307      	adds	r3, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	061a      	lsls	r2, r3, #24
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3306      	adds	r3, #6
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3305      	adds	r3, #5
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	4313      	orrs	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	3204      	adds	r2, #4
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	4610      	mov	r0, r2
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	6811      	ldr	r1, [r2, #0]
 8001d14:	ea43 0200 	orr.w	r2, r3, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3303      	adds	r3, #3
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	061a      	lsls	r2, r3, #24
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3302      	adds	r3, #2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	4610      	mov	r0, r2
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	6811      	ldr	r1, [r2, #0]
 8001d4a:	ea43 0200 	orr.w	r2, r3, r0
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	440b      	add	r3, r1
 8001d54:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001d58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3318      	adds	r3, #24
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4413      	add	r3, r2
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	6811      	ldr	r1, [r2, #0]
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3318      	adds	r3, #24
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	440b      	add	r3, r1
 8001d78:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e00e      	b.n	8001d9c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e006      	b.n	8001d9c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
  }
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3724      	adds	r7, #36	@ 0x24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d003      	beq.n	8001dcc <HAL_CAN_GetRxMessage+0x24>
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	f040 8103 	bne.w	8001fd2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10e      	bne.n	8001df0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d116      	bne.n	8001e0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0f7      	b.n	8001fe0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e8      	b.n	8001fe0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	331b      	adds	r3, #27
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	4413      	add	r3, r2
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0204 	and.w	r2, r3, #4
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10c      	bne.n	8001e46 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	331b      	adds	r3, #27
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0d5b      	lsrs	r3, r3, #21
 8001e3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e00b      	b.n	8001e5e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	331b      	adds	r3, #27
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	4413      	add	r3, r2
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	331b      	adds	r3, #27
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0202 	and.w	r2, r3, #2
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	331b      	adds	r3, #27
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2208      	movs	r2, #8
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	e00b      	b.n	8001eac <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	331b      	adds	r3, #27
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 020f 	and.w	r2, r3, #15
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	331b      	adds	r3, #27
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3304      	adds	r3, #4
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	331b      	adds	r3, #27
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0a1a      	lsrs	r2, r3, #8
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0c1a      	lsrs	r2, r3, #16
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	3302      	adds	r3, #2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0e1a      	lsrs	r2, r3, #24
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	3303      	adds	r3, #3
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	3304      	adds	r3, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0a1a      	lsrs	r2, r3, #8
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	3305      	adds	r3, #5
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	0c1a      	lsrs	r2, r3, #16
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3306      	adds	r3, #6
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0e1a      	lsrs	r2, r3, #24
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	3307      	adds	r3, #7
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d108      	bne.n	8001fbe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0220 	orr.w	r2, r2, #32
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	e007      	b.n	8001fce <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0220 	orr.w	r2, r2, #32
 8001fcc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e006      	b.n	8001fe0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
  }
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ffc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d002      	beq.n	800200a <HAL_CAN_ActivateNotification+0x1e>
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d109      	bne.n	800201e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6959      	ldr	r1, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e006      	b.n	800202c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
  }
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	@ 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d07c      	beq.n	8002178 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d023      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fcee 	bl	8000a7c <HAL_CAN_TxMailbox0CompleteCallback>
 80020a0:	e016      	b.n	80020d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b4:	e00c      	b.n	80020d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c8:	e002      	b.n	80020d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f96b 	bl	80023a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d024      	beq.n	8002124 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fcd4 	bl	8000a9c <HAL_CAN_TxMailbox1CompleteCallback>
 80020f4:	e016      	b.n	8002124 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
 8002108:	e00c      	b.n	8002124 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
 800211c:	e002      	b.n	8002124 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f94b 	bl	80023ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d024      	beq.n	8002178 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002136:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fcba 	bl	8000abc <HAL_CAN_TxMailbox2CompleteCallback>
 8002148:	e016      	b.n	8002178 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
 800215c:	e00c      	b.n	8002178 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002170:	e002      	b.n	8002178 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f92b 	bl	80023ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2210      	movs	r2, #16
 800219a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2208      	movs	r2, #8
 80021b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f912 	bl	80023e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fc80 	bl	8000adc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2210      	movs	r2, #16
 80021fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2208      	movs	r2, #8
 800221a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8f4 	bl	800240a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	d009      	beq.n	8002240 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f8db 	bl	80023f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2210      	movs	r2, #16
 800225a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f8de 	bl	800241e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2208      	movs	r2, #8
 800227c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f8d7 	bl	8002432 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d07b      	beq.n	8002386 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d072      	beq.n	800237e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d008      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d043      	beq.n	800237e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03e      	beq.n	800237e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002306:	2b60      	cmp	r3, #96	@ 0x60
 8002308:	d02b      	beq.n	8002362 <HAL_CAN_IRQHandler+0x32a>
 800230a:	2b60      	cmp	r3, #96	@ 0x60
 800230c:	d82e      	bhi.n	800236c <HAL_CAN_IRQHandler+0x334>
 800230e:	2b50      	cmp	r3, #80	@ 0x50
 8002310:	d022      	beq.n	8002358 <HAL_CAN_IRQHandler+0x320>
 8002312:	2b50      	cmp	r3, #80	@ 0x50
 8002314:	d82a      	bhi.n	800236c <HAL_CAN_IRQHandler+0x334>
 8002316:	2b40      	cmp	r3, #64	@ 0x40
 8002318:	d019      	beq.n	800234e <HAL_CAN_IRQHandler+0x316>
 800231a:	2b40      	cmp	r3, #64	@ 0x40
 800231c:	d826      	bhi.n	800236c <HAL_CAN_IRQHandler+0x334>
 800231e:	2b30      	cmp	r3, #48	@ 0x30
 8002320:	d010      	beq.n	8002344 <HAL_CAN_IRQHandler+0x30c>
 8002322:	2b30      	cmp	r3, #48	@ 0x30
 8002324:	d822      	bhi.n	800236c <HAL_CAN_IRQHandler+0x334>
 8002326:	2b10      	cmp	r3, #16
 8002328:	d002      	beq.n	8002330 <HAL_CAN_IRQHandler+0x2f8>
 800232a:	2b20      	cmp	r3, #32
 800232c:	d005      	beq.n	800233a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800232e:	e01d      	b.n	800236c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002338:	e019      	b.n	800236e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	f043 0310 	orr.w	r3, r3, #16
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002342:	e014      	b.n	800236e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800234c:	e00f      	b.n	800236e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002356:	e00a      	b.n	800236e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002360:	e005      	b.n	800236e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800236a:	e000      	b.n	800236e <HAL_CAN_IRQHandler+0x336>
            break;
 800236c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800237c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2204      	movs	r2, #4
 8002384:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f854 	bl	8002446 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800239e:	bf00      	nop
 80023a0:	3728      	adds	r7, #40	@ 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002478:	4013      	ands	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800248c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248e:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	60d3      	str	r3, [r2, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <__NVIC_GetPriorityGrouping+0x18>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 0307 	and.w	r3, r3, #7
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db0b      	blt.n	80024ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	f003 021f 	and.w	r2, r3, #31
 80024d8:	4907      	ldr	r1, [pc, #28]	@ (80024f8 <__NVIC_EnableIRQ+0x38>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	2001      	movs	r0, #1
 80024e2:	fa00 f202 	lsl.w	r2, r0, r2
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e100 	.word	0xe000e100

080024fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	db0a      	blt.n	8002526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	490c      	ldr	r1, [pc, #48]	@ (8002548 <__NVIC_SetPriority+0x4c>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	440b      	add	r3, r1
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002524:	e00a      	b.n	800253c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4908      	ldr	r1, [pc, #32]	@ (800254c <__NVIC_SetPriority+0x50>)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	3b04      	subs	r3, #4
 8002534:	0112      	lsls	r2, r2, #4
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	440b      	add	r3, r1
 800253a:	761a      	strb	r2, [r3, #24]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000e100 	.word	0xe000e100
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f1c3 0307 	rsb	r3, r3, #7
 800256a:	2b04      	cmp	r3, #4
 800256c:	bf28      	it	cs
 800256e:	2304      	movcs	r3, #4
 8002570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3304      	adds	r3, #4
 8002576:	2b06      	cmp	r3, #6
 8002578:	d902      	bls.n	8002580 <NVIC_EncodePriority+0x30>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3b03      	subs	r3, #3
 800257e:	e000      	b.n	8002582 <NVIC_EncodePriority+0x32>
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	401a      	ands	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	4313      	orrs	r3, r2
         );
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	@ 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c8:	d301      	bcc.n	80025ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00f      	b.n	80025ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ce:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <SysTick_Config+0x40>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d6:	210f      	movs	r1, #15
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f7ff ff8e 	bl	80024fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <SysTick_Config+0x40>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e6:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <SysTick_Config+0x40>)
 80025e8:	2207      	movs	r2, #7
 80025ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	e000e010 	.word	0xe000e010

080025fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff29 	bl	800245c <__NVIC_SetPriorityGrouping>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002624:	f7ff ff3e 	bl	80024a4 <__NVIC_GetPriorityGrouping>
 8002628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f7ff ff8e 	bl	8002550 <NVIC_EncodePriority>
 8002634:	4602      	mov	r2, r0
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff5d 	bl	80024fc <__NVIC_SetPriority>
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff31 	bl	80024c0 <__NVIC_EnableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ffa2 	bl	80025b8 <SysTick_Config>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_DMA_Start_IT+0x26>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e040      	b.n	8002726 <HAL_DMA_Start_IT+0xa8>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d12f      	bne.n	8002718 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f85c 	bl	800278a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d6:	223f      	movs	r2, #63	@ 0x3f
 80026d8:	409a      	lsls	r2, r3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0216 	orr.w	r2, r2, #22
 80026ec:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0208 	orr.w	r2, r2, #8
 8002704:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e005      	b.n	8002724 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002720:	2302      	movs	r3, #2
 8002722:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002724:	7dfb      	ldrb	r3, [r7, #23]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d004      	beq.n	800274c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2280      	movs	r2, #128	@ 0x80
 8002746:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e00c      	b.n	8002766 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2205      	movs	r2, #5
 8002750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027a6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b40      	cmp	r3, #64	@ 0x40
 80027b6:	d108      	bne.n	80027ca <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027c8:	e007      	b.n	80027da <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	60da      	str	r2, [r3, #12]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	@ 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	e165      	b.n	8002ad0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	429a      	cmp	r2, r3
 800281e:	f040 8154 	bne.w	8002aca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d005      	beq.n	800283a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002836:	2b02      	cmp	r3, #2
 8002838:	d130      	bne.n	800289c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002870:	2201      	movs	r2, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 0201 	and.w	r2, r3, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d017      	beq.n	80028d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d123      	bne.n	800292c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	08da      	lsrs	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3208      	adds	r2, #8
 80028ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220f      	movs	r2, #15
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	08da      	lsrs	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3208      	adds	r2, #8
 8002926:	69b9      	ldr	r1, [r7, #24]
 8002928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0203 	and.w	r2, r3, #3
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80ae 	beq.w	8002aca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	4b5d      	ldr	r3, [pc, #372]	@ (8002ae8 <HAL_GPIO_Init+0x300>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	4a5c      	ldr	r2, [pc, #368]	@ (8002ae8 <HAL_GPIO_Init+0x300>)
 8002978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800297c:	6453      	str	r3, [r2, #68]	@ 0x44
 800297e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae8 <HAL_GPIO_Init+0x300>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800298a:	4a58      	ldr	r2, [pc, #352]	@ (8002aec <HAL_GPIO_Init+0x304>)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	220f      	movs	r2, #15
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4f      	ldr	r2, [pc, #316]	@ (8002af0 <HAL_GPIO_Init+0x308>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d025      	beq.n	8002a02 <HAL_GPIO_Init+0x21a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4e      	ldr	r2, [pc, #312]	@ (8002af4 <HAL_GPIO_Init+0x30c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01f      	beq.n	80029fe <HAL_GPIO_Init+0x216>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4d      	ldr	r2, [pc, #308]	@ (8002af8 <HAL_GPIO_Init+0x310>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d019      	beq.n	80029fa <HAL_GPIO_Init+0x212>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4c      	ldr	r2, [pc, #304]	@ (8002afc <HAL_GPIO_Init+0x314>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b00 <HAL_GPIO_Init+0x318>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00d      	beq.n	80029f2 <HAL_GPIO_Init+0x20a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002b04 <HAL_GPIO_Init+0x31c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <HAL_GPIO_Init+0x206>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a49      	ldr	r2, [pc, #292]	@ (8002b08 <HAL_GPIO_Init+0x320>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_GPIO_Init+0x202>
 80029e6:	2306      	movs	r3, #6
 80029e8:	e00c      	b.n	8002a04 <HAL_GPIO_Init+0x21c>
 80029ea:	2307      	movs	r3, #7
 80029ec:	e00a      	b.n	8002a04 <HAL_GPIO_Init+0x21c>
 80029ee:	2305      	movs	r3, #5
 80029f0:	e008      	b.n	8002a04 <HAL_GPIO_Init+0x21c>
 80029f2:	2304      	movs	r3, #4
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x21c>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e004      	b.n	8002a04 <HAL_GPIO_Init+0x21c>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_Init+0x21c>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_GPIO_Init+0x21c>
 8002a02:	2300      	movs	r3, #0
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f002 0203 	and.w	r2, r2, #3
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a14:	4935      	ldr	r1, [pc, #212]	@ (8002aec <HAL_GPIO_Init+0x304>)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a22:	4b3a      	ldr	r3, [pc, #232]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a46:	4a31      	ldr	r2, [pc, #196]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a70:	4a26      	ldr	r2, [pc, #152]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a76:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac4:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3301      	adds	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b0f      	cmp	r3, #15
 8002ad4:	f67f ae96 	bls.w	8002804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020c00 	.word	0x40020c00
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40021400 	.word	0x40021400
 8002b08:	40021800 	.word	0x40021800
 8002b0c:	40013c00 	.word	0x40013c00

08002b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	e001      	b.n	8002b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b5c:	e003      	b.n	8002b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e12b      	b.n	8002dde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe fbba 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	@ 0x24
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd8:	f000 ff46 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8002bdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4a81      	ldr	r2, [pc, #516]	@ (8002de8 <HAL_I2C_Init+0x274>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d807      	bhi.n	8002bf8 <HAL_I2C_Init+0x84>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a80      	ldr	r2, [pc, #512]	@ (8002dec <HAL_I2C_Init+0x278>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e006      	b.n	8002c06 <HAL_I2C_Init+0x92>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	@ (8002df0 <HAL_I2C_Init+0x27c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	bf94      	ite	ls
 8002c00:	2301      	movls	r3, #1
 8002c02:	2300      	movhi	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0e7      	b.n	8002dde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a78      	ldr	r2, [pc, #480]	@ (8002df4 <HAL_I2C_Init+0x280>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0c9b      	lsrs	r3, r3, #18
 8002c18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a6a      	ldr	r2, [pc, #424]	@ (8002de8 <HAL_I2C_Init+0x274>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d802      	bhi.n	8002c48 <HAL_I2C_Init+0xd4>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3301      	adds	r3, #1
 8002c46:	e009      	b.n	8002c5c <HAL_I2C_Init+0xe8>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	4a69      	ldr	r2, [pc, #420]	@ (8002df8 <HAL_I2C_Init+0x284>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	495c      	ldr	r1, [pc, #368]	@ (8002de8 <HAL_I2C_Init+0x274>)
 8002c78:	428b      	cmp	r3, r1
 8002c7a:	d819      	bhi.n	8002cb0 <HAL_I2C_Init+0x13c>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1e59      	subs	r1, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c8a:	1c59      	adds	r1, r3, #1
 8002c8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c90:	400b      	ands	r3, r1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_I2C_Init+0x138>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1e59      	subs	r1, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002caa:	e051      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002cac:	2304      	movs	r3, #4
 8002cae:	e04f      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <HAL_I2C_Init+0x168>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1e58      	subs	r0, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6859      	ldr	r1, [r3, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	440b      	add	r3, r1
 8002cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e012      	b.n	8002d02 <HAL_I2C_Init+0x18e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	0099      	lsls	r1, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Init+0x196>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e022      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10e      	bne.n	8002d30 <HAL_I2C_Init+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1e58      	subs	r0, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	440b      	add	r3, r1
 8002d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d2e:	e00f      	b.n	8002d50 <HAL_I2C_Init+0x1dc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e58      	subs	r0, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	0099      	lsls	r1, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	6809      	ldr	r1, [r1, #0]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6911      	ldr	r1, [r2, #16]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68d2      	ldr	r2, [r2, #12]
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	000186a0 	.word	0x000186a0
 8002dec:	001e847f 	.word	0x001e847f
 8002df0:	003d08ff 	.word	0x003d08ff
 8002df4:	431bde83 	.word	0x431bde83
 8002df8:	10624dd3 	.word	0x10624dd3

08002dfc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	@ 0x30
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	813b      	strh	r3, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e16:	f7fe fccd 	bl	80017b4 <HAL_GetTick>
 8002e1a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	f040 8172 	bne.w	8003112 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e2e:	4b93      	ldr	r3, [pc, #588]	@ (800307c <HAL_I2C_Mem_Read_DMA+0x280>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	4a92      	ldr	r2, [pc, #584]	@ (8003080 <HAL_I2C_Mem_Read_DMA+0x284>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0a1a      	lsrs	r2, r3, #8
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009a      	lsls	r2, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d112      	bne.n	8002e7a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
 8002e78:	e14c      	b.n	8003114 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d0df      	beq.n	8002e48 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Mem_Read_DMA+0x9a>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e13e      	b.n	8003114 <HAL_I2C_Mem_Read_DMA+0x318>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2222      	movs	r2, #34	@ 0x22
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2240      	movs	r2, #64	@ 0x40
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a62      	ldr	r2, [pc, #392]	@ (8003084 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002efe:	897a      	ldrh	r2, [r7, #10]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002f04:	893a      	ldrh	r2, [r7, #8]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80cc 	beq.w	80030b8 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d02d      	beq.n	8002f84 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	4a56      	ldr	r2, [pc, #344]	@ (8003088 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002f2e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	4a55      	ldr	r2, [pc, #340]	@ (800308c <HAL_I2C_Mem_Read_DMA+0x290>)
 8002f36:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	2200      	movs	r2, #0
 8002f46:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f54:	2200      	movs	r2, #0
 8002f56:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3310      	adds	r3, #16
 8002f62:	4619      	mov	r1, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6e:	f7ff fb86 	bl	800267e <HAL_DMA_Start_IT>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002f78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 8087 	bne.w	8003090 <HAL_I2C_Mem_Read_DMA+0x294>
 8002f82:	e013      	b.n	8002fac <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b3      	b.n	8003114 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002fac:	88f8      	ldrh	r0, [r7, #6]
 8002fae:	893a      	ldrh	r2, [r7, #8]
 8002fb0:	8979      	ldrh	r1, [r7, #10]
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	2323      	movs	r3, #35	@ 0x23
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4603      	mov	r3, r0
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f8cb 	bl	8003158 <I2C_RequestMemoryRead>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d023      	beq.n	8003010 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fbae 	bl	800272e <HAL_DMA_Abort_IT>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fdc:	2200      	movs	r2, #0
 8002fde:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fee:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e081      	b.n	8003114 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	2b01      	cmp	r3, #1
 8003016:	d108      	bne.n	800302a <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e007      	b.n	800303a <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003038:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003066:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	e049      	b.n	800310e <HAL_I2C_Mem_Read_DMA+0x312>
 800307a:	bf00      	nop
 800307c:	20000038 	.word	0x20000038
 8003080:	14f8b589 	.word	0x14f8b589
 8003084:	ffff0000 	.word	0xffff0000
 8003088:	08003329 	.word	0x08003329
 800308c:	080034e7 	.word	0x080034e7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	f043 0210 	orr.w	r2, r3, #16
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e02d      	b.n	8003114 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80030b8:	88f8      	ldrh	r0, [r7, #6]
 80030ba:	893a      	ldrh	r2, [r7, #8]
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	2323      	movs	r3, #35	@ 0x23
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4603      	mov	r3, r0
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f845 	bl	8003158 <I2C_RequestMemoryRead>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e01d      	b.n	8003114 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030fc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e000      	b.n	8003114 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8003112:	2302      	movs	r3, #2
  }
}
 8003114:	4618      	mov	r0, r3
 8003116:	3728      	adds	r7, #40	@ 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	461a      	mov	r2, r3
 8003166:	4603      	mov	r3, r0
 8003168:	817b      	strh	r3, [r7, #10]
 800316a:	460b      	mov	r3, r1
 800316c:	813b      	strh	r3, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003180:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	2200      	movs	r2, #0
 800319a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f9de 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b8:	d103      	bne.n	80031c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0aa      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	6a3a      	ldr	r2, [r7, #32]
 80031da:	4952      	ldr	r1, [pc, #328]	@ (8003324 <I2C_RequestMemoryRead+0x1cc>)
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fa39 	bl	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e097      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fac4 	bl	8003794 <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e076      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003234:	893b      	ldrh	r3, [r7, #8]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	611a      	str	r2, [r3, #16]
 800323e:	e021      	b.n	8003284 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	b29b      	uxth	r3, r3
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003250:	6a39      	ldr	r1, [r7, #32]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fa9e 	bl	8003794 <I2C_WaitOnTXEFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	2b04      	cmp	r3, #4
 8003264:	d107      	bne.n	8003276 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e050      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327a:	893b      	ldrh	r3, [r7, #8]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003286:	6a39      	ldr	r1, [r7, #32]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fa83 	bl	8003794 <I2C_WaitOnTXEFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	2b04      	cmp	r3, #4
 800329a:	d107      	bne.n	80032ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e035      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f947 	bl	8003560 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00d      	beq.n	80032f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e6:	d103      	bne.n	80032f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e013      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	4906      	ldr	r1, [pc, #24]	@ (8003324 <I2C_RequestMemoryRead+0x1cc>)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f9a2 	bl	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	00010002 	.word	0x00010002

08003328 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003344:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800335a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003368:	2200      	movs	r2, #0
 800336a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	2200      	movs	r2, #0
 800337a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003382:	2b21      	cmp	r3, #33	@ 0x21
 8003384:	d007      	beq.n	8003396 <I2C_DMAXferCplt+0x6e>
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800338c:	2b22      	cmp	r3, #34	@ 0x22
 800338e:	d131      	bne.n	80033f4 <I2C_DMAXferCplt+0xcc>
 8003390:	7cbb      	ldrb	r3, [r7, #18]
 8003392:	2b20      	cmp	r3, #32
 8003394:	d12e      	bne.n	80033f4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2200      	movs	r2, #0
 80033aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	2b29      	cmp	r3, #41	@ 0x29
 80033b0:	d10a      	bne.n	80033c8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2221      	movs	r2, #33	@ 0x21
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2228      	movs	r2, #40	@ 0x28
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033c0:	6978      	ldr	r0, [r7, #20]
 80033c2:	f7ff feb5 	bl	8003130 <HAL_I2C_SlaveTxCpltCallback>
 80033c6:	e00c      	b.n	80033e2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80033cc:	d109      	bne.n	80033e2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2222      	movs	r2, #34	@ 0x22
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2228      	movs	r2, #40	@ 0x28
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033dc:	6978      	ldr	r0, [r7, #20]
 80033de:	f7ff feb1 	bl	8003144 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80033f0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80033f2:	e074      	b.n	80034de <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d06e      	beq.n	80034de <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003418:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003428:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003430:	d009      	beq.n	8003446 <I2C_DMAXferCplt+0x11e>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d006      	beq.n	8003446 <I2C_DMAXferCplt+0x11e>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800343e:	d002      	beq.n	8003446 <I2C_DMAXferCplt+0x11e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b20      	cmp	r3, #32
 8003444:	d107      	bne.n	8003456 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003454:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003464:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003474:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003484:	6978      	ldr	r0, [r7, #20]
 8003486:	f7fd fabb 	bl	8000a00 <HAL_I2C_ErrorCallback>
}
 800348a:	e028      	b.n	80034de <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	d10a      	bne.n	80034b6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80034ae:	6978      	ldr	r0, [r7, #20]
 80034b0:	f7fd fabc 	bl	8000a2c <HAL_I2C_MemRxCpltCallback>
}
 80034b4:	e013      	b.n	80034de <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d002      	beq.n	80034ca <I2C_DMAXferCplt+0x1a2>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d103      	bne.n	80034d2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80034d0:	e002      	b.n	80034d8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2212      	movs	r2, #18
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80034d8:	6978      	ldr	r0, [r7, #20]
 80034da:	f7ff fe1f 	bl	800311c <HAL_I2C_MasterRxCpltCallback>
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	2200      	movs	r2, #0
 8003512:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff f92c 	bl	8002772 <HAL_DMA_GetError>
 800351a:	4603      	mov	r3, r0
 800351c:	2b02      	cmp	r3, #2
 800351e:	d01b      	beq.n	8003558 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800352e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	f043 0210 	orr.w	r2, r3, #16
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7fd fa54 	bl	8000a00 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003570:	e048      	b.n	8003604 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d044      	beq.n	8003604 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357a:	f7fe f91b 	bl	80017b4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x30>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d139      	bne.n	8003604 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d10d      	bne.n	80035b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	43da      	mvns	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4013      	ands	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	e00c      	b.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	43da      	mvns	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4013      	ands	r3, r2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d116      	bne.n	8003604 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e023      	b.n	800364c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	0c1b      	lsrs	r3, r3, #16
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d10d      	bne.n	800362a <I2C_WaitOnFlagUntilTimeout+0xca>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	43da      	mvns	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	e00c      	b.n	8003644 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	43da      	mvns	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	429a      	cmp	r2, r3
 8003648:	d093      	beq.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003662:	e071      	b.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003672:	d123      	bne.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003682:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800368c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a8:	f043 0204 	orr.w	r2, r3, #4
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e067      	b.n	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d041      	beq.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fe f876 	bl	80017b4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d136      	bne.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d10c      	bne.n	80036fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	43da      	mvns	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4013      	ands	r3, r2
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e00b      	b.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	43da      	mvns	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e021      	b.n	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	0c1b      	lsrs	r3, r3, #16
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d10c      	bne.n	800376c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	43da      	mvns	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e00b      	b.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	43da      	mvns	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	bf14      	ite	ne
 800377e:	2301      	movne	r3, #1
 8003780:	2300      	moveq	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	f47f af6d 	bne.w	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a0:	e034      	b.n	800380c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f83e 	bl	8003824 <I2C_IsAcknowledgeFailed>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e034      	b.n	800381c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d028      	beq.n	800380c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ba:	f7fd fffb 	bl	80017b4 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d302      	bcc.n	80037d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d11d      	bne.n	800380c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037da:	2b80      	cmp	r3, #128	@ 0x80
 80037dc:	d016      	beq.n	800380c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	f043 0220 	orr.w	r2, r3, #32
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e007      	b.n	800381c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003816:	2b80      	cmp	r3, #128	@ 0x80
 8003818:	d1c3      	bne.n	80037a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383a:	d11b      	bne.n	8003874 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003844:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	f043 0204 	orr.w	r2, r3, #4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0cc      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b68      	ldr	r3, [pc, #416]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d90c      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b65      	ldr	r3, [pc, #404]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b63      	ldr	r3, [pc, #396]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0b8      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d020      	beq.n	800390e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d8:	4b59      	ldr	r3, [pc, #356]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a58      	ldr	r2, [pc, #352]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f0:	4b53      	ldr	r3, [pc, #332]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a52      	ldr	r2, [pc, #328]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b50      	ldr	r3, [pc, #320]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	494d      	ldr	r1, [pc, #308]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d044      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b47      	ldr	r3, [pc, #284]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d119      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d003      	beq.n	8003942 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393e:	2b03      	cmp	r3, #3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	4b3f      	ldr	r3, [pc, #252]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e06f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e067      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003962:	4b37      	ldr	r3, [pc, #220]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 0203 	bic.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4934      	ldr	r1, [pc, #208]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003974:	f7fd ff1e 	bl	80017b4 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	e00a      	b.n	8003992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397c:	f7fd ff1a 	bl	80017b4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e04f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 020c 	and.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1eb      	bne.n	800397c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d20c      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b20      	ldr	r3, [pc, #128]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e032      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4916      	ldr	r1, [pc, #88]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f6:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	490e      	ldr	r1, [pc, #56]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a0a:	f000 f855 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	490a      	ldr	r1, [pc, #40]	@ (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	5ccb      	ldrb	r3, [r1, r3]
 8003a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a22:	4a09      	ldr	r2, [pc, #36]	@ (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd fe7e 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00
 8003a40:	40023800 	.word	0x40023800
 8003a44:	0800a6b4 	.word	0x0800a6b4
 8003a48:	20000038 	.word	0x20000038
 8003a4c:	2000003c 	.word	0x2000003c

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b03      	ldr	r3, [pc, #12]	@ (8003a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000038 	.word	0x20000038

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a6c:	f7ff fff0 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	@ (8003a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	0800a6c4 	.word	0x0800a6c4

08003a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a94:	f7ff ffdc 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0b5b      	lsrs	r3, r3, #13
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	@ (8003ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	0800a6c4 	.word	0x0800a6c4

08003ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abc:	b0a6      	sub	sp, #152	@ 0x98
 8003abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ade:	4bc8      	ldr	r3, [pc, #800]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	f200 817e 	bhi.w	8003de8 <HAL_RCC_GetSysClockFreq+0x330>
 8003aec:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003de9 	.word	0x08003de9
 8003afc:	08003de9 	.word	0x08003de9
 8003b00:	08003de9 	.word	0x08003de9
 8003b04:	08003b31 	.word	0x08003b31
 8003b08:	08003de9 	.word	0x08003de9
 8003b0c:	08003de9 	.word	0x08003de9
 8003b10:	08003de9 	.word	0x08003de9
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003de9 	.word	0x08003de9
 8003b1c:	08003de9 	.word	0x08003de9
 8003b20:	08003de9 	.word	0x08003de9
 8003b24:	08003ca3 	.word	0x08003ca3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4bb6      	ldr	r3, [pc, #728]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b2e:	e15f      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b30:	4bb5      	ldr	r3, [pc, #724]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b36:	e15b      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b38:	4bb1      	ldr	r3, [pc, #708]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b44:	4bae      	ldr	r3, [pc, #696]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d031      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b50:	4bab      	ldr	r3, [pc, #684]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	2200      	movs	r2, #0
 8003b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b62:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b64:	2300      	movs	r3, #0
 8003b66:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b68:	4ba7      	ldr	r3, [pc, #668]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b6a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b6e:	462a      	mov	r2, r5
 8003b70:	fb03 f202 	mul.w	r2, r3, r2
 8003b74:	2300      	movs	r3, #0
 8003b76:	4621      	mov	r1, r4
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4aa2      	ldr	r2, [pc, #648]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b80:	4621      	mov	r1, r4
 8003b82:	fba1 1202 	umull	r1, r2, r1, r2
 8003b86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b88:	460a      	mov	r2, r1
 8003b8a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003b8c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b8e:	4413      	add	r3, r2
 8003b90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b96:	2200      	movs	r2, #0
 8003b98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b9a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ba0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003ba4:	f7fc fb8c 	bl	80002c0 <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4613      	mov	r3, r2
 8003bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bb2:	e064      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb4:	4b92      	ldr	r3, [pc, #584]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	2200      	movs	r2, #0
 8003bbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bbe:	657a      	str	r2, [r7, #84]	@ 0x54
 8003bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bc8:	2300      	movs	r3, #0
 8003bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bcc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	f04f 0000 	mov.w	r0, #0
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	0159      	lsls	r1, r3, #5
 8003bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003be2:	0150      	lsls	r0, r2, #5
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4621      	mov	r1, r4
 8003bea:	1a51      	subs	r1, r2, r1
 8003bec:	6139      	str	r1, [r7, #16]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c02:	4659      	mov	r1, fp
 8003c04:	018b      	lsls	r3, r1, #6
 8003c06:	4651      	mov	r1, sl
 8003c08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c0c:	4651      	mov	r1, sl
 8003c0e:	018a      	lsls	r2, r1, #6
 8003c10:	4651      	mov	r1, sl
 8003c12:	ebb2 0801 	subs.w	r8, r2, r1
 8003c16:	4659      	mov	r1, fp
 8003c18:	eb63 0901 	sbc.w	r9, r3, r1
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c30:	4690      	mov	r8, r2
 8003c32:	4699      	mov	r9, r3
 8003c34:	4623      	mov	r3, r4
 8003c36:	eb18 0303 	adds.w	r3, r8, r3
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	eb49 0303 	adc.w	r3, r9, r3
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c50:	4629      	mov	r1, r5
 8003c52:	028b      	lsls	r3, r1, #10
 8003c54:	4621      	mov	r1, r4
 8003c56:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	028a      	lsls	r2, r1, #10
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4619      	mov	r1, r3
 8003c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c66:	2200      	movs	r2, #0
 8003c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c70:	f7fc fb26 	bl	80002c0 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c7e:	4b60      	ldr	r3, [pc, #384]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0c1b      	lsrs	r3, r3, #16
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	3301      	adds	r3, #1
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003c90:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003ca0:	e0a6      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca2:	4b57      	ldr	r3, [pc, #348]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003caa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cae:	4b54      	ldr	r3, [pc, #336]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d02a      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cba:	4b51      	ldr	r3, [pc, #324]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4b4e      	ldr	r3, [pc, #312]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cd0:	fb03 f201 	mul.w	r2, r3, r1
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	fb00 f303 	mul.w	r3, r0, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a4a      	ldr	r2, [pc, #296]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cde:	fba0 1202 	umull	r1, r2, r0, r2
 8003ce2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	673a      	str	r2, [r7, #112]	@ 0x70
 8003ce8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003cea:	4413      	add	r3, r2
 8003cec:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf6:	637a      	str	r2, [r7, #52]	@ 0x34
 8003cf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003cfc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003d00:	f7fc fade 	bl	80002c0 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d0e:	e05b      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d10:	4b3b      	ldr	r3, [pc, #236]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	2200      	movs	r2, #0
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d22:	623b      	str	r3, [r7, #32]
 8003d24:	2300      	movs	r3, #0
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	464b      	mov	r3, r9
 8003d30:	f04f 0000 	mov.w	r0, #0
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	0159      	lsls	r1, r3, #5
 8003d3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d3e:	0150      	lsls	r0, r2, #5
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4641      	mov	r1, r8
 8003d46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d64:	ebb2 040a 	subs.w	r4, r2, sl
 8003d68:	eb63 050b 	sbc.w	r5, r3, fp
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	00eb      	lsls	r3, r5, #3
 8003d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d7a:	00e2      	lsls	r2, r4, #3
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	461d      	mov	r5, r3
 8003d80:	4643      	mov	r3, r8
 8003d82:	18e3      	adds	r3, r4, r3
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	464b      	mov	r3, r9
 8003d88:	eb45 0303 	adc.w	r3, r5, r3
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	028b      	lsls	r3, r1, #10
 8003d9e:	4621      	mov	r1, r4
 8003da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003da4:	4621      	mov	r1, r4
 8003da6:	028a      	lsls	r2, r1, #10
 8003da8:	4610      	mov	r0, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db0:	2200      	movs	r2, #0
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	61fa      	str	r2, [r7, #28]
 8003db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dba:	f7fc fa81 	bl	80002c0 <__aeabi_uldivmod>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	0f1b      	lsrs	r3, r3, #28
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003de6:	e003      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003dee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3798      	adds	r7, #152	@ 0x98
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	00f42400 	.word	0x00f42400
 8003e08:	017d7840 	.word	0x017d7840

08003e0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e28d      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8083 	beq.w	8003f32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e2c:	4b94      	ldr	r3, [pc, #592]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d019      	beq.n	8003e6c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e38:	4b91      	ldr	r3, [pc, #580]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e44:	4b8e      	ldr	r3, [pc, #568]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e50:	d00c      	beq.n	8003e6c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e52:	4b8b      	ldr	r3, [pc, #556]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d112      	bne.n	8003e84 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5e:	4b88      	ldr	r3, [pc, #544]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e6a:	d10b      	bne.n	8003e84 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	4b84      	ldr	r3, [pc, #528]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d05b      	beq.n	8003f30 <HAL_RCC_OscConfig+0x124>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d157      	bne.n	8003f30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e25a      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e8c:	d106      	bne.n	8003e9c <HAL_RCC_OscConfig+0x90>
 8003e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a7b      	ldr	r2, [pc, #492]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e01d      	b.n	8003ed8 <HAL_RCC_OscConfig+0xcc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xb4>
 8003ea6:	4b76      	ldr	r3, [pc, #472]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a75      	ldr	r2, [pc, #468]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b73      	ldr	r3, [pc, #460]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a72      	ldr	r2, [pc, #456]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0xcc>
 8003ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a6b      	ldr	r2, [pc, #428]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d013      	beq.n	8003f08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fc68 	bl	80017b4 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fc64 	bl	80017b4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	@ 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e21f      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xdc>
 8003f06:	e014      	b.n	8003f32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fc54 	bl	80017b4 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd fc50 	bl	80017b4 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	@ 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e20b      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f22:	4b57      	ldr	r3, [pc, #348]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x104>
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d06f      	beq.n	800401e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f3e:	4b50      	ldr	r3, [pc, #320]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d017      	beq.n	8003f7a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d105      	bne.n	8003f62 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f56:	4b4a      	ldr	r3, [pc, #296]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f62:	4b47      	ldr	r3, [pc, #284]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d11c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f6e:	4b44      	ldr	r3, [pc, #272]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d116      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7a:	4b41      	ldr	r3, [pc, #260]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_RCC_OscConfig+0x186>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e1d3      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f92:	4b3b      	ldr	r3, [pc, #236]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4937      	ldr	r1, [pc, #220]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa6:	e03a      	b.n	800401e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb0:	4b34      	ldr	r3, [pc, #208]	@ (8004084 <HAL_RCC_OscConfig+0x278>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fd fbfd 	bl	80017b4 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fbe:	f7fd fbf9 	bl	80017b4 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e1b4      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fdc:	4b28      	ldr	r3, [pc, #160]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4925      	ldr	r1, [pc, #148]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]
 8003ff0:	e015      	b.n	800401e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff2:	4b24      	ldr	r3, [pc, #144]	@ (8004084 <HAL_RCC_OscConfig+0x278>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fbdc 	bl	80017b4 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004000:	f7fd fbd8 	bl	80017b4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e193      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004012:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d036      	beq.n	8004098 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d016      	beq.n	8004060 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004032:	4b15      	ldr	r3, [pc, #84]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fd fbbc 	bl	80017b4 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004040:	f7fd fbb8 	bl	80017b4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e173      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004052:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <HAL_RCC_OscConfig+0x274>)
 8004054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x234>
 800405e:	e01b      	b.n	8004098 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004066:	f7fd fba5 	bl	80017b4 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406c:	e00e      	b.n	800408c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406e:	f7fd fba1 	bl	80017b4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d907      	bls.n	800408c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e15c      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
 8004080:	40023800 	.word	0x40023800
 8004084:	42470000 	.word	0x42470000
 8004088:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408c:	4b8a      	ldr	r3, [pc, #552]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 800408e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ea      	bne.n	800406e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8097 	beq.w	80041d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040aa:	4b83      	ldr	r3, [pc, #524]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10f      	bne.n	80040d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	4b7f      	ldr	r3, [pc, #508]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	4a7e      	ldr	r2, [pc, #504]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c6:	4b7c      	ldr	r3, [pc, #496]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d6:	4b79      	ldr	r3, [pc, #484]	@ (80042bc <HAL_RCC_OscConfig+0x4b0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e2:	4b76      	ldr	r3, [pc, #472]	@ (80042bc <HAL_RCC_OscConfig+0x4b0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a75      	ldr	r2, [pc, #468]	@ (80042bc <HAL_RCC_OscConfig+0x4b0>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ee:	f7fd fb61 	bl	80017b4 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fd fb5d 	bl	80017b4 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e118      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	4b6c      	ldr	r3, [pc, #432]	@ (80042bc <HAL_RCC_OscConfig+0x4b0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x31e>
 800411c:	4b66      	ldr	r3, [pc, #408]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004120:	4a65      	ldr	r2, [pc, #404]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6713      	str	r3, [r2, #112]	@ 0x70
 8004128:	e01c      	b.n	8004164 <HAL_RCC_OscConfig+0x358>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x340>
 8004132:	4b61      	ldr	r3, [pc, #388]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	4a60      	ldr	r2, [pc, #384]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 8004138:	f043 0304 	orr.w	r3, r3, #4
 800413c:	6713      	str	r3, [r2, #112]	@ 0x70
 800413e:	4b5e      	ldr	r3, [pc, #376]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004142:	4a5d      	ldr	r2, [pc, #372]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	6713      	str	r3, [r2, #112]	@ 0x70
 800414a:	e00b      	b.n	8004164 <HAL_RCC_OscConfig+0x358>
 800414c:	4b5a      	ldr	r3, [pc, #360]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004150:	4a59      	ldr	r2, [pc, #356]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	6713      	str	r3, [r2, #112]	@ 0x70
 8004158:	4b57      	ldr	r3, [pc, #348]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415c:	4a56      	ldr	r2, [pc, #344]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 800415e:	f023 0304 	bic.w	r3, r3, #4
 8004162:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d015      	beq.n	8004198 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fd fb22 	bl	80017b4 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004172:	e00a      	b.n	800418a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fd fb1e 	bl	80017b4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e0d7      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418a:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ee      	beq.n	8004174 <HAL_RCC_OscConfig+0x368>
 8004196:	e014      	b.n	80041c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004198:	f7fd fb0c 	bl	80017b4 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fd fb08 	bl	80017b4 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e0c1      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b6:	4b40      	ldr	r3, [pc, #256]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1ee      	bne.n	80041a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c8:	4b3b      	ldr	r3, [pc, #236]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	4a3a      	ldr	r2, [pc, #232]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 80041ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80ad 	beq.w	8004338 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041de:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d060      	beq.n	80042ac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d145      	bne.n	800427e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	4b33      	ldr	r3, [pc, #204]	@ (80042c0 <HAL_RCC_OscConfig+0x4b4>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd fadc 	bl	80017b4 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004200:	f7fd fad8 	bl	80017b4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e093      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	4b29      	ldr	r3, [pc, #164]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	019b      	lsls	r3, r3, #6
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	3b01      	subs	r3, #1
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	061b      	lsls	r3, r3, #24
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004248:	071b      	lsls	r3, r3, #28
 800424a:	491b      	ldr	r1, [pc, #108]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004250:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <HAL_RCC_OscConfig+0x4b4>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004256:	f7fd faad 	bl	80017b4 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425e:	f7fd faa9 	bl	80017b4 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e064      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x452>
 800427c:	e05c      	b.n	8004338 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427e:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <HAL_RCC_OscConfig+0x4b4>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd fa96 	bl	80017b4 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7fd fa92 	bl	80017b4 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e04d      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCC_OscConfig+0x4ac>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x480>
 80042aa:	e045      	b.n	8004338 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e040      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40007000 	.word	0x40007000
 80042c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004344 <HAL_RCC_OscConfig+0x538>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d030      	beq.n	8004334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d129      	bne.n	8004334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d122      	bne.n	8004334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042f4:	4013      	ands	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d119      	bne.n	8004334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	3b01      	subs	r3, #1
 800430e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d10f      	bne.n	8004334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d107      	bne.n	8004334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800

08004348 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e07b      	b.n	8004452 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d108      	bne.n	8004374 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800436a:	d009      	beq.n	8004380 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	61da      	str	r2, [r3, #28]
 8004372:	e005      	b.n	8004380 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd f802 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004404:	ea42 0103 	orr.w	r1, r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	f003 0104 	and.w	r1, r3, #4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	f003 0210 	and.w	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004440:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b088      	sub	sp, #32
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800446a:	f7fd f9a3 	bl	80017b4 <HAL_GetTick>
 800446e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d001      	beq.n	8004484 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
 8004482:	e12a      	b.n	80046da <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_SPI_Transmit+0x36>
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e122      	b.n	80046da <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_SPI_Transmit+0x48>
 800449e:	2302      	movs	r3, #2
 80044a0:	e11b      	b.n	80046da <HAL_SPI_Transmit+0x280>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2203      	movs	r2, #3
 80044ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	88fa      	ldrh	r2, [r7, #6]
 80044c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044f0:	d10f      	bne.n	8004512 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004500:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004510:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451c:	2b40      	cmp	r3, #64	@ 0x40
 800451e:	d007      	beq.n	8004530 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004538:	d152      	bne.n	80045e0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_SPI_Transmit+0xee>
 8004542:	8b7b      	ldrh	r3, [r7, #26]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d145      	bne.n	80045d4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	881a      	ldrh	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	1c9a      	adds	r2, r3, #2
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800456c:	e032      	b.n	80045d4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b02      	cmp	r3, #2
 800457a:	d112      	bne.n	80045a2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045a0:	e018      	b.n	80045d4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a2:	f7fd f907 	bl	80017b4 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d803      	bhi.n	80045ba <HAL_SPI_Transmit+0x160>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d102      	bne.n	80045c0 <HAL_SPI_Transmit+0x166>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e082      	b.n	80046da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1c7      	bne.n	800456e <HAL_SPI_Transmit+0x114>
 80045de:	e053      	b.n	8004688 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_Transmit+0x194>
 80045e8:	8b7b      	ldrh	r3, [r7, #26]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d147      	bne.n	800467e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004614:	e033      	b.n	800467e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d113      	bne.n	800464c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	7812      	ldrb	r2, [r2, #0]
 8004630:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	86da      	strh	r2, [r3, #54]	@ 0x36
 800464a:	e018      	b.n	800467e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800464c:	f7fd f8b2 	bl	80017b4 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d803      	bhi.n	8004664 <HAL_SPI_Transmit+0x20a>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d102      	bne.n	800466a <HAL_SPI_Transmit+0x210>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e02d      	b.n	80046da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1c6      	bne.n	8004616 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fd21 	bl	80050d4 <SPI_EndRxTxTransaction>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b088      	sub	sp, #32
 80046e6:	af02      	add	r7, sp, #8
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
 8004700:	e104      	b.n	800490c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_SPI_Receive+0x2c>
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e0fc      	b.n	800490c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800471a:	d112      	bne.n	8004742 <HAL_SPI_Receive+0x60>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10e      	bne.n	8004742 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2204      	movs	r2, #4
 8004728:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800472c:	88fa      	ldrh	r2, [r7, #6]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f8eb 	bl	8004914 <HAL_SPI_TransmitReceive>
 800473e:	4603      	mov	r3, r0
 8004740:	e0e4      	b.n	800490c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004742:	f7fd f837 	bl	80017b4 <HAL_GetTick>
 8004746:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_SPI_Receive+0x74>
 8004752:	2302      	movs	r3, #2
 8004754:	e0da      	b.n	800490c <HAL_SPI_Receive+0x22a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2204      	movs	r2, #4
 8004762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a4:	d10f      	bne.n	80047c6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	2b40      	cmp	r3, #64	@ 0x40
 80047d2:	d007      	beq.n	80047e4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d170      	bne.n	80048ce <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047ec:	e035      	b.n	800485a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d115      	bne.n	8004828 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f103 020c 	add.w	r2, r3, #12
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004826:	e018      	b.n	800485a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004828:	f7fc ffc4 	bl	80017b4 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d803      	bhi.n	8004840 <HAL_SPI_Receive+0x15e>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d102      	bne.n	8004846 <HAL_SPI_Receive+0x164>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e058      	b.n	800490c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1c4      	bne.n	80047ee <HAL_SPI_Receive+0x10c>
 8004864:	e038      	b.n	80048d8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d113      	bne.n	800489c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487e:	b292      	uxth	r2, r2
 8004880:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004886:	1c9a      	adds	r2, r3, #2
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800489a:	e018      	b.n	80048ce <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489c:	f7fc ff8a 	bl	80017b4 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d803      	bhi.n	80048b4 <HAL_SPI_Receive+0x1d2>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d102      	bne.n	80048ba <HAL_SPI_Receive+0x1d8>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e01e      	b.n	800490c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1c6      	bne.n	8004866 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fb93 	bl	8005008 <SPI_EndRxTransaction>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800490a:	2300      	movs	r3, #0
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	@ 0x28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004922:	2301      	movs	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004926:	f7fc ff45 	bl	80017b4 <HAL_GetTick>
 800492a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004932:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800493a:	887b      	ldrh	r3, [r7, #2]
 800493c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d00c      	beq.n	800495e <HAL_SPI_TransmitReceive+0x4a>
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800494a:	d106      	bne.n	800495a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <HAL_SPI_TransmitReceive+0x46>
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	2b04      	cmp	r3, #4
 8004958:	d001      	beq.n	800495e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
 800495c:	e17f      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x5c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x5c>
 800496a:	887b      	ldrh	r3, [r7, #2]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e174      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x6e>
 800497e:	2302      	movs	r3, #2
 8004980:	e16d      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x34a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2205      	movs	r2, #5
 800499a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	887a      	ldrh	r2, [r7, #2]
 80049ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	887a      	ldrh	r2, [r7, #2]
 80049c6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049de:	2b40      	cmp	r3, #64	@ 0x40
 80049e0:	d007      	beq.n	80049f2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049fa:	d17e      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_SPI_TransmitReceive+0xf6>
 8004a04:	8afb      	ldrh	r3, [r7, #22]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d16c      	bne.n	8004ae4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	881a      	ldrh	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	1c9a      	adds	r2, r3, #2
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a2e:	e059      	b.n	8004ae4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d11b      	bne.n	8004a76 <HAL_SPI_TransmitReceive+0x162>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d016      	beq.n	8004a76 <HAL_SPI_TransmitReceive+0x162>
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d113      	bne.n	8004a76 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	881a      	ldrh	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	1c9a      	adds	r2, r3, #2
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d119      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x1a4>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d014      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a98:	b292      	uxth	r2, r2
 8004a9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	1c9a      	adds	r2, r3, #2
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ab8:	f7fc fe7c 	bl	80017b4 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d80d      	bhi.n	8004ae4 <HAL_SPI_TransmitReceive+0x1d0>
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d009      	beq.n	8004ae4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e0bc      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1a0      	bne.n	8004a30 <HAL_SPI_TransmitReceive+0x11c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d19b      	bne.n	8004a30 <HAL_SPI_TransmitReceive+0x11c>
 8004af8:	e082      	b.n	8004c00 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x1f4>
 8004b02:	8afb      	ldrh	r3, [r7, #22]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d171      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b2e:	e05d      	b.n	8004bec <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d11c      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x264>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d017      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x264>
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d114      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d119      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x2a6>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d014      	beq.n	8004bba <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bba:	f7fc fdfb 	bl	80017b4 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d803      	bhi.n	8004bd2 <HAL_SPI_TransmitReceive+0x2be>
 8004bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d102      	bne.n	8004bd8 <HAL_SPI_TransmitReceive+0x2c4>
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e038      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d19c      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x21c>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d197      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fa65 	bl	80050d4 <SPI_EndRxTxTransaction>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e01d      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3728      	adds	r7, #40	@ 0x28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d001      	beq.n	8004c86 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
 8004c84:	e097      	b.n	8004db6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_SPI_Transmit_DMA+0x2a>
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e08f      	b.n	8004db6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_SPI_Transmit_DMA+0x3c>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e088      	b.n	8004db6 <HAL_SPI_Transmit_DMA+0x14e>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2203      	movs	r2, #3
 8004cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	88fa      	ldrh	r2, [r7, #6]
 8004cc4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	88fa      	ldrh	r2, [r7, #6]
 8004cca:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf2:	d10f      	bne.n	8004d14 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d18:	4a29      	ldr	r2, [pc, #164]	@ (8004dc0 <HAL_SPI_Transmit_DMA+0x158>)
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d20:	4a28      	ldr	r2, [pc, #160]	@ (8004dc4 <HAL_SPI_Transmit_DMA+0x15c>)
 8004d22:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d28:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <HAL_SPI_Transmit_DMA+0x160>)
 8004d2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d30:	2200      	movs	r2, #0
 8004d32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d4c:	f7fd fc97 	bl	800267e <HAL_DMA_Start_IT>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5a:	f043 0210 	orr.w	r2, r3, #16
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e023      	b.n	8004db6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d78:	2b40      	cmp	r3, #64	@ 0x40
 8004d7a:	d007      	beq.n	8004d8c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d8a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0220 	orr.w	r2, r2, #32
 8004da2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0202 	orr.w	r2, r2, #2
 8004db2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	08004e9d 	.word	0x08004e9d
 8004dc4:	08004df5 	.word	0x08004df5
 8004dc8:	08004eb9 	.word	0x08004eb9

08004dcc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e02:	f7fc fcd7 	bl	80017b4 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e16:	d03b      	beq.n	8004e90 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0220 	bic.w	r2, r2, #32
 8004e26:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0202 	bic.w	r2, r2, #2
 8004e36:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	2164      	movs	r1, #100	@ 0x64
 8004e3c:	6978      	ldr	r0, [r7, #20]
 8004e3e:	f000 f949 	bl	80050d4 <SPI_EndRxTxTransaction>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e88:	6978      	ldr	r0, [r7, #20]
 8004e8a:	f7ff ffa9 	bl	8004de0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e8e:	e002      	b.n	8004e96 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004e90:	6978      	ldr	r0, [r7, #20]
 8004e92:	f7fb fddd 	bl	8000a50 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff ff8e 	bl	8004dcc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0203 	bic.w	r2, r2, #3
 8004ed4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eda:	f043 0210 	orr.w	r2, r3, #16
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff ff78 	bl	8004de0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f08:	f7fc fc54 	bl	80017b4 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	4413      	add	r3, r2
 8004f16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f18:	f7fc fc4c 	bl	80017b4 <HAL_GetTick>
 8004f1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f1e:	4b39      	ldr	r3, [pc, #228]	@ (8005004 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	015b      	lsls	r3, r3, #5
 8004f24:	0d1b      	lsrs	r3, r3, #20
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	fb02 f303 	mul.w	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f2e:	e055      	b.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d051      	beq.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f38:	f7fc fc3c 	bl	80017b4 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d902      	bls.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d13d      	bne.n	8004fca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f66:	d111      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f70:	d004      	beq.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7a:	d107      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f94:	d10f      	bne.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e018      	b.n	8004ffc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	e002      	b.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d19a      	bne.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000038 	.word	0x20000038

08005008 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800501c:	d111      	bne.n	8005042 <SPI_EndRxTransaction+0x3a>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005026:	d004      	beq.n	8005032 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005030:	d107      	bne.n	8005042 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005040:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800504a:	d12a      	bne.n	80050a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005054:	d012      	beq.n	800507c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2200      	movs	r2, #0
 800505e:	2180      	movs	r1, #128	@ 0x80
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff ff49 	bl	8004ef8 <SPI_WaitFlagStateUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d02d      	beq.n	80050c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e026      	b.n	80050ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	2101      	movs	r1, #1
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff ff36 	bl	8004ef8 <SPI_WaitFlagStateUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01a      	beq.n	80050c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e013      	b.n	80050ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2101      	movs	r1, #1
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff ff23 	bl	8004ef8 <SPI_WaitFlagStateUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e000      	b.n	80050ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2201      	movs	r2, #1
 80050e8:	2102      	movs	r1, #2
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff ff04 	bl	8004ef8 <SPI_WaitFlagStateUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e032      	b.n	800516c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005106:	4b1b      	ldr	r3, [pc, #108]	@ (8005174 <SPI_EndRxTxTransaction+0xa0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1b      	ldr	r2, [pc, #108]	@ (8005178 <SPI_EndRxTxTransaction+0xa4>)
 800510c:	fba2 2303 	umull	r2, r3, r2, r3
 8005110:	0d5b      	lsrs	r3, r3, #21
 8005112:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005124:	d112      	bne.n	800514c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	2180      	movs	r1, #128	@ 0x80
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff fee1 	bl	8004ef8 <SPI_WaitFlagStateUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d016      	beq.n	800516a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e00f      	b.n	800516c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	3b01      	subs	r3, #1
 8005156:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005162:	2b80      	cmp	r3, #128	@ 0x80
 8005164:	d0f2      	beq.n	800514c <SPI_EndRxTxTransaction+0x78>
 8005166:	e000      	b.n	800516a <SPI_EndRxTxTransaction+0x96>
        break;
 8005168:	bf00      	nop
  }

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000038 	.word	0x20000038
 8005178:	165e9f81 	.word	0x165e9f81

0800517c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e042      	b.n	8005214 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc f946 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2224      	movs	r2, #36	@ 0x24
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f973 	bl	80054ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695a      	ldr	r2, [r3, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	@ 0x28
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b20      	cmp	r3, #32
 800523a:	d175      	bne.n	8005328 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_UART_Transmit+0x2c>
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e06e      	b.n	800532a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2221      	movs	r2, #33	@ 0x21
 8005256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525a:	f7fc faab 	bl	80017b4 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	88fa      	ldrh	r2, [r7, #6]
 800526a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005274:	d108      	bne.n	8005288 <HAL_UART_Transmit+0x6c>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	e003      	b.n	8005290 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005290:	e02e      	b.n	80052f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2200      	movs	r2, #0
 800529a:	2180      	movs	r1, #128	@ 0x80
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f848 	bl	8005332 <UART_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e03a      	b.n	800532a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	3302      	adds	r3, #2
 80052ce:	61bb      	str	r3, [r7, #24]
 80052d0:	e007      	b.n	80052e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	3301      	adds	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1cb      	bne.n	8005292 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	2140      	movs	r1, #64	@ 0x40
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f814 	bl	8005332 <UART_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e006      	b.n	800532a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b086      	sub	sp, #24
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	4613      	mov	r3, r2
 8005340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005342:	e03b      	b.n	80053bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d037      	beq.n	80053bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534c:	f7fc fa32 	bl	80017b4 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	6a3a      	ldr	r2, [r7, #32]
 8005358:	429a      	cmp	r2, r3
 800535a:	d302      	bcc.n	8005362 <UART_WaitOnFlagUntilTimeout+0x30>
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e03a      	b.n	80053dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b80      	cmp	r3, #128	@ 0x80
 8005378:	d020      	beq.n	80053bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b40      	cmp	r3, #64	@ 0x40
 800537e:	d01d      	beq.n	80053bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b08      	cmp	r3, #8
 800538c:	d116      	bne.n	80053bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f81d 	bl	80053e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2208      	movs	r2, #8
 80053ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e00f      	b.n	80053dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4013      	ands	r3, r2
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d0b4      	beq.n	8005344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b095      	sub	sp, #84	@ 0x54
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	330c      	adds	r3, #12
 80053f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800540c:	643a      	str	r2, [r7, #64]	@ 0x40
 800540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005412:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800541a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e5      	bne.n	80053ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005440:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005442:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e5      	bne.n	8005420 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005458:	2b01      	cmp	r3, #1
 800545a:	d119      	bne.n	8005490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60bb      	str	r3, [r7, #8]
   return(result);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f023 0310 	bic.w	r3, r3, #16
 8005472:	647b      	str	r3, [r7, #68]	@ 0x44
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800547c:	61ba      	str	r2, [r7, #24]
 800547e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6979      	ldr	r1, [r7, #20]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	613b      	str	r3, [r7, #16]
   return(result);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800549e:	bf00      	nop
 80054a0:	3754      	adds	r7, #84	@ 0x54
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b0:	b0c0      	sub	sp, #256	@ 0x100
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c8:	68d9      	ldr	r1, [r3, #12]
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	ea40 0301 	orr.w	r3, r0, r1
 80054d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005504:	f021 010c 	bic.w	r1, r1, #12
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005512:	430b      	orrs	r3, r1
 8005514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	6999      	ldr	r1, [r3, #24]
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	ea40 0301 	orr.w	r3, r0, r1
 8005532:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b8f      	ldr	r3, [pc, #572]	@ (8005778 <UART_SetConfig+0x2cc>)
 800553c:	429a      	cmp	r2, r3
 800553e:	d005      	beq.n	800554c <UART_SetConfig+0xa0>
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b8d      	ldr	r3, [pc, #564]	@ (800577c <UART_SetConfig+0x2d0>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d104      	bne.n	8005556 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800554c:	f7fe faa0 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 8005550:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005554:	e003      	b.n	800555e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005556:	f7fe fa87 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 800555a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005568:	f040 810c 	bne.w	8005784 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800556c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005570:	2200      	movs	r2, #0
 8005572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005576:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800557a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800557e:	4622      	mov	r2, r4
 8005580:	462b      	mov	r3, r5
 8005582:	1891      	adds	r1, r2, r2
 8005584:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005586:	415b      	adcs	r3, r3
 8005588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800558a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800558e:	4621      	mov	r1, r4
 8005590:	eb12 0801 	adds.w	r8, r2, r1
 8005594:	4629      	mov	r1, r5
 8005596:	eb43 0901 	adc.w	r9, r3, r1
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ae:	4690      	mov	r8, r2
 80055b0:	4699      	mov	r9, r3
 80055b2:	4623      	mov	r3, r4
 80055b4:	eb18 0303 	adds.w	r3, r8, r3
 80055b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055bc:	462b      	mov	r3, r5
 80055be:	eb49 0303 	adc.w	r3, r9, r3
 80055c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055da:	460b      	mov	r3, r1
 80055dc:	18db      	adds	r3, r3, r3
 80055de:	653b      	str	r3, [r7, #80]	@ 0x50
 80055e0:	4613      	mov	r3, r2
 80055e2:	eb42 0303 	adc.w	r3, r2, r3
 80055e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80055e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055f0:	f7fa fe66 	bl	80002c0 <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4b61      	ldr	r3, [pc, #388]	@ (8005780 <UART_SetConfig+0x2d4>)
 80055fa:	fba3 2302 	umull	r2, r3, r3, r2
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	011c      	lsls	r4, r3, #4
 8005602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005606:	2200      	movs	r2, #0
 8005608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800560c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005610:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005614:	4642      	mov	r2, r8
 8005616:	464b      	mov	r3, r9
 8005618:	1891      	adds	r1, r2, r2
 800561a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800561c:	415b      	adcs	r3, r3
 800561e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005620:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005624:	4641      	mov	r1, r8
 8005626:	eb12 0a01 	adds.w	sl, r2, r1
 800562a:	4649      	mov	r1, r9
 800562c:	eb43 0b01 	adc.w	fp, r3, r1
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800563c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005644:	4692      	mov	sl, r2
 8005646:	469b      	mov	fp, r3
 8005648:	4643      	mov	r3, r8
 800564a:	eb1a 0303 	adds.w	r3, sl, r3
 800564e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005652:	464b      	mov	r3, r9
 8005654:	eb4b 0303 	adc.w	r3, fp, r3
 8005658:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005668:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800566c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005670:	460b      	mov	r3, r1
 8005672:	18db      	adds	r3, r3, r3
 8005674:	643b      	str	r3, [r7, #64]	@ 0x40
 8005676:	4613      	mov	r3, r2
 8005678:	eb42 0303 	adc.w	r3, r2, r3
 800567c:	647b      	str	r3, [r7, #68]	@ 0x44
 800567e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005682:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005686:	f7fa fe1b 	bl	80002c0 <__aeabi_uldivmod>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4611      	mov	r1, r2
 8005690:	4b3b      	ldr	r3, [pc, #236]	@ (8005780 <UART_SetConfig+0x2d4>)
 8005692:	fba3 2301 	umull	r2, r3, r3, r1
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	2264      	movs	r2, #100	@ 0x64
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	1acb      	subs	r3, r1, r3
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056a6:	4b36      	ldr	r3, [pc, #216]	@ (8005780 <UART_SetConfig+0x2d4>)
 80056a8:	fba3 2302 	umull	r2, r3, r3, r2
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056b4:	441c      	add	r4, r3
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	1891      	adds	r1, r2, r2
 80056ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056d0:	415b      	adcs	r3, r3
 80056d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056d8:	4641      	mov	r1, r8
 80056da:	1851      	adds	r1, r2, r1
 80056dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80056de:	4649      	mov	r1, r9
 80056e0:	414b      	adcs	r3, r1
 80056e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056f0:	4659      	mov	r1, fp
 80056f2:	00cb      	lsls	r3, r1, #3
 80056f4:	4651      	mov	r1, sl
 80056f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056fa:	4651      	mov	r1, sl
 80056fc:	00ca      	lsls	r2, r1, #3
 80056fe:	4610      	mov	r0, r2
 8005700:	4619      	mov	r1, r3
 8005702:	4603      	mov	r3, r0
 8005704:	4642      	mov	r2, r8
 8005706:	189b      	adds	r3, r3, r2
 8005708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800570c:	464b      	mov	r3, r9
 800570e:	460a      	mov	r2, r1
 8005710:	eb42 0303 	adc.w	r3, r2, r3
 8005714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005724:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800572c:	460b      	mov	r3, r1
 800572e:	18db      	adds	r3, r3, r3
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005732:	4613      	mov	r3, r2
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800573e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005742:	f7fa fdbd 	bl	80002c0 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <UART_SetConfig+0x2d4>)
 800574c:	fba3 1302 	umull	r1, r3, r3, r2
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	2164      	movs	r1, #100	@ 0x64
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	3332      	adds	r3, #50	@ 0x32
 800575e:	4a08      	ldr	r2, [pc, #32]	@ (8005780 <UART_SetConfig+0x2d4>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	f003 0207 	and.w	r2, r3, #7
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4422      	add	r2, r4
 8005772:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005774:	e106      	b.n	8005984 <UART_SetConfig+0x4d8>
 8005776:	bf00      	nop
 8005778:	40011000 	.word	0x40011000
 800577c:	40011400 	.word	0x40011400
 8005780:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005788:	2200      	movs	r2, #0
 800578a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800578e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005792:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005796:	4642      	mov	r2, r8
 8005798:	464b      	mov	r3, r9
 800579a:	1891      	adds	r1, r2, r2
 800579c:	6239      	str	r1, [r7, #32]
 800579e:	415b      	adcs	r3, r3
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057a6:	4641      	mov	r1, r8
 80057a8:	1854      	adds	r4, r2, r1
 80057aa:	4649      	mov	r1, r9
 80057ac:	eb43 0501 	adc.w	r5, r3, r1
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	00eb      	lsls	r3, r5, #3
 80057ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057be:	00e2      	lsls	r2, r4, #3
 80057c0:	4614      	mov	r4, r2
 80057c2:	461d      	mov	r5, r3
 80057c4:	4643      	mov	r3, r8
 80057c6:	18e3      	adds	r3, r4, r3
 80057c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057cc:	464b      	mov	r3, r9
 80057ce:	eb45 0303 	adc.w	r3, r5, r3
 80057d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057f2:	4629      	mov	r1, r5
 80057f4:	008b      	lsls	r3, r1, #2
 80057f6:	4621      	mov	r1, r4
 80057f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057fc:	4621      	mov	r1, r4
 80057fe:	008a      	lsls	r2, r1, #2
 8005800:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005804:	f7fa fd5c 	bl	80002c0 <__aeabi_uldivmod>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4b60      	ldr	r3, [pc, #384]	@ (8005990 <UART_SetConfig+0x4e4>)
 800580e:	fba3 2302 	umull	r2, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	011c      	lsls	r4, r3, #4
 8005816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581a:	2200      	movs	r2, #0
 800581c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005820:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005824:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	1891      	adds	r1, r2, r2
 800582e:	61b9      	str	r1, [r7, #24]
 8005830:	415b      	adcs	r3, r3
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005838:	4641      	mov	r1, r8
 800583a:	1851      	adds	r1, r2, r1
 800583c:	6139      	str	r1, [r7, #16]
 800583e:	4649      	mov	r1, r9
 8005840:	414b      	adcs	r3, r1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005850:	4659      	mov	r1, fp
 8005852:	00cb      	lsls	r3, r1, #3
 8005854:	4651      	mov	r1, sl
 8005856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800585a:	4651      	mov	r1, sl
 800585c:	00ca      	lsls	r2, r1, #3
 800585e:	4610      	mov	r0, r2
 8005860:	4619      	mov	r1, r3
 8005862:	4603      	mov	r3, r0
 8005864:	4642      	mov	r2, r8
 8005866:	189b      	adds	r3, r3, r2
 8005868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800586c:	464b      	mov	r3, r9
 800586e:	460a      	mov	r2, r1
 8005870:	eb42 0303 	adc.w	r3, r2, r3
 8005874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005882:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005890:	4649      	mov	r1, r9
 8005892:	008b      	lsls	r3, r1, #2
 8005894:	4641      	mov	r1, r8
 8005896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800589a:	4641      	mov	r1, r8
 800589c:	008a      	lsls	r2, r1, #2
 800589e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058a2:	f7fa fd0d 	bl	80002c0 <__aeabi_uldivmod>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	4b38      	ldr	r3, [pc, #224]	@ (8005990 <UART_SetConfig+0x4e4>)
 80058ae:	fba3 2301 	umull	r2, r3, r3, r1
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	2264      	movs	r2, #100	@ 0x64
 80058b6:	fb02 f303 	mul.w	r3, r2, r3
 80058ba:	1acb      	subs	r3, r1, r3
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	3332      	adds	r3, #50	@ 0x32
 80058c0:	4a33      	ldr	r2, [pc, #204]	@ (8005990 <UART_SetConfig+0x4e4>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058cc:	441c      	add	r4, r3
 80058ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d2:	2200      	movs	r2, #0
 80058d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80058d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80058d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058dc:	4642      	mov	r2, r8
 80058de:	464b      	mov	r3, r9
 80058e0:	1891      	adds	r1, r2, r2
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	415b      	adcs	r3, r3
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ec:	4641      	mov	r1, r8
 80058ee:	1851      	adds	r1, r2, r1
 80058f0:	6039      	str	r1, [r7, #0]
 80058f2:	4649      	mov	r1, r9
 80058f4:	414b      	adcs	r3, r1
 80058f6:	607b      	str	r3, [r7, #4]
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005904:	4659      	mov	r1, fp
 8005906:	00cb      	lsls	r3, r1, #3
 8005908:	4651      	mov	r1, sl
 800590a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800590e:	4651      	mov	r1, sl
 8005910:	00ca      	lsls	r2, r1, #3
 8005912:	4610      	mov	r0, r2
 8005914:	4619      	mov	r1, r3
 8005916:	4603      	mov	r3, r0
 8005918:	4642      	mov	r2, r8
 800591a:	189b      	adds	r3, r3, r2
 800591c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800591e:	464b      	mov	r3, r9
 8005920:	460a      	mov	r2, r1
 8005922:	eb42 0303 	adc.w	r3, r2, r3
 8005926:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	663b      	str	r3, [r7, #96]	@ 0x60
 8005932:	667a      	str	r2, [r7, #100]	@ 0x64
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005940:	4649      	mov	r1, r9
 8005942:	008b      	lsls	r3, r1, #2
 8005944:	4641      	mov	r1, r8
 8005946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800594a:	4641      	mov	r1, r8
 800594c:	008a      	lsls	r2, r1, #2
 800594e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005952:	f7fa fcb5 	bl	80002c0 <__aeabi_uldivmod>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <UART_SetConfig+0x4e4>)
 800595c:	fba3 1302 	umull	r1, r3, r3, r2
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	2164      	movs	r1, #100	@ 0x64
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	3332      	adds	r3, #50	@ 0x32
 800596e:	4a08      	ldr	r2, [pc, #32]	@ (8005990 <UART_SetConfig+0x4e4>)
 8005970:	fba2 2303 	umull	r2, r3, r2, r3
 8005974:	095b      	lsrs	r3, r3, #5
 8005976:	f003 020f 	and.w	r2, r3, #15
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4422      	add	r2, r4
 8005982:	609a      	str	r2, [r3, #8]
}
 8005984:	bf00      	nop
 8005986:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800598a:	46bd      	mov	sp, r7
 800598c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005990:	51eb851f 	.word	0x51eb851f

08005994 <__NVIC_SetPriority>:
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db0a      	blt.n	80059be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	490c      	ldr	r1, [pc, #48]	@ (80059e0 <__NVIC_SetPriority+0x4c>)
 80059ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b2:	0112      	lsls	r2, r2, #4
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	440b      	add	r3, r1
 80059b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80059bc:	e00a      	b.n	80059d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	4908      	ldr	r1, [pc, #32]	@ (80059e4 <__NVIC_SetPriority+0x50>)
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	3b04      	subs	r3, #4
 80059cc:	0112      	lsls	r2, r2, #4
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	440b      	add	r3, r1
 80059d2:	761a      	strb	r2, [r3, #24]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000e100 	.word	0xe000e100
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80059ec:	2100      	movs	r1, #0
 80059ee:	f06f 0004 	mvn.w	r0, #4
 80059f2:	f7ff ffcf 	bl	8005994 <__NVIC_SetPriority>
#endif
}
 80059f6:	bf00      	nop
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a02:	f3ef 8305 	mrs	r3, IPSR
 8005a06:	603b      	str	r3, [r7, #0]
  return(result);
 8005a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a0e:	f06f 0305 	mvn.w	r3, #5
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	e00c      	b.n	8005a30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a16:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <osKernelInitialize+0x44>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a1e:	4b08      	ldr	r3, [pc, #32]	@ (8005a40 <osKernelInitialize+0x44>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	e002      	b.n	8005a30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a30:	687b      	ldr	r3, [r7, #4]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20000248 	.word	0x20000248

08005a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a4a:	f3ef 8305 	mrs	r3, IPSR
 8005a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a56:	f06f 0305 	mvn.w	r3, #5
 8005a5a:	607b      	str	r3, [r7, #4]
 8005a5c:	e010      	b.n	8005a80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <osKernelStart+0x48>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d109      	bne.n	8005a7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a66:	f7ff ffbf 	bl	80059e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a6a:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <osKernelStart+0x48>)
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a70:	f001 ffc2 	bl	80079f8 <vTaskStartScheduler>
      stat = osOK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	607b      	str	r3, [r7, #4]
 8005a78:	e002      	b.n	8005a80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a80:	687b      	ldr	r3, [r7, #4]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000248 	.word	0x20000248

08005a90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08e      	sub	sp, #56	@ 0x38
 8005a94:	af04      	add	r7, sp, #16
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa0:	f3ef 8305 	mrs	r3, IPSR
 8005aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8005aa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d17e      	bne.n	8005baa <osThreadNew+0x11a>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d07b      	beq.n	8005baa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005ab2:	2380      	movs	r3, #128	@ 0x80
 8005ab4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ab6:	2318      	movs	r3, #24
 8005ab8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d045      	beq.n	8005b56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <osThreadNew+0x48>
        name = attr->name;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <osThreadNew+0x6e>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b38      	cmp	r3, #56	@ 0x38
 8005af0:	d805      	bhi.n	8005afe <osThreadNew+0x6e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <osThreadNew+0x72>
        return (NULL);
 8005afe:	2300      	movs	r3, #0
 8005b00:	e054      	b.n	8005bac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	089b      	lsrs	r3, r3, #2
 8005b10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00e      	beq.n	8005b38 <osThreadNew+0xa8>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005b20:	d90a      	bls.n	8005b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d006      	beq.n	8005b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <osThreadNew+0xa8>
        mem = 1;
 8005b32:	2301      	movs	r3, #1
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	e010      	b.n	8005b5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10c      	bne.n	8005b5a <osThreadNew+0xca>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d108      	bne.n	8005b5a <osThreadNew+0xca>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <osThreadNew+0xca>
          mem = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e001      	b.n	8005b5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d110      	bne.n	8005b82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b68:	9202      	str	r2, [sp, #8]
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6a3a      	ldr	r2, [r7, #32]
 8005b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f001 fd62 	bl	8007640 <xTaskCreateStatic>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	e013      	b.n	8005baa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d110      	bne.n	8005baa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	f107 0310 	add.w	r3, r7, #16
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f001 fdb0 	bl	8007700 <xTaskCreate>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <osThreadNew+0x11a>
            hTask = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005baa:	693b      	ldr	r3, [r7, #16]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3728      	adds	r7, #40	@ 0x28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bbc:	f3ef 8305 	mrs	r3, IPSR
 8005bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <osDelay+0x1c>
    stat = osErrorISR;
 8005bc8:	f06f 0305 	mvn.w	r3, #5
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e007      	b.n	8005be0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f001 fed6 	bl	800798c <vTaskDelay>
    }
  }

  return (stat);
 8005be0:	68fb      	ldr	r3, [r7, #12]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b088      	sub	sp, #32
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf6:	f3ef 8305 	mrs	r3, IPSR
 8005bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bfc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d174      	bne.n	8005cec <osMutexNew+0x102>
    if (attr != NULL) {
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	e001      	b.n	8005c14 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <osMutexNew+0x3a>
      rmtx = 1U;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e001      	b.n	8005c28 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d15c      	bne.n	8005cec <osMutexNew+0x102>
      mem = -1;
 8005c32:	f04f 33ff 	mov.w	r3, #4294967295
 8005c36:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d015      	beq.n	8005c6a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <osMutexNew+0x6a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c4c:	d902      	bls.n	8005c54 <osMutexNew+0x6a>
          mem = 1;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	e00c      	b.n	8005c6e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d108      	bne.n	8005c6e <osMutexNew+0x84>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <osMutexNew+0x84>
            mem = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	e001      	b.n	8005c6e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d112      	bne.n	8005c9a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	2004      	movs	r0, #4
 8005c82:	f000 fd70 	bl	8006766 <xQueueCreateMutexStatic>
 8005c86:	61f8      	str	r0, [r7, #28]
 8005c88:	e016      	b.n	8005cb8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	2001      	movs	r0, #1
 8005c92:	f000 fd68 	bl	8006766 <xQueueCreateMutexStatic>
 8005c96:	61f8      	str	r0, [r7, #28]
 8005c98:	e00e      	b.n	8005cb8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10b      	bne.n	8005cb8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005ca6:	2004      	movs	r0, #4
 8005ca8:	f000 fd45 	bl	8006736 <xQueueCreateMutex>
 8005cac:	61f8      	str	r0, [r7, #28]
 8005cae:	e003      	b.n	8005cb8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f000 fd40 	bl	8006736 <xQueueCreateMutex>
 8005cb6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00c      	beq.n	8005cd8 <osMutexNew+0xee>
        if (attr != NULL) {
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <osMutexNew+0xe2>
          name = attr->name;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e001      	b.n	8005cd0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005cd0:	68f9      	ldr	r1, [r7, #12]
 8005cd2:	69f8      	ldr	r0, [r7, #28]
 8005cd4:	f001 fc2c 	bl	8007530 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <osMutexNew+0x102>
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005cec:	69fb      	ldr	r3, [r7, #28]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b086      	sub	sp, #24
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d14:	f3ef 8305 	mrs	r3, IPSR
 8005d18:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d1a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005d20:	f06f 0305 	mvn.w	r3, #5
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e02c      	b.n	8005d82 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005d2e:	f06f 0303 	mvn.w	r3, #3
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e025      	b.n	8005d82 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d011      	beq.n	8005d60 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6938      	ldr	r0, [r7, #16]
 8005d40:	f000 fd61 	bl	8006806 <xQueueTakeMutexRecursive>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d01b      	beq.n	8005d82 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005d50:	f06f 0301 	mvn.w	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e014      	b.n	8005d82 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005d58:	f06f 0302 	mvn.w	r3, #2
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e010      	b.n	8005d82 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6938      	ldr	r0, [r7, #16]
 8005d64:	f001 f906 	bl	8006f74 <xQueueSemaphoreTake>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d009      	beq.n	8005d82 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005d74:	f06f 0301 	mvn.w	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	e002      	b.n	8005d82 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005d7c:	f06f 0302 	mvn.w	r3, #2
 8005d80:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005d82:	697b      	ldr	r3, [r7, #20]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da8:	f3ef 8305 	mrs	r3, IPSR
 8005dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dae:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <osMutexRelease+0x30>
    stat = osErrorISR;
 8005db4:	f06f 0305 	mvn.w	r3, #5
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e01f      	b.n	8005dfc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005dc2:	f06f 0303 	mvn.w	r3, #3
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e018      	b.n	8005dfc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005dd0:	6938      	ldr	r0, [r7, #16]
 8005dd2:	f000 fce3 	bl	800679c <xQueueGiveMutexRecursive>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d00f      	beq.n	8005dfc <osMutexRelease+0x70>
        stat = osErrorResource;
 8005ddc:	f06f 0302 	mvn.w	r3, #2
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	e00b      	b.n	8005dfc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005de4:	2300      	movs	r3, #0
 8005de6:	2200      	movs	r2, #0
 8005de8:	2100      	movs	r1, #0
 8005dea:	6938      	ldr	r0, [r7, #16]
 8005dec:	f000 fdb0 	bl	8006950 <xQueueGenericSend>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d002      	beq.n	8005dfc <osMutexRelease+0x70>
        stat = osErrorResource;
 8005df6:	f06f 0302 	mvn.w	r3, #2
 8005dfa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005dfc:	697b      	ldr	r3, [r7, #20]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b08a      	sub	sp, #40	@ 0x28
 8005e0a:	af02      	add	r7, sp, #8
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e16:	f3ef 8305 	mrs	r3, IPSR
 8005e1a:	613b      	str	r3, [r7, #16]
  return(result);
 8005e1c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d175      	bne.n	8005f0e <osSemaphoreNew+0x108>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d072      	beq.n	8005f0e <osSemaphoreNew+0x108>
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d86e      	bhi.n	8005f0e <osSemaphoreNew+0x108>
    mem = -1;
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d015      	beq.n	8005e68 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d006      	beq.n	8005e52 <osSemaphoreNew+0x4c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	2b4f      	cmp	r3, #79	@ 0x4f
 8005e4a:	d902      	bls.n	8005e52 <osSemaphoreNew+0x4c>
        mem = 1;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	e00c      	b.n	8005e6c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d108      	bne.n	8005e6c <osSemaphoreNew+0x66>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <osSemaphoreNew+0x66>
          mem = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	e001      	b.n	8005e6c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d04c      	beq.n	8005f0e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d128      	bne.n	8005ecc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d10a      	bne.n	8005e96 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2203      	movs	r2, #3
 8005e86:	9200      	str	r2, [sp, #0]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f000 fb5d 	bl	800654c <xQueueGenericCreateStatic>
 8005e92:	61f8      	str	r0, [r7, #28]
 8005e94:	e005      	b.n	8005ea2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e96:	2203      	movs	r2, #3
 8005e98:	2100      	movs	r1, #0
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	f000 fbd3 	bl	8006646 <xQueueGenericCreate>
 8005ea0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d022      	beq.n	8005eee <osSemaphoreNew+0xe8>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d01f      	beq.n	8005eee <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005eae:	2300      	movs	r3, #0
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	69f8      	ldr	r0, [r7, #28]
 8005eb6:	f000 fd4b 	bl	8006950 <xQueueGenericSend>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d016      	beq.n	8005eee <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005ec0:	69f8      	ldr	r0, [r7, #28]
 8005ec2:	f001 f9e9 	bl	8007298 <vQueueDelete>
            hSemaphore = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	e010      	b.n	8005eee <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d108      	bne.n	8005ee4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fcca 	bl	8006874 <xQueueCreateCountingSemaphoreStatic>
 8005ee0:	61f8      	str	r0, [r7, #28]
 8005ee2:	e004      	b.n	8005eee <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fcfd 	bl	80068e6 <xQueueCreateCountingSemaphore>
 8005eec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e001      	b.n	8005f06 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005f06:	6979      	ldr	r1, [r7, #20]
 8005f08:	69f8      	ldr	r0, [r7, #28]
 8005f0a:	f001 fb11 	bl	8007530 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005f0e:	69fb      	ldr	r3, [r7, #28]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005f30:	f06f 0303 	mvn.w	r3, #3
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e039      	b.n	8005fac <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f38:	f3ef 8305 	mrs	r3, IPSR
 8005f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d022      	beq.n	8005f8a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005f4a:	f06f 0303 	mvn.w	r3, #3
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e02c      	b.n	8005fac <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005f56:	f107 0308 	add.w	r3, r7, #8
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	6938      	ldr	r0, [r7, #16]
 8005f60:	f001 f918 	bl	8007194 <xQueueReceiveFromISR>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d003      	beq.n	8005f72 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005f6a:	f06f 0302 	mvn.w	r3, #2
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e01c      	b.n	8005fac <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d019      	beq.n	8005fac <osSemaphoreAcquire+0x94>
 8005f78:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb8 <osSemaphoreAcquire+0xa0>)
 8005f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	e010      	b.n	8005fac <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6938      	ldr	r0, [r7, #16]
 8005f8e:	f000 fff1 	bl	8006f74 <xQueueSemaphoreTake>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d009      	beq.n	8005fac <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005f9e:	f06f 0301 	mvn.w	r3, #1
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e002      	b.n	8005fac <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005fa6:	f06f 0302 	mvn.w	r3, #2
 8005faa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005fac:	697b      	ldr	r3, [r7, #20]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005fd2:	f06f 0303 	mvn.w	r3, #3
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e02c      	b.n	8006034 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fda:	f3ef 8305 	mrs	r3, IPSR
 8005fde:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01a      	beq.n	800601c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005fea:	f107 0308 	add.w	r3, r7, #8
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6938      	ldr	r0, [r7, #16]
 8005ff2:	f000 fe4d 	bl	8006c90 <xQueueGiveFromISR>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d003      	beq.n	8006004 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005ffc:	f06f 0302 	mvn.w	r3, #2
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e017      	b.n	8006034 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d014      	beq.n	8006034 <osSemaphoreRelease+0x78>
 800600a:	4b0d      	ldr	r3, [pc, #52]	@ (8006040 <osSemaphoreRelease+0x84>)
 800600c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	e00b      	b.n	8006034 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800601c:	2300      	movs	r3, #0
 800601e:	2200      	movs	r2, #0
 8006020:	2100      	movs	r1, #0
 8006022:	6938      	ldr	r0, [r7, #16]
 8006024:	f000 fc94 	bl	8006950 <xQueueGenericSend>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d002      	beq.n	8006034 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800602e:	f06f 0302 	mvn.w	r3, #2
 8006032:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006034:	697b      	ldr	r3, [r7, #20]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	e000ed04 	.word	0xe000ed04

08006044 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b08a      	sub	sp, #40	@ 0x28
 8006048:	af02      	add	r7, sp, #8
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006050:	2300      	movs	r3, #0
 8006052:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006054:	f3ef 8305 	mrs	r3, IPSR
 8006058:	613b      	str	r3, [r7, #16]
  return(result);
 800605a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800605c:	2b00      	cmp	r3, #0
 800605e:	d15f      	bne.n	8006120 <osMessageQueueNew+0xdc>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d05c      	beq.n	8006120 <osMessageQueueNew+0xdc>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d059      	beq.n	8006120 <osMessageQueueNew+0xdc>
    mem = -1;
 800606c:	f04f 33ff 	mov.w	r3, #4294967295
 8006070:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d029      	beq.n	80060cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d012      	beq.n	80060a6 <osMessageQueueNew+0x62>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b4f      	cmp	r3, #79	@ 0x4f
 8006086:	d90e      	bls.n	80060a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	429a      	cmp	r2, r3
 800609e:	d302      	bcc.n	80060a6 <osMessageQueueNew+0x62>
        mem = 1;
 80060a0:	2301      	movs	r3, #1
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	e014      	b.n	80060d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d110      	bne.n	80060d0 <osMessageQueueNew+0x8c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10c      	bne.n	80060d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d108      	bne.n	80060d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d104      	bne.n	80060d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	e001      	b.n	80060d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10b      	bne.n	80060ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2100      	movs	r1, #0
 80060e0:	9100      	str	r1, [sp, #0]
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 fa31 	bl	800654c <xQueueGenericCreateStatic>
 80060ea:	61f8      	str	r0, [r7, #28]
 80060ec:	e008      	b.n	8006100 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80060f4:	2200      	movs	r2, #0
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 faa4 	bl	8006646 <xQueueGenericCreate>
 80060fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00c      	beq.n	8006120 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <osMessageQueueNew+0xd0>
        name = attr->name;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	e001      	b.n	8006118 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006118:	6979      	ldr	r1, [r7, #20]
 800611a:	69f8      	ldr	r0, [r7, #28]
 800611c:	f001 fa08 	bl	8007530 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006120:	69fb      	ldr	r3, [r7, #28]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	4613      	mov	r3, r2
 800613a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006144:	f3ef 8305 	mrs	r3, IPSR
 8006148:	617b      	str	r3, [r7, #20]
  return(result);
 800614a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800614c:	2b00      	cmp	r3, #0
 800614e:	d028      	beq.n	80061a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <osMessageQueuePut+0x36>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <osMessageQueuePut+0x36>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006162:	f06f 0303 	mvn.w	r3, #3
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	e038      	b.n	80061dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800616e:	f107 0210 	add.w	r2, r7, #16
 8006172:	2300      	movs	r3, #0
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	69b8      	ldr	r0, [r7, #24]
 8006178:	f000 fcec 	bl	8006b54 <xQueueGenericSendFromISR>
 800617c:	4603      	mov	r3, r0
 800617e:	2b01      	cmp	r3, #1
 8006180:	d003      	beq.n	800618a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006182:	f06f 0302 	mvn.w	r3, #2
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e028      	b.n	80061dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d025      	beq.n	80061dc <osMessageQueuePut+0xb0>
 8006190:	4b15      	ldr	r3, [pc, #84]	@ (80061e8 <osMessageQueuePut+0xbc>)
 8006192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	e01c      	b.n	80061dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <osMessageQueuePut+0x82>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80061ae:	f06f 0303 	mvn.w	r3, #3
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	e012      	b.n	80061dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80061b6:	2300      	movs	r3, #0
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	69b8      	ldr	r0, [r7, #24]
 80061be:	f000 fbc7 	bl	8006950 <xQueueGenericSend>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d009      	beq.n	80061dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80061ce:	f06f 0301 	mvn.w	r3, #1
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	e002      	b.n	80061dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80061d6:	f06f 0302 	mvn.w	r3, #2
 80061da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80061dc:	69fb      	ldr	r3, [r7, #28]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006202:	f3ef 8305 	mrs	r3, IPSR
 8006206:	617b      	str	r3, [r7, #20]
  return(result);
 8006208:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800620a:	2b00      	cmp	r3, #0
 800620c:	d028      	beq.n	8006260 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <osMessageQueueGet+0x34>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <osMessageQueueGet+0x34>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006220:	f06f 0303 	mvn.w	r3, #3
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	e037      	b.n	8006298 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006228:	2300      	movs	r3, #0
 800622a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800622c:	f107 0310 	add.w	r3, r7, #16
 8006230:	461a      	mov	r2, r3
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	69b8      	ldr	r0, [r7, #24]
 8006236:	f000 ffad 	bl	8007194 <xQueueReceiveFromISR>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d003      	beq.n	8006248 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006240:	f06f 0302 	mvn.w	r3, #2
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	e027      	b.n	8006298 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d024      	beq.n	8006298 <osMessageQueueGet+0xac>
 800624e:	4b15      	ldr	r3, [pc, #84]	@ (80062a4 <osMessageQueueGet+0xb8>)
 8006250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	e01b      	b.n	8006298 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <osMessageQueueGet+0x80>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d103      	bne.n	8006274 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800626c:	f06f 0303 	mvn.w	r3, #3
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e011      	b.n	8006298 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	69b8      	ldr	r0, [r7, #24]
 800627a:	f000 fd99 	bl	8006db0 <xQueueReceive>
 800627e:	4603      	mov	r3, r0
 8006280:	2b01      	cmp	r3, #1
 8006282:	d009      	beq.n	8006298 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800628a:	f06f 0301 	mvn.w	r3, #1
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	e002      	b.n	8006298 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006292:	f06f 0302 	mvn.w	r3, #2
 8006296:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006298:	69fb      	ldr	r3, [r7, #28]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a07      	ldr	r2, [pc, #28]	@ (80062d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80062b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4a06      	ldr	r2, [pc, #24]	@ (80062d8 <vApplicationGetIdleTaskMemory+0x30>)
 80062be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2280      	movs	r2, #128	@ 0x80
 80062c4:	601a      	str	r2, [r3, #0]
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	2000024c 	.word	0x2000024c
 80062d8:	200002a8 	.word	0x200002a8

080062dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a07      	ldr	r2, [pc, #28]	@ (8006308 <vApplicationGetTimerTaskMemory+0x2c>)
 80062ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4a06      	ldr	r2, [pc, #24]	@ (800630c <vApplicationGetTimerTaskMemory+0x30>)
 80062f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062fa:	601a      	str	r2, [r3, #0]
}
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	200004a8 	.word	0x200004a8
 800630c:	20000504 	.word	0x20000504

08006310 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f103 0208 	add.w	r2, r3, #8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f04f 32ff 	mov.w	r2, #4294967295
 8006328:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f103 0208 	add.w	r2, r3, #8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f103 0208 	add.w	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d103      	bne.n	80063d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	e00c      	b.n	80063ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3308      	adds	r3, #8
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e002      	b.n	80063e0 <vListInsert+0x2e>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d2f6      	bcs.n	80063da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]
}
 8006418:	bf00      	nop
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6892      	ldr	r2, [r2, #8]
 800643a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6852      	ldr	r2, [r2, #4]
 8006444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d103      	bne.n	8006458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	1e5a      	subs	r2, r3, #1
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10b      	bne.n	80064a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064a4:	f002 fd70 	bl	8008f88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b0:	68f9      	ldr	r1, [r7, #12]
 80064b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	441a      	add	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d4:	3b01      	subs	r3, #1
 80064d6:	68f9      	ldr	r1, [r7, #12]
 80064d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	441a      	add	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	22ff      	movs	r2, #255	@ 0xff
 80064e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	22ff      	movs	r2, #255	@ 0xff
 80064f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d114      	bne.n	8006524 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01a      	beq.n	8006538 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3310      	adds	r3, #16
 8006506:	4618      	mov	r0, r3
 8006508:	f001 fd04 	bl	8007f14 <xTaskRemoveFromEventList>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d012      	beq.n	8006538 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006512:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <xQueueGenericReset+0xd0>)
 8006514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	e009      	b.n	8006538 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3310      	adds	r3, #16
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff fef1 	bl	8006310 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3324      	adds	r3, #36	@ 0x24
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff feec 	bl	8006310 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006538:	f002 fd58 	bl	8008fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800653c:	2301      	movs	r3, #1
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08e      	sub	sp, #56	@ 0x38
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	e7fd      	b.n	8006574 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	e7fd      	b.n	8006592 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <xQueueGenericCreateStatic+0x56>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <xQueueGenericCreateStatic+0x5a>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericCreateStatic+0x5c>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10b      	bne.n	80065c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	623b      	str	r3, [r7, #32]
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <xQueueGenericCreateStatic+0x84>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <xQueueGenericCreateStatic+0x88>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <xQueueGenericCreateStatic+0x8a>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10b      	bne.n	80065f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	61fb      	str	r3, [r7, #28]
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	e7fd      	b.n	80065ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065f2:	2350      	movs	r3, #80	@ 0x50
 80065f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b50      	cmp	r3, #80	@ 0x50
 80065fa:	d00b      	beq.n	8006614 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	61bb      	str	r3, [r7, #24]
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	e7fd      	b.n	8006610 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006614:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00d      	beq.n	800663c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006628:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800662c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f840 	bl	80066bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800663e:	4618      	mov	r0, r3
 8006640:	3730      	adds	r7, #48	@ 0x30
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006646:	b580      	push	{r7, lr}
 8006648:	b08a      	sub	sp, #40	@ 0x28
 800664a:	af02      	add	r7, sp, #8
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	4613      	mov	r3, r2
 8006652:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <xQueueGenericCreate+0x2c>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	613b      	str	r3, [r7, #16]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3350      	adds	r3, #80	@ 0x50
 8006680:	4618      	mov	r0, r3
 8006682:	f002 fda3 	bl	80091cc <pvPortMalloc>
 8006686:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d011      	beq.n	80066b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	3350      	adds	r3, #80	@ 0x50
 8006696:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066a0:	79fa      	ldrb	r2, [r7, #7]
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	4613      	mov	r3, r2
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f805 	bl	80066bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066b2:	69bb      	ldr	r3, [r7, #24]
	}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3720      	adds	r7, #32
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d103      	bne.n	80066d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e002      	b.n	80066de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066ea:	2101      	movs	r1, #1
 80066ec:	69b8      	ldr	r0, [r7, #24]
 80066ee:	f7ff fec3 	bl	8006478 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	78fa      	ldrb	r2, [r7, #3]
 80066f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006722:	2300      	movs	r3, #0
 8006724:	2200      	movs	r2, #0
 8006726:	2100      	movs	r1, #0
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f911 	bl	8006950 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006736:	b580      	push	{r7, lr}
 8006738:	b086      	sub	sp, #24
 800673a:	af00      	add	r7, sp, #0
 800673c:	4603      	mov	r3, r0
 800673e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006740:	2301      	movs	r3, #1
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	461a      	mov	r2, r3
 800674c:	6939      	ldr	r1, [r7, #16]
 800674e:	6978      	ldr	r0, [r7, #20]
 8006750:	f7ff ff79 	bl	8006646 <xQueueGenericCreate>
 8006754:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f7ff ffd3 	bl	8006702 <prvInitialiseMutex>

		return xNewQueue;
 800675c:	68fb      	ldr	r3, [r7, #12]
	}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006766:	b580      	push	{r7, lr}
 8006768:	b088      	sub	sp, #32
 800676a:	af02      	add	r7, sp, #8
 800676c:	4603      	mov	r3, r0
 800676e:	6039      	str	r1, [r7, #0]
 8006770:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006772:	2301      	movs	r3, #1
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	2300      	movs	r3, #0
 8006778:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2200      	movs	r2, #0
 8006782:	6939      	ldr	r1, [r7, #16]
 8006784:	6978      	ldr	r0, [r7, #20]
 8006786:	f7ff fee1 	bl	800654c <xQueueGenericCreateStatic>
 800678a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7ff ffb8 	bl	8006702 <prvInitialiseMutex>

		return xNewQueue;
 8006792:	68fb      	ldr	r3, [r7, #12]
	}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10b      	bne.n	80067c6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	60fb      	str	r3, [r7, #12]
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	e7fd      	b.n	80067c2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	689c      	ldr	r4, [r3, #8]
 80067ca:	f001 fd63 	bl	8008294 <xTaskGetCurrentTaskHandle>
 80067ce:	4603      	mov	r3, r0
 80067d0:	429c      	cmp	r4, r3
 80067d2:	d111      	bne.n	80067f8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	1e5a      	subs	r2, r3, #1
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d105      	bne.n	80067f2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80067e6:	2300      	movs	r3, #0
 80067e8:	2200      	movs	r2, #0
 80067ea:	2100      	movs	r1, #0
 80067ec:	6938      	ldr	r0, [r7, #16]
 80067ee:	f000 f8af 	bl	8006950 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80067f2:	2301      	movs	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	e001      	b.n	80067fc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80067fc:	697b      	ldr	r3, [r7, #20]
	}
 80067fe:	4618      	mov	r0, r3
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd90      	pop	{r4, r7, pc}

08006806 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006806:	b590      	push	{r4, r7, lr}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60fb      	str	r3, [r7, #12]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	689c      	ldr	r4, [r3, #8]
 8006836:	f001 fd2d 	bl	8008294 <xTaskGetCurrentTaskHandle>
 800683a:	4603      	mov	r3, r0
 800683c:	429c      	cmp	r4, r3
 800683e:	d107      	bne.n	8006850 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800684a:	2301      	movs	r3, #1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	e00c      	b.n	800686a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6938      	ldr	r0, [r7, #16]
 8006854:	f000 fb8e 	bl	8006f74 <xQueueSemaphoreTake>
 8006858:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800686a:	697b      	ldr	r3, [r7, #20]
	}
 800686c:	4618      	mov	r0, r3
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	bd90      	pop	{r4, r7, pc}

08006874 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	@ 0x28
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	61bb      	str	r3, [r7, #24]
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	e7fd      	b.n	800689a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d90b      	bls.n	80068be <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	617b      	str	r3, [r7, #20]
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	e7fd      	b.n	80068ba <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80068be:	2302      	movs	r3, #2
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	2100      	movs	r1, #0
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff fe3f 	bl	800654c <xQueueGenericCreateStatic>
 80068ce:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068dc:	69fb      	ldr	r3, [r7, #28]
	}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b086      	sub	sp, #24
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	613b      	str	r3, [r7, #16]
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d90b      	bls.n	800692e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800692e:	2202      	movs	r2, #2
 8006930:	2100      	movs	r1, #0
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff fe87 	bl	8006646 <xQueueGenericCreate>
 8006938:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006946:	697b      	ldr	r3, [r7, #20]
	}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08e      	sub	sp, #56	@ 0x38
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800695e:	2300      	movs	r3, #0
 8006960:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10b      	bne.n	8006984 <xQueueGenericSend+0x34>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <xQueueGenericSend+0x42>
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <xQueueGenericSend+0x46>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <xQueueGenericSend+0x48>
 8006996:	2300      	movs	r3, #0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10b      	bne.n	80069b4 <xQueueGenericSend+0x64>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d103      	bne.n	80069c2 <xQueueGenericSend+0x72>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <xQueueGenericSend+0x76>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <xQueueGenericSend+0x78>
 80069c6:	2300      	movs	r3, #0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <xQueueGenericSend+0x94>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	623b      	str	r3, [r7, #32]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069e4:	f001 fc66 	bl	80082b4 <xTaskGetSchedulerState>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <xQueueGenericSend+0xa4>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <xQueueGenericSend+0xa8>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <xQueueGenericSend+0xaa>
 80069f8:	2300      	movs	r3, #0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <xQueueGenericSend+0xc6>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	61fb      	str	r3, [r7, #28]
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	e7fd      	b.n	8006a12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a16:	f002 fab7 	bl	8008f88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d302      	bcc.n	8006a2c <xQueueGenericSend+0xdc>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d129      	bne.n	8006a80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a32:	f000 fc6d 	bl	8007310 <prvCopyDataToQueue>
 8006a36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d010      	beq.n	8006a62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	3324      	adds	r3, #36	@ 0x24
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fa65 	bl	8007f14 <xTaskRemoveFromEventList>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d013      	beq.n	8006a78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a50:	4b3f      	ldr	r3, [pc, #252]	@ (8006b50 <xQueueGenericSend+0x200>)
 8006a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	e00a      	b.n	8006a78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a68:	4b39      	ldr	r3, [pc, #228]	@ (8006b50 <xQueueGenericSend+0x200>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a78:	f002 fab8 	bl	8008fec <vPortExitCritical>
				return pdPASS;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e063      	b.n	8006b48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a86:	f002 fab1 	bl	8008fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e05c      	b.n	8006b48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d106      	bne.n	8006aa2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a94:	f107 0314 	add.w	r3, r7, #20
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 fa9f 	bl	8007fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aa2:	f002 faa3 	bl	8008fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aa6:	f001 f80f 	bl	8007ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aaa:	f002 fa6d 	bl	8008f88 <vPortEnterCritical>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ab4:	b25b      	sxtb	r3, r3
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d103      	bne.n	8006ac4 <xQueueGenericSend+0x174>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aca:	b25b      	sxtb	r3, r3
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d103      	bne.n	8006ada <xQueueGenericSend+0x18a>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ada:	f002 fa87 	bl	8008fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ade:	1d3a      	adds	r2, r7, #4
 8006ae0:	f107 0314 	add.w	r3, r7, #20
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 fa8e 	bl	8008008 <xTaskCheckForTimeOut>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d124      	bne.n	8006b3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006af2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006af4:	f000 fd04 	bl	8007500 <prvIsQueueFull>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d018      	beq.n	8006b30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	3310      	adds	r3, #16
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	4611      	mov	r1, r2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 f9b2 	bl	8007e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b0e:	f000 fc8f 	bl	8007430 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b12:	f000 ffe7 	bl	8007ae4 <xTaskResumeAll>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f47f af7c 	bne.w	8006a16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006b50 <xQueueGenericSend+0x200>)
 8006b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	e772      	b.n	8006a16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b32:	f000 fc7d 	bl	8007430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b36:	f000 ffd5 	bl	8007ae4 <xTaskResumeAll>
 8006b3a:	e76c      	b.n	8006a16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b3e:	f000 fc77 	bl	8007430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b42:	f000 ffcf 	bl	8007ae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3738      	adds	r7, #56	@ 0x38
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	e000ed04 	.word	0xe000ed04

08006b54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b090      	sub	sp, #64	@ 0x40
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10b      	bne.n	8006b84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	e7fd      	b.n	8006b80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <xQueueGenericSendFromISR+0x3e>
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <xQueueGenericSendFromISR+0x42>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueGenericSendFromISR+0x44>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d103      	bne.n	8006bc2 <xQueueGenericSendFromISR+0x6e>
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <xQueueGenericSendFromISR+0x72>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e000      	b.n	8006bc8 <xQueueGenericSendFromISR+0x74>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	623b      	str	r3, [r7, #32]
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	e7fd      	b.n	8006be0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006be4:	f002 fab0 	bl	8009148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006be8:	f3ef 8211 	mrs	r2, BASEPRI
 8006bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	61fa      	str	r2, [r7, #28]
 8006bfe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d302      	bcc.n	8006c16 <xQueueGenericSendFromISR+0xc2>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d12f      	bne.n	8006c76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c2c:	f000 fb70 	bl	8007310 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d112      	bne.n	8006c60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	3324      	adds	r3, #36	@ 0x24
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 f964 	bl	8007f14 <xTaskRemoveFromEventList>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00e      	beq.n	8006c70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e007      	b.n	8006c70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c64:	3301      	adds	r3, #1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	b25a      	sxtb	r2, r3
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006c70:	2301      	movs	r3, #1
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006c74:	e001      	b.n	8006c7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3740      	adds	r7, #64	@ 0x40
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08e      	sub	sp, #56	@ 0x38
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10b      	bne.n	8006cbc <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	623b      	str	r3, [r7, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	bf00      	nop
 8006cba:	e7fd      	b.n	8006cb8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	61fb      	str	r3, [r7, #28]
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	e7fd      	b.n	8006cd8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <xQueueGiveFromISR+0x5c>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <xQueueGiveFromISR+0x60>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <xQueueGiveFromISR+0x62>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	61bb      	str	r3, [r7, #24]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d0e:	f002 fa1b 	bl	8009148 <vPortValidateInterruptPriority>
	__asm volatile
 8006d12:	f3ef 8211 	mrs	r2, BASEPRI
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	617a      	str	r2, [r7, #20]
 8006d28:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006d2a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d22b      	bcs.n	8006d96 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d58:	d112      	bne.n	8006d80 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	3324      	adds	r3, #36	@ 0x24
 8006d66:	4618      	mov	r0, r3
 8006d68:	f001 f8d4 	bl	8007f14 <xTaskRemoveFromEventList>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00e      	beq.n	8006d90 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00b      	beq.n	8006d90 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e007      	b.n	8006d90 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d84:	3301      	adds	r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	b25a      	sxtb	r2, r3
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d90:	2301      	movs	r3, #1
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d94:	e001      	b.n	8006d9a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f383 8811 	msr	BASEPRI, r3
}
 8006da4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3738      	adds	r7, #56	@ 0x38
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	@ 0x30
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <xQueueReceive+0x32>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	623b      	str	r3, [r7, #32]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d103      	bne.n	8006df0 <xQueueReceive+0x40>
 8006de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <xQueueReceive+0x44>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <xQueueReceive+0x46>
 8006df4:	2300      	movs	r3, #0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10b      	bne.n	8006e12 <xQueueReceive+0x62>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	61fb      	str	r3, [r7, #28]
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	e7fd      	b.n	8006e0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e12:	f001 fa4f 	bl	80082b4 <xTaskGetSchedulerState>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <xQueueReceive+0x72>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <xQueueReceive+0x76>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <xQueueReceive+0x78>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <xQueueReceive+0x94>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	61bb      	str	r3, [r7, #24]
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e44:	f002 f8a0 	bl	8008f88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d01f      	beq.n	8006e94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e58:	f000 fac4 	bl	80073e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00f      	beq.n	8006e8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	3310      	adds	r3, #16
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 f84f 	bl	8007f14 <xTaskRemoveFromEventList>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d007      	beq.n	8006e8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f70 <xQueueReceive+0x1c0>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e8c:	f002 f8ae 	bl	8008fec <vPortExitCritical>
				return pdPASS;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e069      	b.n	8006f68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e9a:	f002 f8a7 	bl	8008fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e062      	b.n	8006f68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ea8:	f107 0310 	add.w	r3, r7, #16
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 f895 	bl	8007fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eb6:	f002 f899 	bl	8008fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eba:	f000 fe05 	bl	8007ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ebe:	f002 f863 	bl	8008f88 <vPortEnterCritical>
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ec8:	b25b      	sxtb	r3, r3
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d103      	bne.n	8006ed8 <xQueueReceive+0x128>
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ede:	b25b      	sxtb	r3, r3
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d103      	bne.n	8006eee <xQueueReceive+0x13e>
 8006ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006eee:	f002 f87d 	bl	8008fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ef2:	1d3a      	adds	r2, r7, #4
 8006ef4:	f107 0310 	add.w	r3, r7, #16
 8006ef8:	4611      	mov	r1, r2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 f884 	bl	8008008 <xTaskCheckForTimeOut>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d123      	bne.n	8006f4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f08:	f000 fae4 	bl	80074d4 <prvIsQueueEmpty>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d017      	beq.n	8006f42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f14:	3324      	adds	r3, #36	@ 0x24
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 ffa8 	bl	8007e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f22:	f000 fa85 	bl	8007430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f26:	f000 fddd 	bl	8007ae4 <xTaskResumeAll>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d189      	bne.n	8006e44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006f30:	4b0f      	ldr	r3, [pc, #60]	@ (8006f70 <xQueueReceive+0x1c0>)
 8006f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	e780      	b.n	8006e44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f44:	f000 fa74 	bl	8007430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f48:	f000 fdcc 	bl	8007ae4 <xTaskResumeAll>
 8006f4c:	e77a      	b.n	8006e44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f50:	f000 fa6e 	bl	8007430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f54:	f000 fdc6 	bl	8007ae4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f5a:	f000 fabb 	bl	80074d4 <prvIsQueueEmpty>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f43f af6f 	beq.w	8006e44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3730      	adds	r7, #48	@ 0x30
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08e      	sub	sp, #56	@ 0x38
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f86:	2300      	movs	r3, #0
 8006f88:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	623b      	str	r3, [r7, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	61fb      	str	r3, [r7, #28]
}
 8006fc2:	bf00      	nop
 8006fc4:	bf00      	nop
 8006fc6:	e7fd      	b.n	8006fc4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fc8:	f001 f974 	bl	80082b4 <xTaskGetSchedulerState>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <xQueueSemaphoreTake+0x64>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <xQueueSemaphoreTake+0x68>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e000      	b.n	8006fde <xQueueSemaphoreTake+0x6a>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	61bb      	str	r3, [r7, #24]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ffa:	f001 ffc5 	bl	8008f88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007002:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007006:	2b00      	cmp	r3, #0
 8007008:	d024      	beq.n	8007054 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800700a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700c:	1e5a      	subs	r2, r3, #1
 800700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007010:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800701a:	f001 fac5 	bl	80085a8 <pvTaskIncrementMutexHeldCount>
 800701e:	4602      	mov	r2, r0
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007022:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00f      	beq.n	800704c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800702c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702e:	3310      	adds	r3, #16
 8007030:	4618      	mov	r0, r3
 8007032:	f000 ff6f 	bl	8007f14 <xTaskRemoveFromEventList>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800703c:	4b54      	ldr	r3, [pc, #336]	@ (8007190 <xQueueSemaphoreTake+0x21c>)
 800703e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800704c:	f001 ffce 	bl	8008fec <vPortExitCritical>
				return pdPASS;
 8007050:	2301      	movs	r3, #1
 8007052:	e098      	b.n	8007186 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d112      	bne.n	8007080 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	617b      	str	r3, [r7, #20]
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007078:	f001 ffb8 	bl	8008fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800707c:	2300      	movs	r3, #0
 800707e:	e082      	b.n	8007186 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007086:	f107 030c 	add.w	r3, r7, #12
 800708a:	4618      	mov	r0, r3
 800708c:	f000 ffa6 	bl	8007fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007094:	f001 ffaa 	bl	8008fec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007098:	f000 fd16 	bl	8007ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800709c:	f001 ff74 	bl	8008f88 <vPortEnterCritical>
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070a6:	b25b      	sxtb	r3, r3
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ac:	d103      	bne.n	80070b6 <xQueueSemaphoreTake+0x142>
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c2:	d103      	bne.n	80070cc <xQueueSemaphoreTake+0x158>
 80070c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070cc:	f001 ff8e 	bl	8008fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070d0:	463a      	mov	r2, r7
 80070d2:	f107 030c 	add.w	r3, r7, #12
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 ff95 	bl	8008008 <xTaskCheckForTimeOut>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d132      	bne.n	800714a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070e6:	f000 f9f5 	bl	80074d4 <prvIsQueueEmpty>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d026      	beq.n	800713e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80070f8:	f001 ff46 	bl	8008f88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	4618      	mov	r0, r3
 8007102:	f001 f8f5 	bl	80082f0 <xTaskPriorityInherit>
 8007106:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007108:	f001 ff70 	bl	8008fec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	3324      	adds	r3, #36	@ 0x24
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	4611      	mov	r1, r2
 8007114:	4618      	mov	r0, r3
 8007116:	f000 feab 	bl	8007e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800711a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800711c:	f000 f988 	bl	8007430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007120:	f000 fce0 	bl	8007ae4 <xTaskResumeAll>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	f47f af67 	bne.w	8006ffa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800712c:	4b18      	ldr	r3, [pc, #96]	@ (8007190 <xQueueSemaphoreTake+0x21c>)
 800712e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	e75d      	b.n	8006ffa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800713e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007140:	f000 f976 	bl	8007430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007144:	f000 fcce 	bl	8007ae4 <xTaskResumeAll>
 8007148:	e757      	b.n	8006ffa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800714a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800714c:	f000 f970 	bl	8007430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007150:	f000 fcc8 	bl	8007ae4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007154:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007156:	f000 f9bd 	bl	80074d4 <prvIsQueueEmpty>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	f43f af4c 	beq.w	8006ffa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00d      	beq.n	8007184 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007168:	f001 ff0e 	bl	8008f88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800716c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800716e:	f000 f8b7 	bl	80072e0 <prvGetDisinheritPriorityAfterTimeout>
 8007172:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800717a:	4618      	mov	r0, r3
 800717c:	f001 f990 	bl	80084a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007180:	f001 ff34 	bl	8008fec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007184:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007186:	4618      	mov	r0, r3
 8007188:	3738      	adds	r7, #56	@ 0x38
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	e000ed04 	.word	0xe000ed04

08007194 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08e      	sub	sp, #56	@ 0x38
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10b      	bne.n	80071c2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	623b      	str	r3, [r7, #32]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <xQueueReceiveFromISR+0x3c>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <xQueueReceiveFromISR+0x40>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <xQueueReceiveFromISR+0x42>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10b      	bne.n	80071f2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	61fb      	str	r3, [r7, #28]
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	e7fd      	b.n	80071ee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071f2:	f001 ffa9 	bl	8009148 <vPortValidateInterruptPriority>
	__asm volatile
 80071f6:	f3ef 8211 	mrs	r2, BASEPRI
 80071fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	61ba      	str	r2, [r7, #24]
 800720c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800720e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007210:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721a:	2b00      	cmp	r3, #0
 800721c:	d02f      	beq.n	800727e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800722c:	f000 f8da 	bl	80073e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007232:	1e5a      	subs	r2, r3, #1
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007238:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007240:	d112      	bne.n	8007268 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	3310      	adds	r3, #16
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fe60 	bl	8007f14 <xTaskRemoveFromEventList>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00e      	beq.n	8007278 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e007      	b.n	8007278 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800726c:	3301      	adds	r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	b25a      	sxtb	r2, r3
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007278:	2301      	movs	r3, #1
 800727a:	637b      	str	r3, [r7, #52]	@ 0x34
 800727c:	e001      	b.n	8007282 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800727e:	2300      	movs	r3, #0
 8007280:	637b      	str	r3, [r7, #52]	@ 0x34
 8007282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007284:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f383 8811 	msr	BASEPRI, r3
}
 800728c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800728e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007290:	4618      	mov	r0, r3
 8007292:	3738      	adds	r7, #56	@ 0x38
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <vQueueDelete+0x2a>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	60bb      	str	r3, [r7, #8]
}
 80072bc:	bf00      	nop
 80072be:	bf00      	nop
 80072c0:	e7fd      	b.n	80072be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f95e 	bl	8007584 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f002 f848 	bl	8009368 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80072d8:	bf00      	nop
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d006      	beq.n	80072fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e001      	b.n	8007302 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007302:	68fb      	ldr	r3, [r7, #12]
	}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10d      	bne.n	800734a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d14d      	bne.n	80073d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	4618      	mov	r0, r3
 800733c:	f001 f840 	bl	80083c0 <xTaskPriorityDisinherit>
 8007340:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	609a      	str	r2, [r3, #8]
 8007348:	e043      	b.n	80073d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d119      	bne.n	8007384 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6858      	ldr	r0, [r3, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007358:	461a      	mov	r2, r3
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	f002 fbcd 	bl	8009afa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007368:	441a      	add	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	429a      	cmp	r2, r3
 8007378:	d32b      	bcc.n	80073d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	605a      	str	r2, [r3, #4]
 8007382:	e026      	b.n	80073d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	68d8      	ldr	r0, [r3, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738c:	461a      	mov	r2, r3
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	f002 fbb3 	bl	8009afa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739c:	425b      	negs	r3, r3
 800739e:	441a      	add	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d207      	bcs.n	80073c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b8:	425b      	negs	r3, r3
 80073ba:	441a      	add	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d105      	bne.n	80073d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80073da:	697b      	ldr	r3, [r7, #20]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d018      	beq.n	8007428 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	441a      	add	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	429a      	cmp	r2, r3
 800740e:	d303      	bcc.n	8007418 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68d9      	ldr	r1, [r3, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007420:	461a      	mov	r2, r3
 8007422:	6838      	ldr	r0, [r7, #0]
 8007424:	f002 fb69 	bl	8009afa <memcpy>
	}
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007438:	f001 fda6 	bl	8008f88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007442:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007444:	e011      	b.n	800746a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744a:	2b00      	cmp	r3, #0
 800744c:	d012      	beq.n	8007474 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3324      	adds	r3, #36	@ 0x24
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fd5e 	bl	8007f14 <xTaskRemoveFromEventList>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800745e:	f000 fe37 	bl	80080d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	3b01      	subs	r3, #1
 8007466:	b2db      	uxtb	r3, r3
 8007468:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800746a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800746e:	2b00      	cmp	r3, #0
 8007470:	dce9      	bgt.n	8007446 <prvUnlockQueue+0x16>
 8007472:	e000      	b.n	8007476 <prvUnlockQueue+0x46>
					break;
 8007474:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	22ff      	movs	r2, #255	@ 0xff
 800747a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800747e:	f001 fdb5 	bl	8008fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007482:	f001 fd81 	bl	8008f88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800748c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800748e:	e011      	b.n	80074b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d012      	beq.n	80074be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3310      	adds	r3, #16
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fd39 	bl	8007f14 <xTaskRemoveFromEventList>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074a8:	f000 fe12 	bl	80080d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dce9      	bgt.n	8007490 <prvUnlockQueue+0x60>
 80074bc:	e000      	b.n	80074c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	22ff      	movs	r2, #255	@ 0xff
 80074c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80074c8:	f001 fd90 	bl	8008fec <vPortExitCritical>
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074dc:	f001 fd54 	bl	8008f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074e8:	2301      	movs	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	e001      	b.n	80074f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074f2:	f001 fd7b 	bl	8008fec <vPortExitCritical>

	return xReturn;
 80074f6:	68fb      	ldr	r3, [r7, #12]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007508:	f001 fd3e 	bl	8008f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007514:	429a      	cmp	r2, r3
 8007516:	d102      	bne.n	800751e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007518:	2301      	movs	r3, #1
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	e001      	b.n	8007522 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007522:	f001 fd63 	bl	8008fec <vPortExitCritical>

	return xReturn;
 8007526:	68fb      	ldr	r3, [r7, #12]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	e014      	b.n	800756a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007540:	4a0f      	ldr	r2, [pc, #60]	@ (8007580 <vQueueAddToRegistry+0x50>)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10b      	bne.n	8007564 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800754c:	490c      	ldr	r1, [pc, #48]	@ (8007580 <vQueueAddToRegistry+0x50>)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007556:	4a0a      	ldr	r2, [pc, #40]	@ (8007580 <vQueueAddToRegistry+0x50>)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007562:	e006      	b.n	8007572 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b07      	cmp	r3, #7
 800756e:	d9e7      	bls.n	8007540 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	20000904 	.word	0x20000904

08007584 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e016      	b.n	80075c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007592:	4a10      	ldr	r2, [pc, #64]	@ (80075d4 <vQueueUnregisterQueue+0x50>)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d10b      	bne.n	80075ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80075a2:	4a0c      	ldr	r2, [pc, #48]	@ (80075d4 <vQueueUnregisterQueue+0x50>)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2100      	movs	r1, #0
 80075a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80075ac:	4a09      	ldr	r2, [pc, #36]	@ (80075d4 <vQueueUnregisterQueue+0x50>)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	4413      	add	r3, r2
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]
				break;
 80075b8:	e006      	b.n	80075c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b07      	cmp	r3, #7
 80075c4:	d9e5      	bls.n	8007592 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	20000904 	.word	0x20000904

080075d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075e8:	f001 fcce 	bl	8008f88 <vPortEnterCritical>
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075f2:	b25b      	sxtb	r3, r3
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f8:	d103      	bne.n	8007602 <vQueueWaitForMessageRestricted+0x2a>
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007608:	b25b      	sxtb	r3, r3
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d103      	bne.n	8007618 <vQueueWaitForMessageRestricted+0x40>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007618:	f001 fce8 	bl	8008fec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	3324      	adds	r3, #36	@ 0x24
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fc45 	bl	8007ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007632:	6978      	ldr	r0, [r7, #20]
 8007634:	f7ff fefc 	bl	8007430 <prvUnlockQueue>
	}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08e      	sub	sp, #56	@ 0x38
 8007644:	af04      	add	r7, sp, #16
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800764e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10b      	bne.n	800766c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	623b      	str	r3, [r7, #32]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800766c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	61fb      	str	r3, [r7, #28]
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800768a:	235c      	movs	r3, #92	@ 0x5c
 800768c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2b5c      	cmp	r3, #92	@ 0x5c
 8007692:	d00b      	beq.n	80076ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	61bb      	str	r3, [r7, #24]
}
 80076a6:	bf00      	nop
 80076a8:	bf00      	nop
 80076aa:	e7fd      	b.n	80076a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01e      	beq.n	80076f2 <xTaskCreateStatic+0xb2>
 80076b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01b      	beq.n	80076f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076cc:	2300      	movs	r3, #0
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	9302      	str	r3, [sp, #8]
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f850 	bl	800778a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076ec:	f000 f8de 	bl	80078ac <prvAddNewTaskToReadyList>
 80076f0:	e001      	b.n	80076f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076f6:	697b      	ldr	r3, [r7, #20]
	}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3728      	adds	r7, #40	@ 0x28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08c      	sub	sp, #48	@ 0x30
 8007704:	af04      	add	r7, sp, #16
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4613      	mov	r3, r2
 800770e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007710:	88fb      	ldrh	r3, [r7, #6]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4618      	mov	r0, r3
 8007716:	f001 fd59 	bl	80091cc <pvPortMalloc>
 800771a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00e      	beq.n	8007740 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007722:	205c      	movs	r0, #92	@ 0x5c
 8007724:	f001 fd52 	bl	80091cc <pvPortMalloc>
 8007728:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	631a      	str	r2, [r3, #48]	@ 0x30
 8007736:	e005      	b.n	8007744 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007738:	6978      	ldr	r0, [r7, #20]
 800773a:	f001 fe15 	bl	8009368 <vPortFree>
 800773e:	e001      	b.n	8007744 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d017      	beq.n	800777a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007752:	88fa      	ldrh	r2, [r7, #6]
 8007754:	2300      	movs	r3, #0
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	9302      	str	r3, [sp, #8]
 800775c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f80e 	bl	800778a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800776e:	69f8      	ldr	r0, [r7, #28]
 8007770:	f000 f89c 	bl	80078ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007774:	2301      	movs	r3, #1
 8007776:	61bb      	str	r3, [r7, #24]
 8007778:	e002      	b.n	8007780 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800777a:	f04f 33ff 	mov.w	r3, #4294967295
 800777e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007780:	69bb      	ldr	r3, [r7, #24]
	}
 8007782:	4618      	mov	r0, r3
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b088      	sub	sp, #32
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	461a      	mov	r2, r3
 80077a2:	21a5      	movs	r1, #165	@ 0xa5
 80077a4:	f002 f92e 	bl	8009a04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077b2:	3b01      	subs	r3, #1
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	f023 0307 	bic.w	r3, r3, #7
 80077c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	617b      	str	r3, [r7, #20]
}
 80077de:	bf00      	nop
 80077e0:	bf00      	nop
 80077e2:	e7fd      	b.n	80077e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01f      	beq.n	800782a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ea:	2300      	movs	r3, #0
 80077ec:	61fb      	str	r3, [r7, #28]
 80077ee:	e012      	b.n	8007816 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	7819      	ldrb	r1, [r3, #0]
 80077f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	3334      	adds	r3, #52	@ 0x34
 8007800:	460a      	mov	r2, r1
 8007802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	3301      	adds	r3, #1
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b0f      	cmp	r3, #15
 800781a:	d9e9      	bls.n	80077f0 <prvInitialiseNewTask+0x66>
 800781c:	e000      	b.n	8007820 <prvInitialiseNewTask+0x96>
			{
				break;
 800781e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007828:	e003      	b.n	8007832 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007834:	2b37      	cmp	r3, #55	@ 0x37
 8007836:	d901      	bls.n	800783c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007838:	2337      	movs	r3, #55	@ 0x37
 800783a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007840:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007846:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	2200      	movs	r2, #0
 800784c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800784e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007850:	3304      	adds	r3, #4
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fd7c 	bl	8006350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	3318      	adds	r3, #24
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe fd77 	bl	8006350 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007876:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	2200      	movs	r2, #0
 800787c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800787e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	68f9      	ldr	r1, [r7, #12]
 800788a:	69b8      	ldr	r0, [r7, #24]
 800788c:	f001 fa4e 	bl	8008d2c <pxPortInitialiseStack>
 8007890:	4602      	mov	r2, r0
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078a2:	bf00      	nop
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078b4:	f001 fb68 	bl	8008f88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007970 <prvAddNewTaskToReadyList+0xc4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3301      	adds	r3, #1
 80078be:	4a2c      	ldr	r2, [pc, #176]	@ (8007970 <prvAddNewTaskToReadyList+0xc4>)
 80078c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078d0:	4b27      	ldr	r3, [pc, #156]	@ (8007970 <prvAddNewTaskToReadyList+0xc4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d110      	bne.n	80078fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078d8:	f000 fc1e 	bl	8008118 <prvInitialiseTaskLists>
 80078dc:	e00d      	b.n	80078fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078de:	4b26      	ldr	r3, [pc, #152]	@ (8007978 <prvAddNewTaskToReadyList+0xcc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078e6:	4b23      	ldr	r3, [pc, #140]	@ (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d802      	bhi.n	80078fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078fa:	4b20      	ldr	r3, [pc, #128]	@ (800797c <prvAddNewTaskToReadyList+0xd0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3301      	adds	r3, #1
 8007900:	4a1e      	ldr	r2, [pc, #120]	@ (800797c <prvAddNewTaskToReadyList+0xd0>)
 8007902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007904:	4b1d      	ldr	r3, [pc, #116]	@ (800797c <prvAddNewTaskToReadyList+0xd0>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007910:	4b1b      	ldr	r3, [pc, #108]	@ (8007980 <prvAddNewTaskToReadyList+0xd4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d903      	bls.n	8007920 <prvAddNewTaskToReadyList+0x74>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791c:	4a18      	ldr	r2, [pc, #96]	@ (8007980 <prvAddNewTaskToReadyList+0xd4>)
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4a15      	ldr	r2, [pc, #84]	@ (8007984 <prvAddNewTaskToReadyList+0xd8>)
 800792e:	441a      	add	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f7fe fd17 	bl	800636a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800793c:	f001 fb56 	bl	8008fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007940:	4b0d      	ldr	r3, [pc, #52]	@ (8007978 <prvAddNewTaskToReadyList+0xcc>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00e      	beq.n	8007966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007948:	4b0a      	ldr	r3, [pc, #40]	@ (8007974 <prvAddNewTaskToReadyList+0xc8>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	429a      	cmp	r2, r3
 8007954:	d207      	bcs.n	8007966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007956:	4b0c      	ldr	r3, [pc, #48]	@ (8007988 <prvAddNewTaskToReadyList+0xdc>)
 8007958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000e18 	.word	0x20000e18
 8007974:	20000944 	.word	0x20000944
 8007978:	20000e24 	.word	0x20000e24
 800797c:	20000e34 	.word	0x20000e34
 8007980:	20000e20 	.word	0x20000e20
 8007984:	20000948 	.word	0x20000948
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d018      	beq.n	80079d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800799e:	4b14      	ldr	r3, [pc, #80]	@ (80079f0 <vTaskDelay+0x64>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00b      	beq.n	80079be <vTaskDelay+0x32>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60bb      	str	r3, [r7, #8]
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	e7fd      	b.n	80079ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079be:	f000 f883 	bl	8007ac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079c2:	2100      	movs	r1, #0
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fe03 	bl	80085d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079ca:	f000 f88b 	bl	8007ae4 <xTaskResumeAll>
 80079ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d107      	bne.n	80079e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80079d6:	4b07      	ldr	r3, [pc, #28]	@ (80079f4 <vTaskDelay+0x68>)
 80079d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079e6:	bf00      	nop
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20000e40 	.word	0x20000e40
 80079f4:	e000ed04 	.word	0xe000ed04

080079f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	@ 0x28
 80079fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a06:	463a      	mov	r2, r7
 8007a08:	1d39      	adds	r1, r7, #4
 8007a0a:	f107 0308 	add.w	r3, r7, #8
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fc4a 	bl	80062a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	9202      	str	r2, [sp, #8]
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	2300      	movs	r3, #0
 8007a24:	460a      	mov	r2, r1
 8007a26:	4922      	ldr	r1, [pc, #136]	@ (8007ab0 <vTaskStartScheduler+0xb8>)
 8007a28:	4822      	ldr	r0, [pc, #136]	@ (8007ab4 <vTaskStartScheduler+0xbc>)
 8007a2a:	f7ff fe09 	bl	8007640 <xTaskCreateStatic>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4a21      	ldr	r2, [pc, #132]	@ (8007ab8 <vTaskStartScheduler+0xc0>)
 8007a32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a34:	4b20      	ldr	r3, [pc, #128]	@ (8007ab8 <vTaskStartScheduler+0xc0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e001      	b.n	8007a46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d102      	bne.n	8007a52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a4c:	f000 fe14 	bl	8008678 <xTimerCreateTimerTask>
 8007a50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d116      	bne.n	8007a86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	613b      	str	r3, [r7, #16]
}
 8007a6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a6c:	4b13      	ldr	r3, [pc, #76]	@ (8007abc <vTaskStartScheduler+0xc4>)
 8007a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a74:	4b12      	ldr	r3, [pc, #72]	@ (8007ac0 <vTaskStartScheduler+0xc8>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a7a:	4b12      	ldr	r3, [pc, #72]	@ (8007ac4 <vTaskStartScheduler+0xcc>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a80:	f001 f9de 	bl	8008e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a84:	e00f      	b.n	8007aa6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8c:	d10b      	bne.n	8007aa6 <vTaskStartScheduler+0xae>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	60fb      	str	r3, [r7, #12]
}
 8007aa0:	bf00      	nop
 8007aa2:	bf00      	nop
 8007aa4:	e7fd      	b.n	8007aa2 <vTaskStartScheduler+0xaa>
}
 8007aa6:	bf00      	nop
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	0800a678 	.word	0x0800a678
 8007ab4:	080080e9 	.word	0x080080e9
 8007ab8:	20000e3c 	.word	0x20000e3c
 8007abc:	20000e38 	.word	0x20000e38
 8007ac0:	20000e24 	.word	0x20000e24
 8007ac4:	20000e1c 	.word	0x20000e1c

08007ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007acc:	4b04      	ldr	r3, [pc, #16]	@ (8007ae0 <vTaskSuspendAll+0x18>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	4a03      	ldr	r2, [pc, #12]	@ (8007ae0 <vTaskSuspendAll+0x18>)
 8007ad4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ad6:	bf00      	nop
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20000e40 	.word	0x20000e40

08007ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007af2:	4b42      	ldr	r3, [pc, #264]	@ (8007bfc <xTaskResumeAll+0x118>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <xTaskResumeAll+0x2e>
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	603b      	str	r3, [r7, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	e7fd      	b.n	8007b0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b12:	f001 fa39 	bl	8008f88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b16:	4b39      	ldr	r3, [pc, #228]	@ (8007bfc <xTaskResumeAll+0x118>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	4a37      	ldr	r2, [pc, #220]	@ (8007bfc <xTaskResumeAll+0x118>)
 8007b1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b20:	4b36      	ldr	r3, [pc, #216]	@ (8007bfc <xTaskResumeAll+0x118>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d162      	bne.n	8007bee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b28:	4b35      	ldr	r3, [pc, #212]	@ (8007c00 <xTaskResumeAll+0x11c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d05e      	beq.n	8007bee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b30:	e02f      	b.n	8007b92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b32:	4b34      	ldr	r3, [pc, #208]	@ (8007c04 <xTaskResumeAll+0x120>)
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3318      	adds	r3, #24
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fc70 	bl	8006424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fc6b 	bl	8006424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b52:	4b2d      	ldr	r3, [pc, #180]	@ (8007c08 <xTaskResumeAll+0x124>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d903      	bls.n	8007b62 <xTaskResumeAll+0x7e>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007c08 <xTaskResumeAll+0x124>)
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4a27      	ldr	r2, [pc, #156]	@ (8007c0c <xTaskResumeAll+0x128>)
 8007b70:	441a      	add	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f7fe fbf6 	bl	800636a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b82:	4b23      	ldr	r3, [pc, #140]	@ (8007c10 <xTaskResumeAll+0x12c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d302      	bcc.n	8007b92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007b8c:	4b21      	ldr	r3, [pc, #132]	@ (8007c14 <xTaskResumeAll+0x130>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b92:	4b1c      	ldr	r3, [pc, #112]	@ (8007c04 <xTaskResumeAll+0x120>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1cb      	bne.n	8007b32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ba0:	f000 fb58 	bl	8008254 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c18 <xTaskResumeAll+0x134>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d010      	beq.n	8007bd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bb0:	f000 f846 	bl	8007c40 <xTaskIncrementTick>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007bba:	4b16      	ldr	r3, [pc, #88]	@ (8007c14 <xTaskResumeAll+0x130>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1f1      	bne.n	8007bb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007bcc:	4b12      	ldr	r3, [pc, #72]	@ (8007c18 <xTaskResumeAll+0x134>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bd2:	4b10      	ldr	r3, [pc, #64]	@ (8007c14 <xTaskResumeAll+0x130>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bde:	4b0f      	ldr	r3, [pc, #60]	@ (8007c1c <xTaskResumeAll+0x138>)
 8007be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bee:	f001 f9fd 	bl	8008fec <vPortExitCritical>

	return xAlreadyYielded;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20000e40 	.word	0x20000e40
 8007c00:	20000e18 	.word	0x20000e18
 8007c04:	20000dd8 	.word	0x20000dd8
 8007c08:	20000e20 	.word	0x20000e20
 8007c0c:	20000948 	.word	0x20000948
 8007c10:	20000944 	.word	0x20000944
 8007c14:	20000e2c 	.word	0x20000e2c
 8007c18:	20000e28 	.word	0x20000e28
 8007c1c:	e000ed04 	.word	0xe000ed04

08007c20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c26:	4b05      	ldr	r3, [pc, #20]	@ (8007c3c <xTaskGetTickCount+0x1c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c2c:	687b      	ldr	r3, [r7, #4]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	20000e1c 	.word	0x20000e1c

08007c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007d88 <xTaskIncrementTick+0x148>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f040 8090 	bne.w	8007d74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c54:	4b4d      	ldr	r3, [pc, #308]	@ (8007d8c <xTaskIncrementTick+0x14c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8007d8c <xTaskIncrementTick+0x14c>)
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d121      	bne.n	8007cac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c68:	4b49      	ldr	r3, [pc, #292]	@ (8007d90 <xTaskIncrementTick+0x150>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	603b      	str	r3, [r7, #0]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <xTaskIncrementTick+0x46>
 8007c8a:	4b41      	ldr	r3, [pc, #260]	@ (8007d90 <xTaskIncrementTick+0x150>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	4b40      	ldr	r3, [pc, #256]	@ (8007d94 <xTaskIncrementTick+0x154>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a3e      	ldr	r2, [pc, #248]	@ (8007d90 <xTaskIncrementTick+0x150>)
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	4a3e      	ldr	r2, [pc, #248]	@ (8007d94 <xTaskIncrementTick+0x154>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d98 <xTaskIncrementTick+0x158>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8007d98 <xTaskIncrementTick+0x158>)
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	f000 fad4 	bl	8008254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cac:	4b3b      	ldr	r3, [pc, #236]	@ (8007d9c <xTaskIncrementTick+0x15c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d349      	bcc.n	8007d4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cb6:	4b36      	ldr	r3, [pc, #216]	@ (8007d90 <xTaskIncrementTick+0x150>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d104      	bne.n	8007cca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc0:	4b36      	ldr	r3, [pc, #216]	@ (8007d9c <xTaskIncrementTick+0x15c>)
 8007cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc6:	601a      	str	r2, [r3, #0]
					break;
 8007cc8:	e03f      	b.n	8007d4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cca:	4b31      	ldr	r3, [pc, #196]	@ (8007d90 <xTaskIncrementTick+0x150>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d203      	bcs.n	8007cea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8007d9c <xTaskIncrementTick+0x15c>)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ce8:	e02f      	b.n	8007d4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fb98 	bl	8006424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	3318      	adds	r3, #24
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe fb8f 	bl	8006424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0a:	4b25      	ldr	r3, [pc, #148]	@ (8007da0 <xTaskIncrementTick+0x160>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d903      	bls.n	8007d1a <xTaskIncrementTick+0xda>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d16:	4a22      	ldr	r2, [pc, #136]	@ (8007da0 <xTaskIncrementTick+0x160>)
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4a1f      	ldr	r2, [pc, #124]	@ (8007da4 <xTaskIncrementTick+0x164>)
 8007d28:	441a      	add	r2, r3
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4610      	mov	r0, r2
 8007d32:	f7fe fb1a 	bl	800636a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <xTaskIncrementTick+0x168>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d3b8      	bcc.n	8007cb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d48:	e7b5      	b.n	8007cb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d4a:	4b17      	ldr	r3, [pc, #92]	@ (8007da8 <xTaskIncrementTick+0x168>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d50:	4914      	ldr	r1, [pc, #80]	@ (8007da4 <xTaskIncrementTick+0x164>)
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	440b      	add	r3, r1
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d901      	bls.n	8007d66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007d62:	2301      	movs	r3, #1
 8007d64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d66:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <xTaskIncrementTick+0x16c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d007      	beq.n	8007d7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	e004      	b.n	8007d7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d74:	4b0e      	ldr	r3, [pc, #56]	@ (8007db0 <xTaskIncrementTick+0x170>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8007db0 <xTaskIncrementTick+0x170>)
 8007d7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d7e:	697b      	ldr	r3, [r7, #20]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20000e40 	.word	0x20000e40
 8007d8c:	20000e1c 	.word	0x20000e1c
 8007d90:	20000dd0 	.word	0x20000dd0
 8007d94:	20000dd4 	.word	0x20000dd4
 8007d98:	20000e30 	.word	0x20000e30
 8007d9c:	20000e38 	.word	0x20000e38
 8007da0:	20000e20 	.word	0x20000e20
 8007da4:	20000948 	.word	0x20000948
 8007da8:	20000944 	.word	0x20000944
 8007dac:	20000e2c 	.word	0x20000e2c
 8007db0:	20000e28 	.word	0x20000e28

08007db4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dba:	4b28      	ldr	r3, [pc, #160]	@ (8007e5c <vTaskSwitchContext+0xa8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dc2:	4b27      	ldr	r3, [pc, #156]	@ (8007e60 <vTaskSwitchContext+0xac>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dc8:	e042      	b.n	8007e50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007dca:	4b25      	ldr	r3, [pc, #148]	@ (8007e60 <vTaskSwitchContext+0xac>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd0:	4b24      	ldr	r3, [pc, #144]	@ (8007e64 <vTaskSwitchContext+0xb0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	e011      	b.n	8007dfc <vTaskSwitchContext+0x48>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <vTaskSwitchContext+0x42>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	607b      	str	r3, [r7, #4]
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	e7fd      	b.n	8007df2 <vTaskSwitchContext+0x3e>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	491a      	ldr	r1, [pc, #104]	@ (8007e68 <vTaskSwitchContext+0xb4>)
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4613      	mov	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0e3      	beq.n	8007dd8 <vTaskSwitchContext+0x24>
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4a13      	ldr	r2, [pc, #76]	@ (8007e68 <vTaskSwitchContext+0xb4>)
 8007e1c:	4413      	add	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	605a      	str	r2, [r3, #4]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3308      	adds	r3, #8
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d104      	bne.n	8007e40 <vTaskSwitchContext+0x8c>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	605a      	str	r2, [r3, #4]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	4a09      	ldr	r2, [pc, #36]	@ (8007e6c <vTaskSwitchContext+0xb8>)
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	4a06      	ldr	r2, [pc, #24]	@ (8007e64 <vTaskSwitchContext+0xb0>)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6013      	str	r3, [r2, #0]
}
 8007e50:	bf00      	nop
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	20000e40 	.word	0x20000e40
 8007e60:	20000e2c 	.word	0x20000e2c
 8007e64:	20000e20 	.word	0x20000e20
 8007e68:	20000948 	.word	0x20000948
 8007e6c:	20000944 	.word	0x20000944

08007e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10b      	bne.n	8007e98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	60fb      	str	r3, [r7, #12]
}
 8007e92:	bf00      	nop
 8007e94:	bf00      	nop
 8007e96:	e7fd      	b.n	8007e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e98:	4b07      	ldr	r3, [pc, #28]	@ (8007eb8 <vTaskPlaceOnEventList+0x48>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3318      	adds	r3, #24
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7fe fa86 	bl	80063b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	6838      	ldr	r0, [r7, #0]
 8007eaa:	f000 fb91 	bl	80085d0 <prvAddCurrentTaskToDelayedList>
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000944 	.word	0x20000944

08007ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	617b      	str	r3, [r7, #20]
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	e7fd      	b.n	8007ee2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f10 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3318      	adds	r3, #24
 8007eec:	4619      	mov	r1, r3
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7fe fa3b 	bl	800636a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007efa:	f04f 33ff 	mov.w	r3, #4294967295
 8007efe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	68b8      	ldr	r0, [r7, #8]
 8007f04:	f000 fb64 	bl	80085d0 <prvAddCurrentTaskToDelayedList>
	}
 8007f08:	bf00      	nop
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20000944 	.word	0x20000944

08007f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	60fb      	str	r3, [r7, #12]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	3318      	adds	r3, #24
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe fa6c 	bl	8006424 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc4 <xTaskRemoveFromEventList+0xb0>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d11d      	bne.n	8007f90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe fa63 	bl	8006424 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f62:	4b19      	ldr	r3, [pc, #100]	@ (8007fc8 <xTaskRemoveFromEventList+0xb4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d903      	bls.n	8007f72 <xTaskRemoveFromEventList+0x5e>
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6e:	4a16      	ldr	r2, [pc, #88]	@ (8007fc8 <xTaskRemoveFromEventList+0xb4>)
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4a13      	ldr	r2, [pc, #76]	@ (8007fcc <xTaskRemoveFromEventList+0xb8>)
 8007f80:	441a      	add	r2, r3
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3304      	adds	r3, #4
 8007f86:	4619      	mov	r1, r3
 8007f88:	4610      	mov	r0, r2
 8007f8a:	f7fe f9ee 	bl	800636a <vListInsertEnd>
 8007f8e:	e005      	b.n	8007f9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	3318      	adds	r3, #24
 8007f94:	4619      	mov	r1, r3
 8007f96:	480e      	ldr	r0, [pc, #56]	@ (8007fd0 <xTaskRemoveFromEventList+0xbc>)
 8007f98:	f7fe f9e7 	bl	800636a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <xTaskRemoveFromEventList+0xc0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d905      	bls.n	8007fb6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007faa:	2301      	movs	r3, #1
 8007fac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fae:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd8 <xTaskRemoveFromEventList+0xc4>)
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	e001      	b.n	8007fba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fba:	697b      	ldr	r3, [r7, #20]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000e40 	.word	0x20000e40
 8007fc8:	20000e20 	.word	0x20000e20
 8007fcc:	20000948 	.word	0x20000948
 8007fd0:	20000dd8 	.word	0x20000dd8
 8007fd4:	20000944 	.word	0x20000944
 8007fd8:	20000e2c 	.word	0x20000e2c

08007fdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fe4:	4b06      	ldr	r3, [pc, #24]	@ (8008000 <vTaskInternalSetTimeOutState+0x24>)
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fec:	4b05      	ldr	r3, [pc, #20]	@ (8008004 <vTaskInternalSetTimeOutState+0x28>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	605a      	str	r2, [r3, #4]
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	20000e30 	.word	0x20000e30
 8008004:	20000e1c 	.word	0x20000e1c

08008008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	613b      	str	r3, [r7, #16]
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10b      	bne.n	800804e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	60fb      	str	r3, [r7, #12]
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	e7fd      	b.n	800804a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800804e:	f000 ff9b 	bl	8008f88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008052:	4b1d      	ldr	r3, [pc, #116]	@ (80080c8 <xTaskCheckForTimeOut+0xc0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806a:	d102      	bne.n	8008072 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800806c:	2300      	movs	r3, #0
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	e023      	b.n	80080ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b15      	ldr	r3, [pc, #84]	@ (80080cc <xTaskCheckForTimeOut+0xc4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d007      	beq.n	800808e <xTaskCheckForTimeOut+0x86>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	429a      	cmp	r2, r3
 8008086:	d302      	bcc.n	800808e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008088:	2301      	movs	r3, #1
 800808a:	61fb      	str	r3, [r7, #28]
 800808c:	e015      	b.n	80080ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	429a      	cmp	r2, r3
 8008096:	d20b      	bcs.n	80080b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff ff99 	bl	8007fdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	61fb      	str	r3, [r7, #28]
 80080ae:	e004      	b.n	80080ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080b6:	2301      	movs	r3, #1
 80080b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080ba:	f000 ff97 	bl	8008fec <vPortExitCritical>

	return xReturn;
 80080be:	69fb      	ldr	r3, [r7, #28]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3720      	adds	r7, #32
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20000e1c 	.word	0x20000e1c
 80080cc:	20000e30 	.word	0x20000e30

080080d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080d4:	4b03      	ldr	r3, [pc, #12]	@ (80080e4 <vTaskMissedYield+0x14>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
}
 80080da:	bf00      	nop
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	20000e2c 	.word	0x20000e2c

080080e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080f0:	f000 f852 	bl	8008198 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080f4:	4b06      	ldr	r3, [pc, #24]	@ (8008110 <prvIdleTask+0x28>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d9f9      	bls.n	80080f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080fc:	4b05      	ldr	r3, [pc, #20]	@ (8008114 <prvIdleTask+0x2c>)
 80080fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800810c:	e7f0      	b.n	80080f0 <prvIdleTask+0x8>
 800810e:	bf00      	nop
 8008110:	20000948 	.word	0x20000948
 8008114:	e000ed04 	.word	0xe000ed04

08008118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800811e:	2300      	movs	r3, #0
 8008120:	607b      	str	r3, [r7, #4]
 8008122:	e00c      	b.n	800813e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4a12      	ldr	r2, [pc, #72]	@ (8008178 <prvInitialiseTaskLists+0x60>)
 8008130:	4413      	add	r3, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe f8ec 	bl	8006310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3301      	adds	r3, #1
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b37      	cmp	r3, #55	@ 0x37
 8008142:	d9ef      	bls.n	8008124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008144:	480d      	ldr	r0, [pc, #52]	@ (800817c <prvInitialiseTaskLists+0x64>)
 8008146:	f7fe f8e3 	bl	8006310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800814a:	480d      	ldr	r0, [pc, #52]	@ (8008180 <prvInitialiseTaskLists+0x68>)
 800814c:	f7fe f8e0 	bl	8006310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008150:	480c      	ldr	r0, [pc, #48]	@ (8008184 <prvInitialiseTaskLists+0x6c>)
 8008152:	f7fe f8dd 	bl	8006310 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008156:	480c      	ldr	r0, [pc, #48]	@ (8008188 <prvInitialiseTaskLists+0x70>)
 8008158:	f7fe f8da 	bl	8006310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800815c:	480b      	ldr	r0, [pc, #44]	@ (800818c <prvInitialiseTaskLists+0x74>)
 800815e:	f7fe f8d7 	bl	8006310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008162:	4b0b      	ldr	r3, [pc, #44]	@ (8008190 <prvInitialiseTaskLists+0x78>)
 8008164:	4a05      	ldr	r2, [pc, #20]	@ (800817c <prvInitialiseTaskLists+0x64>)
 8008166:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008168:	4b0a      	ldr	r3, [pc, #40]	@ (8008194 <prvInitialiseTaskLists+0x7c>)
 800816a:	4a05      	ldr	r2, [pc, #20]	@ (8008180 <prvInitialiseTaskLists+0x68>)
 800816c:	601a      	str	r2, [r3, #0]
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000948 	.word	0x20000948
 800817c:	20000da8 	.word	0x20000da8
 8008180:	20000dbc 	.word	0x20000dbc
 8008184:	20000dd8 	.word	0x20000dd8
 8008188:	20000dec 	.word	0x20000dec
 800818c:	20000e04 	.word	0x20000e04
 8008190:	20000dd0 	.word	0x20000dd0
 8008194:	20000dd4 	.word	0x20000dd4

08008198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800819e:	e019      	b.n	80081d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081a0:	f000 fef2 	bl	8008f88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081a4:	4b10      	ldr	r3, [pc, #64]	@ (80081e8 <prvCheckTasksWaitingTermination+0x50>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe f937 	bl	8006424 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081b6:	4b0d      	ldr	r3, [pc, #52]	@ (80081ec <prvCheckTasksWaitingTermination+0x54>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	4a0b      	ldr	r2, [pc, #44]	@ (80081ec <prvCheckTasksWaitingTermination+0x54>)
 80081be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081c0:	4b0b      	ldr	r3, [pc, #44]	@ (80081f0 <prvCheckTasksWaitingTermination+0x58>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	4a0a      	ldr	r2, [pc, #40]	@ (80081f0 <prvCheckTasksWaitingTermination+0x58>)
 80081c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081ca:	f000 ff0f 	bl	8008fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f810 	bl	80081f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081d4:	4b06      	ldr	r3, [pc, #24]	@ (80081f0 <prvCheckTasksWaitingTermination+0x58>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e1      	bne.n	80081a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20000dec 	.word	0x20000dec
 80081ec:	20000e18 	.word	0x20000e18
 80081f0:	20000e00 	.word	0x20000e00

080081f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008202:	2b00      	cmp	r3, #0
 8008204:	d108      	bne.n	8008218 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800820a:	4618      	mov	r0, r3
 800820c:	f001 f8ac 	bl	8009368 <vPortFree>
				vPortFree( pxTCB );
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 f8a9 	bl	8009368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008216:	e019      	b.n	800824c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800821e:	2b01      	cmp	r3, #1
 8008220:	d103      	bne.n	800822a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f001 f8a0 	bl	8009368 <vPortFree>
	}
 8008228:	e010      	b.n	800824c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008230:	2b02      	cmp	r3, #2
 8008232:	d00b      	beq.n	800824c <prvDeleteTCB+0x58>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	60fb      	str	r3, [r7, #12]
}
 8008246:	bf00      	nop
 8008248:	bf00      	nop
 800824a:	e7fd      	b.n	8008248 <prvDeleteTCB+0x54>
	}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800825a:	4b0c      	ldr	r3, [pc, #48]	@ (800828c <prvResetNextTaskUnblockTime+0x38>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d104      	bne.n	800826e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008264:	4b0a      	ldr	r3, [pc, #40]	@ (8008290 <prvResetNextTaskUnblockTime+0x3c>)
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800826c:	e008      	b.n	8008280 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826e:	4b07      	ldr	r3, [pc, #28]	@ (800828c <prvResetNextTaskUnblockTime+0x38>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	4a04      	ldr	r2, [pc, #16]	@ (8008290 <prvResetNextTaskUnblockTime+0x3c>)
 800827e:	6013      	str	r3, [r2, #0]
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	20000dd0 	.word	0x20000dd0
 8008290:	20000e38 	.word	0x20000e38

08008294 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800829a:	4b05      	ldr	r3, [pc, #20]	@ (80082b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80082a0:	687b      	ldr	r3, [r7, #4]
	}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20000944 	.word	0x20000944

080082b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082ba:	4b0b      	ldr	r3, [pc, #44]	@ (80082e8 <xTaskGetSchedulerState+0x34>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d102      	bne.n	80082c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082c2:	2301      	movs	r3, #1
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	e008      	b.n	80082da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c8:	4b08      	ldr	r3, [pc, #32]	@ (80082ec <xTaskGetSchedulerState+0x38>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d102      	bne.n	80082d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082d0:	2302      	movs	r3, #2
 80082d2:	607b      	str	r3, [r7, #4]
 80082d4:	e001      	b.n	80082da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082d6:	2300      	movs	r3, #0
 80082d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082da:	687b      	ldr	r3, [r7, #4]
	}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	20000e24 	.word	0x20000e24
 80082ec:	20000e40 	.word	0x20000e40

080082f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d051      	beq.n	80083aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800830a:	4b2a      	ldr	r3, [pc, #168]	@ (80083b4 <xTaskPriorityInherit+0xc4>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008310:	429a      	cmp	r2, r3
 8008312:	d241      	bcs.n	8008398 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	db06      	blt.n	800832a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800831c:	4b25      	ldr	r3, [pc, #148]	@ (80083b4 <xTaskPriorityInherit+0xc4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	6959      	ldr	r1, [r3, #20]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4a1f      	ldr	r2, [pc, #124]	@ (80083b8 <xTaskPriorityInherit+0xc8>)
 800833c:	4413      	add	r3, r2
 800833e:	4299      	cmp	r1, r3
 8008340:	d122      	bne.n	8008388 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	3304      	adds	r3, #4
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe f86c 	bl	8006424 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800834c:	4b19      	ldr	r3, [pc, #100]	@ (80083b4 <xTaskPriorityInherit+0xc4>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800835a:	4b18      	ldr	r3, [pc, #96]	@ (80083bc <xTaskPriorityInherit+0xcc>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d903      	bls.n	800836a <xTaskPriorityInherit+0x7a>
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	4a15      	ldr	r2, [pc, #84]	@ (80083bc <xTaskPriorityInherit+0xcc>)
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4a10      	ldr	r2, [pc, #64]	@ (80083b8 <xTaskPriorityInherit+0xc8>)
 8008378:	441a      	add	r2, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	3304      	adds	r3, #4
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7fd fff2 	bl	800636a <vListInsertEnd>
 8008386:	e004      	b.n	8008392 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008388:	4b0a      	ldr	r3, [pc, #40]	@ (80083b4 <xTaskPriorityInherit+0xc4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008392:	2301      	movs	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e008      	b.n	80083aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800839c:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <xTaskPriorityInherit+0xc4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d201      	bcs.n	80083aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80083a6:	2301      	movs	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083aa:	68fb      	ldr	r3, [r7, #12]
	}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20000944 	.word	0x20000944
 80083b8:	20000948 	.word	0x20000948
 80083bc:	20000e20 	.word	0x20000e20

080083c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d058      	beq.n	8008488 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008494 <xTaskPriorityDisinherit+0xd4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d00b      	beq.n	80083f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	60fb      	str	r3, [r7, #12]
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	e7fd      	b.n	80083f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10b      	bne.n	8008418 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60bb      	str	r3, [r7, #8]
}
 8008412:	bf00      	nop
 8008414:	bf00      	nop
 8008416:	e7fd      	b.n	8008414 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800841c:	1e5a      	subs	r2, r3, #1
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800842a:	429a      	cmp	r2, r3
 800842c:	d02c      	beq.n	8008488 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008432:	2b00      	cmp	r3, #0
 8008434:	d128      	bne.n	8008488 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	3304      	adds	r3, #4
 800843a:	4618      	mov	r0, r3
 800843c:	f7fd fff2 	bl	8006424 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008458:	4b0f      	ldr	r3, [pc, #60]	@ (8008498 <xTaskPriorityDisinherit+0xd8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d903      	bls.n	8008468 <xTaskPriorityDisinherit+0xa8>
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008464:	4a0c      	ldr	r2, [pc, #48]	@ (8008498 <xTaskPriorityDisinherit+0xd8>)
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4a09      	ldr	r2, [pc, #36]	@ (800849c <xTaskPriorityDisinherit+0xdc>)
 8008476:	441a      	add	r2, r3
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	3304      	adds	r3, #4
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f7fd ff73 	bl	800636a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008488:	697b      	ldr	r3, [r7, #20]
	}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000944 	.word	0x20000944
 8008498:	20000e20 	.word	0x20000e20
 800849c:	20000948 	.word	0x20000948

080084a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80084ae:	2301      	movs	r3, #1
 80084b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d06c      	beq.n	8008592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10b      	bne.n	80084d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60fb      	str	r3, [r7, #12]
}
 80084d2:	bf00      	nop
 80084d4:	bf00      	nop
 80084d6:	e7fd      	b.n	80084d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d902      	bls.n	80084e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	61fb      	str	r3, [r7, #28]
 80084e6:	e002      	b.n	80084ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d04c      	beq.n	8008592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d147      	bne.n	8008592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008502:	4b26      	ldr	r3, [pc, #152]	@ (800859c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	429a      	cmp	r2, r3
 800850a:	d10b      	bne.n	8008524 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	60bb      	str	r3, [r7, #8]
}
 800851e:	bf00      	nop
 8008520:	bf00      	nop
 8008522:	e7fd      	b.n	8008520 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008528:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	db04      	blt.n	8008542 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	6959      	ldr	r1, [r3, #20]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4613      	mov	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4a13      	ldr	r2, [pc, #76]	@ (80085a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008552:	4413      	add	r3, r2
 8008554:	4299      	cmp	r1, r3
 8008556:	d11c      	bne.n	8008592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	3304      	adds	r3, #4
 800855c:	4618      	mov	r0, r3
 800855e:	f7fd ff61 	bl	8006424 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008566:	4b0f      	ldr	r3, [pc, #60]	@ (80085a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	d903      	bls.n	8008576 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008572:	4a0c      	ldr	r2, [pc, #48]	@ (80085a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4a07      	ldr	r2, [pc, #28]	@ (80085a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008584:	441a      	add	r2, r3
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	3304      	adds	r3, #4
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f7fd feec 	bl	800636a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008592:	bf00      	nop
 8008594:	3720      	adds	r7, #32
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000944 	.word	0x20000944
 80085a0:	20000948 	.word	0x20000948
 80085a4:	20000e20 	.word	0x20000e20

080085a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80085a8:	b480      	push	{r7}
 80085aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80085ac:	4b07      	ldr	r3, [pc, #28]	@ (80085cc <pvTaskIncrementMutexHeldCount+0x24>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80085b4:	4b05      	ldr	r3, [pc, #20]	@ (80085cc <pvTaskIncrementMutexHeldCount+0x24>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085ba:	3201      	adds	r2, #1
 80085bc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80085be:	4b03      	ldr	r3, [pc, #12]	@ (80085cc <pvTaskIncrementMutexHeldCount+0x24>)
 80085c0:	681b      	ldr	r3, [r3, #0]
	}
 80085c2:	4618      	mov	r0, r3
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20000944 	.word	0x20000944

080085d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085da:	4b21      	ldr	r3, [pc, #132]	@ (8008660 <prvAddCurrentTaskToDelayedList+0x90>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e0:	4b20      	ldr	r3, [pc, #128]	@ (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fd ff1c 	bl	8006424 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	d10a      	bne.n	800860a <prvAddCurrentTaskToDelayedList+0x3a>
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3304      	adds	r3, #4
 8008600:	4619      	mov	r1, r3
 8008602:	4819      	ldr	r0, [pc, #100]	@ (8008668 <prvAddCurrentTaskToDelayedList+0x98>)
 8008604:	f7fd feb1 	bl	800636a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008608:	e026      	b.n	8008658 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4413      	add	r3, r2
 8008610:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008612:	4b14      	ldr	r3, [pc, #80]	@ (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	429a      	cmp	r2, r3
 8008620:	d209      	bcs.n	8008636 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008622:	4b12      	ldr	r3, [pc, #72]	@ (800866c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4b0f      	ldr	r3, [pc, #60]	@ (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3304      	adds	r3, #4
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f7fd febf 	bl	80063b2 <vListInsert>
}
 8008634:	e010      	b.n	8008658 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008636:	4b0e      	ldr	r3, [pc, #56]	@ (8008670 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	4b0a      	ldr	r3, [pc, #40]	@ (8008664 <prvAddCurrentTaskToDelayedList+0x94>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3304      	adds	r3, #4
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f7fd feb5 	bl	80063b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008648:	4b0a      	ldr	r3, [pc, #40]	@ (8008674 <prvAddCurrentTaskToDelayedList+0xa4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	429a      	cmp	r2, r3
 8008650:	d202      	bcs.n	8008658 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008652:	4a08      	ldr	r2, [pc, #32]	@ (8008674 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	6013      	str	r3, [r2, #0]
}
 8008658:	bf00      	nop
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000e1c 	.word	0x20000e1c
 8008664:	20000944 	.word	0x20000944
 8008668:	20000e04 	.word	0x20000e04
 800866c:	20000dd4 	.word	0x20000dd4
 8008670:	20000dd0 	.word	0x20000dd0
 8008674:	20000e38 	.word	0x20000e38

08008678 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	@ 0x28
 800867c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800867e:	2300      	movs	r3, #0
 8008680:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008682:	f000 fb13 	bl	8008cac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008686:	4b1d      	ldr	r3, [pc, #116]	@ (80086fc <xTimerCreateTimerTask+0x84>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d021      	beq.n	80086d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008692:	2300      	movs	r3, #0
 8008694:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008696:	1d3a      	adds	r2, r7, #4
 8008698:	f107 0108 	add.w	r1, r7, #8
 800869c:	f107 030c 	add.w	r3, r7, #12
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fd fe1b 	bl	80062dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	9202      	str	r2, [sp, #8]
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	2302      	movs	r3, #2
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	2300      	movs	r3, #0
 80086b6:	460a      	mov	r2, r1
 80086b8:	4911      	ldr	r1, [pc, #68]	@ (8008700 <xTimerCreateTimerTask+0x88>)
 80086ba:	4812      	ldr	r0, [pc, #72]	@ (8008704 <xTimerCreateTimerTask+0x8c>)
 80086bc:	f7fe ffc0 	bl	8007640 <xTaskCreateStatic>
 80086c0:	4603      	mov	r3, r0
 80086c2:	4a11      	ldr	r2, [pc, #68]	@ (8008708 <xTimerCreateTimerTask+0x90>)
 80086c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086c6:	4b10      	ldr	r3, [pc, #64]	@ (8008708 <xTimerCreateTimerTask+0x90>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086ce:	2301      	movs	r3, #1
 80086d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10b      	bne.n	80086f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	613b      	str	r3, [r7, #16]
}
 80086ea:	bf00      	nop
 80086ec:	bf00      	nop
 80086ee:	e7fd      	b.n	80086ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80086f0:	697b      	ldr	r3, [r7, #20]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000e74 	.word	0x20000e74
 8008700:	0800a680 	.word	0x0800a680
 8008704:	08008845 	.word	0x08008845
 8008708:	20000e78 	.word	0x20000e78

0800870c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	@ 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800871a:	2300      	movs	r3, #0
 800871c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <xTimerGenericCommand+0x30>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	623b      	str	r3, [r7, #32]
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800873c:	4b19      	ldr	r3, [pc, #100]	@ (80087a4 <xTimerGenericCommand+0x98>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d02a      	beq.n	800879a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2b05      	cmp	r3, #5
 8008754:	dc18      	bgt.n	8008788 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008756:	f7ff fdad 	bl	80082b4 <xTaskGetSchedulerState>
 800875a:	4603      	mov	r3, r0
 800875c:	2b02      	cmp	r3, #2
 800875e:	d109      	bne.n	8008774 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008760:	4b10      	ldr	r3, [pc, #64]	@ (80087a4 <xTimerGenericCommand+0x98>)
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	f107 0110 	add.w	r1, r7, #16
 8008768:	2300      	movs	r3, #0
 800876a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800876c:	f7fe f8f0 	bl	8006950 <xQueueGenericSend>
 8008770:	6278      	str	r0, [r7, #36]	@ 0x24
 8008772:	e012      	b.n	800879a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008774:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <xTimerGenericCommand+0x98>)
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	f107 0110 	add.w	r1, r7, #16
 800877c:	2300      	movs	r3, #0
 800877e:	2200      	movs	r2, #0
 8008780:	f7fe f8e6 	bl	8006950 <xQueueGenericSend>
 8008784:	6278      	str	r0, [r7, #36]	@ 0x24
 8008786:	e008      	b.n	800879a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008788:	4b06      	ldr	r3, [pc, #24]	@ (80087a4 <xTimerGenericCommand+0x98>)
 800878a:	6818      	ldr	r0, [r3, #0]
 800878c:	f107 0110 	add.w	r1, r7, #16
 8008790:	2300      	movs	r3, #0
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	f7fe f9de 	bl	8006b54 <xQueueGenericSendFromISR>
 8008798:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800879c:	4618      	mov	r0, r3
 800879e:	3728      	adds	r7, #40	@ 0x28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000e74 	.word	0x20000e74

080087a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af02      	add	r7, sp, #8
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b2:	4b23      	ldr	r3, [pc, #140]	@ (8008840 <prvProcessExpiredTimer+0x98>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3304      	adds	r3, #4
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fd fe2f 	bl	8006424 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d023      	beq.n	800881c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	699a      	ldr	r2, [r3, #24]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	18d1      	adds	r1, r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	6978      	ldr	r0, [r7, #20]
 80087e2:	f000 f8d5 	bl	8008990 <prvInsertTimerInActiveList>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d020      	beq.n	800882e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087ec:	2300      	movs	r3, #0
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	2300      	movs	r3, #0
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	2100      	movs	r1, #0
 80087f6:	6978      	ldr	r0, [r7, #20]
 80087f8:	f7ff ff88 	bl	800870c <xTimerGenericCommand>
 80087fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d114      	bne.n	800882e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	60fb      	str	r3, [r7, #12]
}
 8008816:	bf00      	nop
 8008818:	bf00      	nop
 800881a:	e7fd      	b.n	8008818 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008822:	f023 0301 	bic.w	r3, r3, #1
 8008826:	b2da      	uxtb	r2, r3
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	6978      	ldr	r0, [r7, #20]
 8008834:	4798      	blx	r3
}
 8008836:	bf00      	nop
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000e6c 	.word	0x20000e6c

08008844 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800884c:	f107 0308 	add.w	r3, r7, #8
 8008850:	4618      	mov	r0, r3
 8008852:	f000 f859 	bl	8008908 <prvGetNextExpireTime>
 8008856:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4619      	mov	r1, r3
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 f805 	bl	800886c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008862:	f000 f8d7 	bl	8008a14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008866:	bf00      	nop
 8008868:	e7f0      	b.n	800884c <prvTimerTask+0x8>
	...

0800886c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008876:	f7ff f927 	bl	8007ac8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800887a:	f107 0308 	add.w	r3, r7, #8
 800887e:	4618      	mov	r0, r3
 8008880:	f000 f866 	bl	8008950 <prvSampleTimeNow>
 8008884:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d130      	bne.n	80088ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <prvProcessTimerOrBlockTask+0x3c>
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	429a      	cmp	r2, r3
 8008898:	d806      	bhi.n	80088a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800889a:	f7ff f923 	bl	8007ae4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff ff81 	bl	80087a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088a6:	e024      	b.n	80088f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088ae:	4b13      	ldr	r3, [pc, #76]	@ (80088fc <prvProcessTimerOrBlockTask+0x90>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <prvProcessTimerOrBlockTask+0x50>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <prvProcessTimerOrBlockTask+0x52>
 80088bc:	2300      	movs	r3, #0
 80088be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008900 <prvProcessTimerOrBlockTask+0x94>)
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7fe fe83 	bl	80075d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80088d2:	f7ff f907 	bl	8007ae4 <xTaskResumeAll>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80088dc:	4b09      	ldr	r3, [pc, #36]	@ (8008904 <prvProcessTimerOrBlockTask+0x98>)
 80088de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	f3bf 8f6f 	isb	sy
}
 80088ec:	e001      	b.n	80088f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088ee:	f7ff f8f9 	bl	8007ae4 <xTaskResumeAll>
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	20000e70 	.word	0x20000e70
 8008900:	20000e74 	.word	0x20000e74
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008910:	4b0e      	ldr	r3, [pc, #56]	@ (800894c <prvGetNextExpireTime+0x44>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <prvGetNextExpireTime+0x16>
 800891a:	2201      	movs	r2, #1
 800891c:	e000      	b.n	8008920 <prvGetNextExpireTime+0x18>
 800891e:	2200      	movs	r2, #0
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d105      	bne.n	8008938 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800892c:	4b07      	ldr	r3, [pc, #28]	@ (800894c <prvGetNextExpireTime+0x44>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	e001      	b.n	800893c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800893c:	68fb      	ldr	r3, [r7, #12]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	20000e6c 	.word	0x20000e6c

08008950 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008958:	f7ff f962 	bl	8007c20 <xTaskGetTickCount>
 800895c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800895e:	4b0b      	ldr	r3, [pc, #44]	@ (800898c <prvSampleTimeNow+0x3c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	429a      	cmp	r2, r3
 8008966:	d205      	bcs.n	8008974 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008968:	f000 f93a 	bl	8008be0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	e002      	b.n	800897a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800897a:	4a04      	ldr	r2, [pc, #16]	@ (800898c <prvSampleTimeNow+0x3c>)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008980:	68fb      	ldr	r3, [r7, #12]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20000e7c 	.word	0x20000e7c

08008990 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d812      	bhi.n	80089dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	1ad2      	subs	r2, r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d302      	bcc.n	80089ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	e01b      	b.n	8008a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089ca:	4b10      	ldr	r3, [pc, #64]	@ (8008a0c <prvInsertTimerInActiveList+0x7c>)
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7fd fcec 	bl	80063b2 <vListInsert>
 80089da:	e012      	b.n	8008a02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d206      	bcs.n	80089f2 <prvInsertTimerInActiveList+0x62>
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d302      	bcc.n	80089f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089ec:	2301      	movs	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	e007      	b.n	8008a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089f2:	4b07      	ldr	r3, [pc, #28]	@ (8008a10 <prvInsertTimerInActiveList+0x80>)
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3304      	adds	r3, #4
 80089fa:	4619      	mov	r1, r3
 80089fc:	4610      	mov	r0, r2
 80089fe:	f7fd fcd8 	bl	80063b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a02:	697b      	ldr	r3, [r7, #20]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20000e70 	.word	0x20000e70
 8008a10:	20000e6c 	.word	0x20000e6c

08008a14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08e      	sub	sp, #56	@ 0x38
 8008a18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a1a:	e0ce      	b.n	8008bba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	da19      	bge.n	8008a56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a22:	1d3b      	adds	r3, r7, #4
 8008a24:	3304      	adds	r3, #4
 8008a26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10b      	bne.n	8008a46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	61fb      	str	r3, [r7, #28]
}
 8008a40:	bf00      	nop
 8008a42:	bf00      	nop
 8008a44:	e7fd      	b.n	8008a42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a4c:	6850      	ldr	r0, [r2, #4]
 8008a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a50:	6892      	ldr	r2, [r2, #8]
 8008a52:	4611      	mov	r1, r2
 8008a54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f2c0 80ae 	blt.w	8008bba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d004      	beq.n	8008a74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fd fcd8 	bl	8006424 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a74:	463b      	mov	r3, r7
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff ff6a 	bl	8008950 <prvSampleTimeNow>
 8008a7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b09      	cmp	r3, #9
 8008a82:	f200 8097 	bhi.w	8008bb4 <prvProcessReceivedCommands+0x1a0>
 8008a86:	a201      	add	r2, pc, #4	@ (adr r2, 8008a8c <prvProcessReceivedCommands+0x78>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008ab5 	.word	0x08008ab5
 8008a90:	08008ab5 	.word	0x08008ab5
 8008a94:	08008ab5 	.word	0x08008ab5
 8008a98:	08008b2b 	.word	0x08008b2b
 8008a9c:	08008b3f 	.word	0x08008b3f
 8008aa0:	08008b8b 	.word	0x08008b8b
 8008aa4:	08008ab5 	.word	0x08008ab5
 8008aa8:	08008ab5 	.word	0x08008ab5
 8008aac:	08008b2b 	.word	0x08008b2b
 8008ab0:	08008b3f 	.word	0x08008b3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008aba:	f043 0301 	orr.w	r3, r3, #1
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	18d1      	adds	r1, r2, r3
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ad4:	f7ff ff5c 	bl	8008990 <prvInsertTimerInActiveList>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d06c      	beq.n	8008bb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ae4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d061      	beq.n	8008bb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	441a      	add	r2, r3
 8008afc:	2300      	movs	r3, #0
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2300      	movs	r3, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b06:	f7ff fe01 	bl	800870c <xTimerGenericCommand>
 8008b0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d152      	bne.n	8008bb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	61bb      	str	r3, [r7, #24]
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop
 8008b28:	e7fd      	b.n	8008b26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b30:	f023 0301 	bic.w	r3, r3, #1
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b3c:	e03d      	b.n	8008bba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b44:	f043 0301 	orr.w	r3, r3, #1
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10b      	bne.n	8008b76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	617b      	str	r3, [r7, #20]
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	e7fd      	b.n	8008b72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b78:	699a      	ldr	r2, [r3, #24]
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	18d1      	adds	r1, r2, r3
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b84:	f7ff ff04 	bl	8008990 <prvInsertTimerInActiveList>
					break;
 8008b88:	e017      	b.n	8008bba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b9a:	f000 fbe5 	bl	8009368 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b9e:	e00c      	b.n	8008bba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ba6:	f023 0301 	bic.w	r3, r3, #1
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008bb2:	e002      	b.n	8008bba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008bb4:	bf00      	nop
 8008bb6:	e000      	b.n	8008bba <prvProcessReceivedCommands+0x1a6>
					break;
 8008bb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bba:	4b08      	ldr	r3, [pc, #32]	@ (8008bdc <prvProcessReceivedCommands+0x1c8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	1d39      	adds	r1, r7, #4
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe f8f4 	bl	8006db0 <xQueueReceive>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f47f af26 	bne.w	8008a1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	3730      	adds	r7, #48	@ 0x30
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000e74 	.word	0x20000e74

08008be0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008be6:	e049      	b.n	8008c7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008be8:	4b2e      	ldr	r3, [pc, #184]	@ (8008ca4 <prvSwitchTimerLists+0xc4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8008ca4 <prvSwitchTimerLists+0xc4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fd fc0f 	bl	8006424 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d02f      	beq.n	8008c7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4413      	add	r3, r2
 8008c24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d90e      	bls.n	8008c4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca4 <prvSwitchTimerLists+0xc4>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f7fd fbb4 	bl	80063b2 <vListInsert>
 8008c4a:	e017      	b.n	8008c7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	2300      	movs	r3, #0
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	2100      	movs	r1, #0
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff fd58 	bl	800870c <xTimerGenericCommand>
 8008c5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10b      	bne.n	8008c7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	603b      	str	r3, [r7, #0]
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	e7fd      	b.n	8008c78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c7c:	4b09      	ldr	r3, [pc, #36]	@ (8008ca4 <prvSwitchTimerLists+0xc4>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1b0      	bne.n	8008be8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c86:	4b07      	ldr	r3, [pc, #28]	@ (8008ca4 <prvSwitchTimerLists+0xc4>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ca8 <prvSwitchTimerLists+0xc8>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a04      	ldr	r2, [pc, #16]	@ (8008ca4 <prvSwitchTimerLists+0xc4>)
 8008c92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c94:	4a04      	ldr	r2, [pc, #16]	@ (8008ca8 <prvSwitchTimerLists+0xc8>)
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	6013      	str	r3, [r2, #0]
}
 8008c9a:	bf00      	nop
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20000e6c 	.word	0x20000e6c
 8008ca8:	20000e70 	.word	0x20000e70

08008cac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008cb2:	f000 f969 	bl	8008f88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008cb6:	4b15      	ldr	r3, [pc, #84]	@ (8008d0c <prvCheckForValidListAndQueue+0x60>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d120      	bne.n	8008d00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008cbe:	4814      	ldr	r0, [pc, #80]	@ (8008d10 <prvCheckForValidListAndQueue+0x64>)
 8008cc0:	f7fd fb26 	bl	8006310 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008cc4:	4813      	ldr	r0, [pc, #76]	@ (8008d14 <prvCheckForValidListAndQueue+0x68>)
 8008cc6:	f7fd fb23 	bl	8006310 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008cca:	4b13      	ldr	r3, [pc, #76]	@ (8008d18 <prvCheckForValidListAndQueue+0x6c>)
 8008ccc:	4a10      	ldr	r2, [pc, #64]	@ (8008d10 <prvCheckForValidListAndQueue+0x64>)
 8008cce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008cd0:	4b12      	ldr	r3, [pc, #72]	@ (8008d1c <prvCheckForValidListAndQueue+0x70>)
 8008cd2:	4a10      	ldr	r2, [pc, #64]	@ (8008d14 <prvCheckForValidListAndQueue+0x68>)
 8008cd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	4b11      	ldr	r3, [pc, #68]	@ (8008d20 <prvCheckForValidListAndQueue+0x74>)
 8008cdc:	4a11      	ldr	r2, [pc, #68]	@ (8008d24 <prvCheckForValidListAndQueue+0x78>)
 8008cde:	2110      	movs	r1, #16
 8008ce0:	200a      	movs	r0, #10
 8008ce2:	f7fd fc33 	bl	800654c <xQueueGenericCreateStatic>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4a08      	ldr	r2, [pc, #32]	@ (8008d0c <prvCheckForValidListAndQueue+0x60>)
 8008cea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008cec:	4b07      	ldr	r3, [pc, #28]	@ (8008d0c <prvCheckForValidListAndQueue+0x60>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008cf4:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <prvCheckForValidListAndQueue+0x60>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	490b      	ldr	r1, [pc, #44]	@ (8008d28 <prvCheckForValidListAndQueue+0x7c>)
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fe fc18 	bl	8007530 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d00:	f000 f974 	bl	8008fec <vPortExitCritical>
}
 8008d04:	bf00      	nop
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000e74 	.word	0x20000e74
 8008d10:	20000e44 	.word	0x20000e44
 8008d14:	20000e58 	.word	0x20000e58
 8008d18:	20000e6c 	.word	0x20000e6c
 8008d1c:	20000e70 	.word	0x20000e70
 8008d20:	20000f20 	.word	0x20000f20
 8008d24:	20000e80 	.word	0x20000e80
 8008d28:	0800a688 	.word	0x0800a688

08008d2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3b04      	subs	r3, #4
 8008d3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3b04      	subs	r3, #4
 8008d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f023 0201 	bic.w	r2, r3, #1
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3b04      	subs	r3, #4
 8008d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8008d90 <pxPortInitialiseStack+0x64>)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3b14      	subs	r3, #20
 8008d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3b04      	subs	r3, #4
 8008d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f06f 0202 	mvn.w	r2, #2
 8008d7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3b20      	subs	r3, #32
 8008d80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d82:	68fb      	ldr	r3, [r7, #12]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	08008d95 	.word	0x08008d95

08008d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d9e:	4b13      	ldr	r3, [pc, #76]	@ (8008dec <prvTaskExitError+0x58>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d00b      	beq.n	8008dc0 <prvTaskExitError+0x2c>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60fb      	str	r3, [r7, #12]
}
 8008dba:	bf00      	nop
 8008dbc:	bf00      	nop
 8008dbe:	e7fd      	b.n	8008dbc <prvTaskExitError+0x28>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	60bb      	str	r3, [r7, #8]
}
 8008dd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008dd4:	bf00      	nop
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0fc      	beq.n	8008dd6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20000044 	.word	0x20000044

08008df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008df0:	4b07      	ldr	r3, [pc, #28]	@ (8008e10 <pxCurrentTCBConst2>)
 8008df2:	6819      	ldr	r1, [r3, #0]
 8008df4:	6808      	ldr	r0, [r1, #0]
 8008df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfa:	f380 8809 	msr	PSP, r0
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f04f 0000 	mov.w	r0, #0
 8008e06:	f380 8811 	msr	BASEPRI, r0
 8008e0a:	4770      	bx	lr
 8008e0c:	f3af 8000 	nop.w

08008e10 <pxCurrentTCBConst2>:
 8008e10:	20000944 	.word	0x20000944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e18:	4808      	ldr	r0, [pc, #32]	@ (8008e3c <prvPortStartFirstTask+0x24>)
 8008e1a:	6800      	ldr	r0, [r0, #0]
 8008e1c:	6800      	ldr	r0, [r0, #0]
 8008e1e:	f380 8808 	msr	MSP, r0
 8008e22:	f04f 0000 	mov.w	r0, #0
 8008e26:	f380 8814 	msr	CONTROL, r0
 8008e2a:	b662      	cpsie	i
 8008e2c:	b661      	cpsie	f
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	df00      	svc	0
 8008e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e3a:	bf00      	nop
 8008e3c:	e000ed08 	.word	0xe000ed08

08008e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e46:	4b47      	ldr	r3, [pc, #284]	@ (8008f64 <xPortStartScheduler+0x124>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a47      	ldr	r2, [pc, #284]	@ (8008f68 <xPortStartScheduler+0x128>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d10b      	bne.n	8008e68 <xPortStartScheduler+0x28>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	60fb      	str	r3, [r7, #12]
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	e7fd      	b.n	8008e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e68:	4b3e      	ldr	r3, [pc, #248]	@ (8008f64 <xPortStartScheduler+0x124>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8008f6c <xPortStartScheduler+0x12c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d10b      	bne.n	8008e8a <xPortStartScheduler+0x4a>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	613b      	str	r3, [r7, #16]
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	e7fd      	b.n	8008e86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e8a:	4b39      	ldr	r3, [pc, #228]	@ (8008f70 <xPortStartScheduler+0x130>)
 8008e8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	22ff      	movs	r2, #255	@ 0xff
 8008e9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	4b31      	ldr	r3, [pc, #196]	@ (8008f74 <xPortStartScheduler+0x134>)
 8008eb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008eb2:	4b31      	ldr	r3, [pc, #196]	@ (8008f78 <xPortStartScheduler+0x138>)
 8008eb4:	2207      	movs	r2, #7
 8008eb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eb8:	e009      	b.n	8008ece <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008eba:	4b2f      	ldr	r3, [pc, #188]	@ (8008f78 <xPortStartScheduler+0x138>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8008f78 <xPortStartScheduler+0x138>)
 8008ec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ece:	78fb      	ldrb	r3, [r7, #3]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ed6:	2b80      	cmp	r3, #128	@ 0x80
 8008ed8:	d0ef      	beq.n	8008eba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008eda:	4b27      	ldr	r3, [pc, #156]	@ (8008f78 <xPortStartScheduler+0x138>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f1c3 0307 	rsb	r3, r3, #7
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d00b      	beq.n	8008efe <xPortStartScheduler+0xbe>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	60bb      	str	r3, [r7, #8]
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	e7fd      	b.n	8008efa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008efe:	4b1e      	ldr	r3, [pc, #120]	@ (8008f78 <xPortStartScheduler+0x138>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	4a1c      	ldr	r2, [pc, #112]	@ (8008f78 <xPortStartScheduler+0x138>)
 8008f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f08:	4b1b      	ldr	r3, [pc, #108]	@ (8008f78 <xPortStartScheduler+0x138>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f10:	4a19      	ldr	r2, [pc, #100]	@ (8008f78 <xPortStartScheduler+0x138>)
 8008f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f1c:	4b17      	ldr	r3, [pc, #92]	@ (8008f7c <xPortStartScheduler+0x13c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a16      	ldr	r2, [pc, #88]	@ (8008f7c <xPortStartScheduler+0x13c>)
 8008f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f28:	4b14      	ldr	r3, [pc, #80]	@ (8008f7c <xPortStartScheduler+0x13c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a13      	ldr	r2, [pc, #76]	@ (8008f7c <xPortStartScheduler+0x13c>)
 8008f2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f34:	f000 f8da 	bl	80090ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f38:	4b11      	ldr	r3, [pc, #68]	@ (8008f80 <xPortStartScheduler+0x140>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f3e:	f000 f8f9 	bl	8009134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f42:	4b10      	ldr	r3, [pc, #64]	@ (8008f84 <xPortStartScheduler+0x144>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a0f      	ldr	r2, [pc, #60]	@ (8008f84 <xPortStartScheduler+0x144>)
 8008f48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008f4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f4e:	f7ff ff63 	bl	8008e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f52:	f7fe ff2f 	bl	8007db4 <vTaskSwitchContext>
	prvTaskExitError();
 8008f56:	f7ff ff1d 	bl	8008d94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	e000ed00 	.word	0xe000ed00
 8008f68:	410fc271 	.word	0x410fc271
 8008f6c:	410fc270 	.word	0x410fc270
 8008f70:	e000e400 	.word	0xe000e400
 8008f74:	20000f70 	.word	0x20000f70
 8008f78:	20000f74 	.word	0x20000f74
 8008f7c:	e000ed20 	.word	0xe000ed20
 8008f80:	20000044 	.word	0x20000044
 8008f84:	e000ef34 	.word	0xe000ef34

08008f88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	607b      	str	r3, [r7, #4]
}
 8008fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fa2:	4b10      	ldr	r3, [pc, #64]	@ (8008fe4 <vPortEnterCritical+0x5c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8008fe4 <vPortEnterCritical+0x5c>)
 8008faa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fac:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <vPortEnterCritical+0x5c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d110      	bne.n	8008fd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe8 <vPortEnterCritical+0x60>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00b      	beq.n	8008fd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	603b      	str	r3, [r7, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	e7fd      	b.n	8008fd2 <vPortEnterCritical+0x4a>
	}
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000044 	.word	0x20000044
 8008fe8:	e000ed04 	.word	0xe000ed04

08008fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ff2:	4b12      	ldr	r3, [pc, #72]	@ (800903c <vPortExitCritical+0x50>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10b      	bne.n	8009012 <vPortExitCritical+0x26>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	607b      	str	r3, [r7, #4]
}
 800900c:	bf00      	nop
 800900e:	bf00      	nop
 8009010:	e7fd      	b.n	800900e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009012:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <vPortExitCritical+0x50>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3b01      	subs	r3, #1
 8009018:	4a08      	ldr	r2, [pc, #32]	@ (800903c <vPortExitCritical+0x50>)
 800901a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800901c:	4b07      	ldr	r3, [pc, #28]	@ (800903c <vPortExitCritical+0x50>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d105      	bne.n	8009030 <vPortExitCritical+0x44>
 8009024:	2300      	movs	r3, #0
 8009026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	f383 8811 	msr	BASEPRI, r3
}
 800902e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	20000044 	.word	0x20000044

08009040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009040:	f3ef 8009 	mrs	r0, PSP
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	4b15      	ldr	r3, [pc, #84]	@ (80090a0 <pxCurrentTCBConst>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	f01e 0f10 	tst.w	lr, #16
 8009050:	bf08      	it	eq
 8009052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905a:	6010      	str	r0, [r2, #0]
 800905c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009064:	f380 8811 	msr	BASEPRI, r0
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f7fe fea0 	bl	8007db4 <vTaskSwitchContext>
 8009074:	f04f 0000 	mov.w	r0, #0
 8009078:	f380 8811 	msr	BASEPRI, r0
 800907c:	bc09      	pop	{r0, r3}
 800907e:	6819      	ldr	r1, [r3, #0]
 8009080:	6808      	ldr	r0, [r1, #0]
 8009082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009086:	f01e 0f10 	tst.w	lr, #16
 800908a:	bf08      	it	eq
 800908c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009090:	f380 8809 	msr	PSP, r0
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	f3af 8000 	nop.w

080090a0 <pxCurrentTCBConst>:
 80090a0:	20000944 	.word	0x20000944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop

080090a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	607b      	str	r3, [r7, #4]
}
 80090c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090c2:	f7fe fdbd 	bl	8007c40 <xTaskIncrementTick>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090cc:	4b06      	ldr	r3, [pc, #24]	@ (80090e8 <xPortSysTickHandler+0x40>)
 80090ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	2300      	movs	r3, #0
 80090d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f383 8811 	msr	BASEPRI, r3
}
 80090de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	e000ed04 	.word	0xe000ed04

080090ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009120 <vPortSetupTimerInterrupt+0x34>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009124 <vPortSetupTimerInterrupt+0x38>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <vPortSetupTimerInterrupt+0x3c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a0a      	ldr	r2, [pc, #40]	@ (800912c <vPortSetupTimerInterrupt+0x40>)
 8009102:	fba2 2303 	umull	r2, r3, r2, r3
 8009106:	099b      	lsrs	r3, r3, #6
 8009108:	4a09      	ldr	r2, [pc, #36]	@ (8009130 <vPortSetupTimerInterrupt+0x44>)
 800910a:	3b01      	subs	r3, #1
 800910c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800910e:	4b04      	ldr	r3, [pc, #16]	@ (8009120 <vPortSetupTimerInterrupt+0x34>)
 8009110:	2207      	movs	r2, #7
 8009112:	601a      	str	r2, [r3, #0]
}
 8009114:	bf00      	nop
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	e000e010 	.word	0xe000e010
 8009124:	e000e018 	.word	0xe000e018
 8009128:	20000038 	.word	0x20000038
 800912c:	10624dd3 	.word	0x10624dd3
 8009130:	e000e014 	.word	0xe000e014

08009134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009144 <vPortEnableVFP+0x10>
 8009138:	6801      	ldr	r1, [r0, #0]
 800913a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800913e:	6001      	str	r1, [r0, #0]
 8009140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009142:	bf00      	nop
 8009144:	e000ed88 	.word	0xe000ed88

08009148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800914e:	f3ef 8305 	mrs	r3, IPSR
 8009152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2b0f      	cmp	r3, #15
 8009158:	d915      	bls.n	8009186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800915a:	4a18      	ldr	r2, [pc, #96]	@ (80091bc <vPortValidateInterruptPriority+0x74>)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009164:	4b16      	ldr	r3, [pc, #88]	@ (80091c0 <vPortValidateInterruptPriority+0x78>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	7afa      	ldrb	r2, [r7, #11]
 800916a:	429a      	cmp	r2, r3
 800916c:	d20b      	bcs.n	8009186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	607b      	str	r3, [r7, #4]
}
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	e7fd      	b.n	8009182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009186:	4b0f      	ldr	r3, [pc, #60]	@ (80091c4 <vPortValidateInterruptPriority+0x7c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800918e:	4b0e      	ldr	r3, [pc, #56]	@ (80091c8 <vPortValidateInterruptPriority+0x80>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d90b      	bls.n	80091ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	603b      	str	r3, [r7, #0]
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	e7fd      	b.n	80091aa <vPortValidateInterruptPriority+0x62>
	}
 80091ae:	bf00      	nop
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	e000e3f0 	.word	0xe000e3f0
 80091c0:	20000f70 	.word	0x20000f70
 80091c4:	e000ed0c 	.word	0xe000ed0c
 80091c8:	20000f74 	.word	0x20000f74

080091cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	@ 0x28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091d8:	f7fe fc76 	bl	8007ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009350 <pvPortMalloc+0x184>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091e4:	f000 f924 	bl	8009430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009354 <pvPortMalloc+0x188>)
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4013      	ands	r3, r2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f040 8095 	bne.w	8009320 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01e      	beq.n	800923a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80091fc:	2208      	movs	r2, #8
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4413      	add	r3, r2
 8009202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	2b00      	cmp	r3, #0
 800920c:	d015      	beq.n	800923a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f023 0307 	bic.w	r3, r3, #7
 8009214:	3308      	adds	r3, #8
 8009216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <pvPortMalloc+0x6e>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	617b      	str	r3, [r7, #20]
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	e7fd      	b.n	8009236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d06f      	beq.n	8009320 <pvPortMalloc+0x154>
 8009240:	4b45      	ldr	r3, [pc, #276]	@ (8009358 <pvPortMalloc+0x18c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	429a      	cmp	r2, r3
 8009248:	d86a      	bhi.n	8009320 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800924a:	4b44      	ldr	r3, [pc, #272]	@ (800935c <pvPortMalloc+0x190>)
 800924c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800924e:	4b43      	ldr	r3, [pc, #268]	@ (800935c <pvPortMalloc+0x190>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009254:	e004      	b.n	8009260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	429a      	cmp	r2, r3
 8009268:	d903      	bls.n	8009272 <pvPortMalloc+0xa6>
 800926a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1f1      	bne.n	8009256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009272:	4b37      	ldr	r3, [pc, #220]	@ (8009350 <pvPortMalloc+0x184>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009278:	429a      	cmp	r2, r3
 800927a:	d051      	beq.n	8009320 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2208      	movs	r2, #8
 8009282:	4413      	add	r3, r2
 8009284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	6a3b      	ldr	r3, [r7, #32]
 800928c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800928e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	1ad2      	subs	r2, r2, r3
 8009296:	2308      	movs	r3, #8
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	429a      	cmp	r2, r3
 800929c:	d920      	bls.n	80092e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800929e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4413      	add	r3, r2
 80092a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <pvPortMalloc+0xfc>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	613b      	str	r3, [r7, #16]
}
 80092c2:	bf00      	nop
 80092c4:	bf00      	nop
 80092c6:	e7fd      	b.n	80092c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	1ad2      	subs	r2, r2, r3
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092da:	69b8      	ldr	r0, [r7, #24]
 80092dc:	f000 f90a 	bl	80094f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009358 <pvPortMalloc+0x18c>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009358 <pvPortMalloc+0x18c>)
 80092ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009358 <pvPortMalloc+0x18c>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009360 <pvPortMalloc+0x194>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d203      	bcs.n	8009302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092fa:	4b17      	ldr	r3, [pc, #92]	@ (8009358 <pvPortMalloc+0x18c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a18      	ldr	r2, [pc, #96]	@ (8009360 <pvPortMalloc+0x194>)
 8009300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	4b13      	ldr	r3, [pc, #76]	@ (8009354 <pvPortMalloc+0x188>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	431a      	orrs	r2, r3
 800930c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009316:	4b13      	ldr	r3, [pc, #76]	@ (8009364 <pvPortMalloc+0x198>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3301      	adds	r3, #1
 800931c:	4a11      	ldr	r2, [pc, #68]	@ (8009364 <pvPortMalloc+0x198>)
 800931e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009320:	f7fe fbe0 	bl	8007ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <pvPortMalloc+0x17a>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	60fb      	str	r3, [r7, #12]
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	e7fd      	b.n	8009342 <pvPortMalloc+0x176>
	return pvReturn;
 8009346:	69fb      	ldr	r3, [r7, #28]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3728      	adds	r7, #40	@ 0x28
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20004b80 	.word	0x20004b80
 8009354:	20004b94 	.word	0x20004b94
 8009358:	20004b84 	.word	0x20004b84
 800935c:	20004b78 	.word	0x20004b78
 8009360:	20004b88 	.word	0x20004b88
 8009364:	20004b8c 	.word	0x20004b8c

08009368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d04f      	beq.n	800941a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800937a:	2308      	movs	r3, #8
 800937c:	425b      	negs	r3, r3
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4413      	add	r3, r2
 8009382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	4b25      	ldr	r3, [pc, #148]	@ (8009424 <vPortFree+0xbc>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4013      	ands	r3, r2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10b      	bne.n	80093ae <vPortFree+0x46>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60fb      	str	r3, [r7, #12]
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	e7fd      	b.n	80093aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <vPortFree+0x66>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	60bb      	str	r3, [r7, #8]
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	4b14      	ldr	r3, [pc, #80]	@ (8009424 <vPortFree+0xbc>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4013      	ands	r3, r2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01e      	beq.n	800941a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d11a      	bne.n	800941a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009424 <vPortFree+0xbc>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	43db      	mvns	r3, r3
 80093ee:	401a      	ands	r2, r3
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093f4:	f7fe fb68 	bl	8007ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009428 <vPortFree+0xc0>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4413      	add	r3, r2
 8009402:	4a09      	ldr	r2, [pc, #36]	@ (8009428 <vPortFree+0xc0>)
 8009404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009406:	6938      	ldr	r0, [r7, #16]
 8009408:	f000 f874 	bl	80094f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800940c:	4b07      	ldr	r3, [pc, #28]	@ (800942c <vPortFree+0xc4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	4a06      	ldr	r2, [pc, #24]	@ (800942c <vPortFree+0xc4>)
 8009414:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009416:	f7fe fb65 	bl	8007ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800941a:	bf00      	nop
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20004b94 	.word	0x20004b94
 8009428:	20004b84 	.word	0x20004b84
 800942c:	20004b90 	.word	0x20004b90

08009430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009436:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800943a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800943c:	4b27      	ldr	r3, [pc, #156]	@ (80094dc <prvHeapInit+0xac>)
 800943e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f003 0307 	and.w	r3, r3, #7
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00c      	beq.n	8009464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3307      	adds	r3, #7
 800944e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0307 	bic.w	r3, r3, #7
 8009456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	4a1f      	ldr	r2, [pc, #124]	@ (80094dc <prvHeapInit+0xac>)
 8009460:	4413      	add	r3, r2
 8009462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009468:	4a1d      	ldr	r2, [pc, #116]	@ (80094e0 <prvHeapInit+0xb0>)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800946e:	4b1c      	ldr	r3, [pc, #112]	@ (80094e0 <prvHeapInit+0xb0>)
 8009470:	2200      	movs	r2, #0
 8009472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	4413      	add	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800947c:	2208      	movs	r2, #8
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f023 0307 	bic.w	r3, r3, #7
 800948a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a15      	ldr	r2, [pc, #84]	@ (80094e4 <prvHeapInit+0xb4>)
 8009490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009492:	4b14      	ldr	r3, [pc, #80]	@ (80094e4 <prvHeapInit+0xb4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2200      	movs	r2, #0
 8009498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800949a:	4b12      	ldr	r3, [pc, #72]	@ (80094e4 <prvHeapInit+0xb4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2200      	movs	r2, #0
 80094a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	1ad2      	subs	r2, r2, r3
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094b0:	4b0c      	ldr	r3, [pc, #48]	@ (80094e4 <prvHeapInit+0xb4>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	4a0a      	ldr	r2, [pc, #40]	@ (80094e8 <prvHeapInit+0xb8>)
 80094be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	4a09      	ldr	r2, [pc, #36]	@ (80094ec <prvHeapInit+0xbc>)
 80094c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094c8:	4b09      	ldr	r3, [pc, #36]	@ (80094f0 <prvHeapInit+0xc0>)
 80094ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80094ce:	601a      	str	r2, [r3, #0]
}
 80094d0:	bf00      	nop
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000f78 	.word	0x20000f78
 80094e0:	20004b78 	.word	0x20004b78
 80094e4:	20004b80 	.word	0x20004b80
 80094e8:	20004b88 	.word	0x20004b88
 80094ec:	20004b84 	.word	0x20004b84
 80094f0:	20004b94 	.word	0x20004b94

080094f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094fc:	4b28      	ldr	r3, [pc, #160]	@ (80095a0 <prvInsertBlockIntoFreeList+0xac>)
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	e002      	b.n	8009508 <prvInsertBlockIntoFreeList+0x14>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	429a      	cmp	r2, r3
 8009510:	d8f7      	bhi.n	8009502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	4413      	add	r3, r2
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	429a      	cmp	r2, r3
 8009522:	d108      	bne.n	8009536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	441a      	add	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	441a      	add	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d118      	bne.n	800957c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	4b15      	ldr	r3, [pc, #84]	@ (80095a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	429a      	cmp	r2, r3
 8009554:	d00d      	beq.n	8009572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	441a      	add	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	e008      	b.n	8009584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009572:	4b0c      	ldr	r3, [pc, #48]	@ (80095a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	601a      	str	r2, [r3, #0]
 800957a:	e003      	b.n	8009584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d002      	beq.n	8009592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009592:	bf00      	nop
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	20004b78 	.word	0x20004b78
 80095a4:	20004b80 	.word	0x20004b80

080095a8 <std>:
 80095a8:	2300      	movs	r3, #0
 80095aa:	b510      	push	{r4, lr}
 80095ac:	4604      	mov	r4, r0
 80095ae:	e9c0 3300 	strd	r3, r3, [r0]
 80095b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095b6:	6083      	str	r3, [r0, #8]
 80095b8:	8181      	strh	r1, [r0, #12]
 80095ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80095bc:	81c2      	strh	r2, [r0, #14]
 80095be:	6183      	str	r3, [r0, #24]
 80095c0:	4619      	mov	r1, r3
 80095c2:	2208      	movs	r2, #8
 80095c4:	305c      	adds	r0, #92	@ 0x5c
 80095c6:	f000 fa1d 	bl	8009a04 <memset>
 80095ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009600 <std+0x58>)
 80095cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80095ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009604 <std+0x5c>)
 80095d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009608 <std+0x60>)
 80095d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095d6:	4b0d      	ldr	r3, [pc, #52]	@ (800960c <std+0x64>)
 80095d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80095da:	4b0d      	ldr	r3, [pc, #52]	@ (8009610 <std+0x68>)
 80095dc:	6224      	str	r4, [r4, #32]
 80095de:	429c      	cmp	r4, r3
 80095e0:	d006      	beq.n	80095f0 <std+0x48>
 80095e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095e6:	4294      	cmp	r4, r2
 80095e8:	d002      	beq.n	80095f0 <std+0x48>
 80095ea:	33d0      	adds	r3, #208	@ 0xd0
 80095ec:	429c      	cmp	r4, r3
 80095ee:	d105      	bne.n	80095fc <std+0x54>
 80095f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f8:	f000 ba7c 	b.w	8009af4 <__retarget_lock_init_recursive>
 80095fc:	bd10      	pop	{r4, pc}
 80095fe:	bf00      	nop
 8009600:	08009855 	.word	0x08009855
 8009604:	08009877 	.word	0x08009877
 8009608:	080098af 	.word	0x080098af
 800960c:	080098d3 	.word	0x080098d3
 8009610:	20004b98 	.word	0x20004b98

08009614 <stdio_exit_handler>:
 8009614:	4a02      	ldr	r2, [pc, #8]	@ (8009620 <stdio_exit_handler+0xc>)
 8009616:	4903      	ldr	r1, [pc, #12]	@ (8009624 <stdio_exit_handler+0x10>)
 8009618:	4803      	ldr	r0, [pc, #12]	@ (8009628 <stdio_exit_handler+0x14>)
 800961a:	f000 b869 	b.w	80096f0 <_fwalk_sglue>
 800961e:	bf00      	nop
 8009620:	20000048 	.word	0x20000048
 8009624:	0800a3d9 	.word	0x0800a3d9
 8009628:	20000058 	.word	0x20000058

0800962c <cleanup_stdio>:
 800962c:	6841      	ldr	r1, [r0, #4]
 800962e:	4b0c      	ldr	r3, [pc, #48]	@ (8009660 <cleanup_stdio+0x34>)
 8009630:	4299      	cmp	r1, r3
 8009632:	b510      	push	{r4, lr}
 8009634:	4604      	mov	r4, r0
 8009636:	d001      	beq.n	800963c <cleanup_stdio+0x10>
 8009638:	f000 fece 	bl	800a3d8 <_fflush_r>
 800963c:	68a1      	ldr	r1, [r4, #8]
 800963e:	4b09      	ldr	r3, [pc, #36]	@ (8009664 <cleanup_stdio+0x38>)
 8009640:	4299      	cmp	r1, r3
 8009642:	d002      	beq.n	800964a <cleanup_stdio+0x1e>
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fec7 	bl	800a3d8 <_fflush_r>
 800964a:	68e1      	ldr	r1, [r4, #12]
 800964c:	4b06      	ldr	r3, [pc, #24]	@ (8009668 <cleanup_stdio+0x3c>)
 800964e:	4299      	cmp	r1, r3
 8009650:	d004      	beq.n	800965c <cleanup_stdio+0x30>
 8009652:	4620      	mov	r0, r4
 8009654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009658:	f000 bebe 	b.w	800a3d8 <_fflush_r>
 800965c:	bd10      	pop	{r4, pc}
 800965e:	bf00      	nop
 8009660:	20004b98 	.word	0x20004b98
 8009664:	20004c00 	.word	0x20004c00
 8009668:	20004c68 	.word	0x20004c68

0800966c <global_stdio_init.part.0>:
 800966c:	b510      	push	{r4, lr}
 800966e:	4b0b      	ldr	r3, [pc, #44]	@ (800969c <global_stdio_init.part.0+0x30>)
 8009670:	4c0b      	ldr	r4, [pc, #44]	@ (80096a0 <global_stdio_init.part.0+0x34>)
 8009672:	4a0c      	ldr	r2, [pc, #48]	@ (80096a4 <global_stdio_init.part.0+0x38>)
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	4620      	mov	r0, r4
 8009678:	2200      	movs	r2, #0
 800967a:	2104      	movs	r1, #4
 800967c:	f7ff ff94 	bl	80095a8 <std>
 8009680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009684:	2201      	movs	r2, #1
 8009686:	2109      	movs	r1, #9
 8009688:	f7ff ff8e 	bl	80095a8 <std>
 800968c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009690:	2202      	movs	r2, #2
 8009692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009696:	2112      	movs	r1, #18
 8009698:	f7ff bf86 	b.w	80095a8 <std>
 800969c:	20004cd0 	.word	0x20004cd0
 80096a0:	20004b98 	.word	0x20004b98
 80096a4:	08009615 	.word	0x08009615

080096a8 <__sfp_lock_acquire>:
 80096a8:	4801      	ldr	r0, [pc, #4]	@ (80096b0 <__sfp_lock_acquire+0x8>)
 80096aa:	f000 ba24 	b.w	8009af6 <__retarget_lock_acquire_recursive>
 80096ae:	bf00      	nop
 80096b0:	20004cd9 	.word	0x20004cd9

080096b4 <__sfp_lock_release>:
 80096b4:	4801      	ldr	r0, [pc, #4]	@ (80096bc <__sfp_lock_release+0x8>)
 80096b6:	f000 ba1f 	b.w	8009af8 <__retarget_lock_release_recursive>
 80096ba:	bf00      	nop
 80096bc:	20004cd9 	.word	0x20004cd9

080096c0 <__sinit>:
 80096c0:	b510      	push	{r4, lr}
 80096c2:	4604      	mov	r4, r0
 80096c4:	f7ff fff0 	bl	80096a8 <__sfp_lock_acquire>
 80096c8:	6a23      	ldr	r3, [r4, #32]
 80096ca:	b11b      	cbz	r3, 80096d4 <__sinit+0x14>
 80096cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d0:	f7ff bff0 	b.w	80096b4 <__sfp_lock_release>
 80096d4:	4b04      	ldr	r3, [pc, #16]	@ (80096e8 <__sinit+0x28>)
 80096d6:	6223      	str	r3, [r4, #32]
 80096d8:	4b04      	ldr	r3, [pc, #16]	@ (80096ec <__sinit+0x2c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1f5      	bne.n	80096cc <__sinit+0xc>
 80096e0:	f7ff ffc4 	bl	800966c <global_stdio_init.part.0>
 80096e4:	e7f2      	b.n	80096cc <__sinit+0xc>
 80096e6:	bf00      	nop
 80096e8:	0800962d 	.word	0x0800962d
 80096ec:	20004cd0 	.word	0x20004cd0

080096f0 <_fwalk_sglue>:
 80096f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f4:	4607      	mov	r7, r0
 80096f6:	4688      	mov	r8, r1
 80096f8:	4614      	mov	r4, r2
 80096fa:	2600      	movs	r6, #0
 80096fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009700:	f1b9 0901 	subs.w	r9, r9, #1
 8009704:	d505      	bpl.n	8009712 <_fwalk_sglue+0x22>
 8009706:	6824      	ldr	r4, [r4, #0]
 8009708:	2c00      	cmp	r4, #0
 800970a:	d1f7      	bne.n	80096fc <_fwalk_sglue+0xc>
 800970c:	4630      	mov	r0, r6
 800970e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009712:	89ab      	ldrh	r3, [r5, #12]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d907      	bls.n	8009728 <_fwalk_sglue+0x38>
 8009718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800971c:	3301      	adds	r3, #1
 800971e:	d003      	beq.n	8009728 <_fwalk_sglue+0x38>
 8009720:	4629      	mov	r1, r5
 8009722:	4638      	mov	r0, r7
 8009724:	47c0      	blx	r8
 8009726:	4306      	orrs	r6, r0
 8009728:	3568      	adds	r5, #104	@ 0x68
 800972a:	e7e9      	b.n	8009700 <_fwalk_sglue+0x10>

0800972c <_puts_r>:
 800972c:	6a03      	ldr	r3, [r0, #32]
 800972e:	b570      	push	{r4, r5, r6, lr}
 8009730:	6884      	ldr	r4, [r0, #8]
 8009732:	4605      	mov	r5, r0
 8009734:	460e      	mov	r6, r1
 8009736:	b90b      	cbnz	r3, 800973c <_puts_r+0x10>
 8009738:	f7ff ffc2 	bl	80096c0 <__sinit>
 800973c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800973e:	07db      	lsls	r3, r3, #31
 8009740:	d405      	bmi.n	800974e <_puts_r+0x22>
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	0598      	lsls	r0, r3, #22
 8009746:	d402      	bmi.n	800974e <_puts_r+0x22>
 8009748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800974a:	f000 f9d4 	bl	8009af6 <__retarget_lock_acquire_recursive>
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	0719      	lsls	r1, r3, #28
 8009752:	d502      	bpl.n	800975a <_puts_r+0x2e>
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d135      	bne.n	80097c6 <_puts_r+0x9a>
 800975a:	4621      	mov	r1, r4
 800975c:	4628      	mov	r0, r5
 800975e:	f000 f8fb 	bl	8009958 <__swsetup_r>
 8009762:	b380      	cbz	r0, 80097c6 <_puts_r+0x9a>
 8009764:	f04f 35ff 	mov.w	r5, #4294967295
 8009768:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800976a:	07da      	lsls	r2, r3, #31
 800976c:	d405      	bmi.n	800977a <_puts_r+0x4e>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	059b      	lsls	r3, r3, #22
 8009772:	d402      	bmi.n	800977a <_puts_r+0x4e>
 8009774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009776:	f000 f9bf 	bl	8009af8 <__retarget_lock_release_recursive>
 800977a:	4628      	mov	r0, r5
 800977c:	bd70      	pop	{r4, r5, r6, pc}
 800977e:	2b00      	cmp	r3, #0
 8009780:	da04      	bge.n	800978c <_puts_r+0x60>
 8009782:	69a2      	ldr	r2, [r4, #24]
 8009784:	429a      	cmp	r2, r3
 8009786:	dc17      	bgt.n	80097b8 <_puts_r+0x8c>
 8009788:	290a      	cmp	r1, #10
 800978a:	d015      	beq.n	80097b8 <_puts_r+0x8c>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	6022      	str	r2, [r4, #0]
 8009792:	7019      	strb	r1, [r3, #0]
 8009794:	68a3      	ldr	r3, [r4, #8]
 8009796:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800979a:	3b01      	subs	r3, #1
 800979c:	60a3      	str	r3, [r4, #8]
 800979e:	2900      	cmp	r1, #0
 80097a0:	d1ed      	bne.n	800977e <_puts_r+0x52>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	da11      	bge.n	80097ca <_puts_r+0x9e>
 80097a6:	4622      	mov	r2, r4
 80097a8:	210a      	movs	r1, #10
 80097aa:	4628      	mov	r0, r5
 80097ac:	f000 f895 	bl	80098da <__swbuf_r>
 80097b0:	3001      	adds	r0, #1
 80097b2:	d0d7      	beq.n	8009764 <_puts_r+0x38>
 80097b4:	250a      	movs	r5, #10
 80097b6:	e7d7      	b.n	8009768 <_puts_r+0x3c>
 80097b8:	4622      	mov	r2, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	f000 f88d 	bl	80098da <__swbuf_r>
 80097c0:	3001      	adds	r0, #1
 80097c2:	d1e7      	bne.n	8009794 <_puts_r+0x68>
 80097c4:	e7ce      	b.n	8009764 <_puts_r+0x38>
 80097c6:	3e01      	subs	r6, #1
 80097c8:	e7e4      	b.n	8009794 <_puts_r+0x68>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	1c5a      	adds	r2, r3, #1
 80097ce:	6022      	str	r2, [r4, #0]
 80097d0:	220a      	movs	r2, #10
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	e7ee      	b.n	80097b4 <_puts_r+0x88>
	...

080097d8 <puts>:
 80097d8:	4b02      	ldr	r3, [pc, #8]	@ (80097e4 <puts+0xc>)
 80097da:	4601      	mov	r1, r0
 80097dc:	6818      	ldr	r0, [r3, #0]
 80097de:	f7ff bfa5 	b.w	800972c <_puts_r>
 80097e2:	bf00      	nop
 80097e4:	20000054 	.word	0x20000054

080097e8 <sniprintf>:
 80097e8:	b40c      	push	{r2, r3}
 80097ea:	b530      	push	{r4, r5, lr}
 80097ec:	4b18      	ldr	r3, [pc, #96]	@ (8009850 <sniprintf+0x68>)
 80097ee:	1e0c      	subs	r4, r1, #0
 80097f0:	681d      	ldr	r5, [r3, #0]
 80097f2:	b09d      	sub	sp, #116	@ 0x74
 80097f4:	da08      	bge.n	8009808 <sniprintf+0x20>
 80097f6:	238b      	movs	r3, #139	@ 0x8b
 80097f8:	602b      	str	r3, [r5, #0]
 80097fa:	f04f 30ff 	mov.w	r0, #4294967295
 80097fe:	b01d      	add	sp, #116	@ 0x74
 8009800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009804:	b002      	add	sp, #8
 8009806:	4770      	bx	lr
 8009808:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800980c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009816:	bf14      	ite	ne
 8009818:	f104 33ff 	addne.w	r3, r4, #4294967295
 800981c:	4623      	moveq	r3, r4
 800981e:	9304      	str	r3, [sp, #16]
 8009820:	9307      	str	r3, [sp, #28]
 8009822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009826:	9002      	str	r0, [sp, #8]
 8009828:	9006      	str	r0, [sp, #24]
 800982a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800982e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009830:	ab21      	add	r3, sp, #132	@ 0x84
 8009832:	a902      	add	r1, sp, #8
 8009834:	4628      	mov	r0, r5
 8009836:	9301      	str	r3, [sp, #4]
 8009838:	f000 fac2 	bl	8009dc0 <_svfiprintf_r>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	bfbc      	itt	lt
 8009840:	238b      	movlt	r3, #139	@ 0x8b
 8009842:	602b      	strlt	r3, [r5, #0]
 8009844:	2c00      	cmp	r4, #0
 8009846:	d0da      	beq.n	80097fe <sniprintf+0x16>
 8009848:	9b02      	ldr	r3, [sp, #8]
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	e7d6      	b.n	80097fe <sniprintf+0x16>
 8009850:	20000054 	.word	0x20000054

08009854 <__sread>:
 8009854:	b510      	push	{r4, lr}
 8009856:	460c      	mov	r4, r1
 8009858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985c:	f000 f8fc 	bl	8009a58 <_read_r>
 8009860:	2800      	cmp	r0, #0
 8009862:	bfab      	itete	ge
 8009864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009866:	89a3      	ldrhlt	r3, [r4, #12]
 8009868:	181b      	addge	r3, r3, r0
 800986a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800986e:	bfac      	ite	ge
 8009870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009872:	81a3      	strhlt	r3, [r4, #12]
 8009874:	bd10      	pop	{r4, pc}

08009876 <__swrite>:
 8009876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987a:	461f      	mov	r7, r3
 800987c:	898b      	ldrh	r3, [r1, #12]
 800987e:	05db      	lsls	r3, r3, #23
 8009880:	4605      	mov	r5, r0
 8009882:	460c      	mov	r4, r1
 8009884:	4616      	mov	r6, r2
 8009886:	d505      	bpl.n	8009894 <__swrite+0x1e>
 8009888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800988c:	2302      	movs	r3, #2
 800988e:	2200      	movs	r2, #0
 8009890:	f000 f8d0 	bl	8009a34 <_lseek_r>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800989a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	4632      	mov	r2, r6
 80098a2:	463b      	mov	r3, r7
 80098a4:	4628      	mov	r0, r5
 80098a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098aa:	f000 b8e7 	b.w	8009a7c <_write_r>

080098ae <__sseek>:
 80098ae:	b510      	push	{r4, lr}
 80098b0:	460c      	mov	r4, r1
 80098b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b6:	f000 f8bd 	bl	8009a34 <_lseek_r>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	bf15      	itete	ne
 80098c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80098c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80098c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80098ca:	81a3      	strheq	r3, [r4, #12]
 80098cc:	bf18      	it	ne
 80098ce:	81a3      	strhne	r3, [r4, #12]
 80098d0:	bd10      	pop	{r4, pc}

080098d2 <__sclose>:
 80098d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d6:	f000 b89d 	b.w	8009a14 <_close_r>

080098da <__swbuf_r>:
 80098da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098dc:	460e      	mov	r6, r1
 80098de:	4614      	mov	r4, r2
 80098e0:	4605      	mov	r5, r0
 80098e2:	b118      	cbz	r0, 80098ec <__swbuf_r+0x12>
 80098e4:	6a03      	ldr	r3, [r0, #32]
 80098e6:	b90b      	cbnz	r3, 80098ec <__swbuf_r+0x12>
 80098e8:	f7ff feea 	bl	80096c0 <__sinit>
 80098ec:	69a3      	ldr	r3, [r4, #24]
 80098ee:	60a3      	str	r3, [r4, #8]
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	071a      	lsls	r2, r3, #28
 80098f4:	d501      	bpl.n	80098fa <__swbuf_r+0x20>
 80098f6:	6923      	ldr	r3, [r4, #16]
 80098f8:	b943      	cbnz	r3, 800990c <__swbuf_r+0x32>
 80098fa:	4621      	mov	r1, r4
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 f82b 	bl	8009958 <__swsetup_r>
 8009902:	b118      	cbz	r0, 800990c <__swbuf_r+0x32>
 8009904:	f04f 37ff 	mov.w	r7, #4294967295
 8009908:	4638      	mov	r0, r7
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	6922      	ldr	r2, [r4, #16]
 8009910:	1a98      	subs	r0, r3, r2
 8009912:	6963      	ldr	r3, [r4, #20]
 8009914:	b2f6      	uxtb	r6, r6
 8009916:	4283      	cmp	r3, r0
 8009918:	4637      	mov	r7, r6
 800991a:	dc05      	bgt.n	8009928 <__swbuf_r+0x4e>
 800991c:	4621      	mov	r1, r4
 800991e:	4628      	mov	r0, r5
 8009920:	f000 fd5a 	bl	800a3d8 <_fflush_r>
 8009924:	2800      	cmp	r0, #0
 8009926:	d1ed      	bne.n	8009904 <__swbuf_r+0x2a>
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	3b01      	subs	r3, #1
 800992c:	60a3      	str	r3, [r4, #8]
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	6022      	str	r2, [r4, #0]
 8009934:	701e      	strb	r6, [r3, #0]
 8009936:	6962      	ldr	r2, [r4, #20]
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	429a      	cmp	r2, r3
 800993c:	d004      	beq.n	8009948 <__swbuf_r+0x6e>
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	07db      	lsls	r3, r3, #31
 8009942:	d5e1      	bpl.n	8009908 <__swbuf_r+0x2e>
 8009944:	2e0a      	cmp	r6, #10
 8009946:	d1df      	bne.n	8009908 <__swbuf_r+0x2e>
 8009948:	4621      	mov	r1, r4
 800994a:	4628      	mov	r0, r5
 800994c:	f000 fd44 	bl	800a3d8 <_fflush_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	d0d9      	beq.n	8009908 <__swbuf_r+0x2e>
 8009954:	e7d6      	b.n	8009904 <__swbuf_r+0x2a>
	...

08009958 <__swsetup_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4b29      	ldr	r3, [pc, #164]	@ (8009a00 <__swsetup_r+0xa8>)
 800995c:	4605      	mov	r5, r0
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	460c      	mov	r4, r1
 8009962:	b118      	cbz	r0, 800996c <__swsetup_r+0x14>
 8009964:	6a03      	ldr	r3, [r0, #32]
 8009966:	b90b      	cbnz	r3, 800996c <__swsetup_r+0x14>
 8009968:	f7ff feaa 	bl	80096c0 <__sinit>
 800996c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009970:	0719      	lsls	r1, r3, #28
 8009972:	d422      	bmi.n	80099ba <__swsetup_r+0x62>
 8009974:	06da      	lsls	r2, r3, #27
 8009976:	d407      	bmi.n	8009988 <__swsetup_r+0x30>
 8009978:	2209      	movs	r2, #9
 800997a:	602a      	str	r2, [r5, #0]
 800997c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009980:	81a3      	strh	r3, [r4, #12]
 8009982:	f04f 30ff 	mov.w	r0, #4294967295
 8009986:	e033      	b.n	80099f0 <__swsetup_r+0x98>
 8009988:	0758      	lsls	r0, r3, #29
 800998a:	d512      	bpl.n	80099b2 <__swsetup_r+0x5a>
 800998c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800998e:	b141      	cbz	r1, 80099a2 <__swsetup_r+0x4a>
 8009990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009994:	4299      	cmp	r1, r3
 8009996:	d002      	beq.n	800999e <__swsetup_r+0x46>
 8009998:	4628      	mov	r0, r5
 800999a:	f000 f8bd 	bl	8009b18 <_free_r>
 800999e:	2300      	movs	r3, #0
 80099a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	2300      	movs	r3, #0
 80099ac:	6063      	str	r3, [r4, #4]
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f043 0308 	orr.w	r3, r3, #8
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	6923      	ldr	r3, [r4, #16]
 80099bc:	b94b      	cbnz	r3, 80099d2 <__swsetup_r+0x7a>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80099c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099c8:	d003      	beq.n	80099d2 <__swsetup_r+0x7a>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4628      	mov	r0, r5
 80099ce:	f000 fd51 	bl	800a474 <__smakebuf_r>
 80099d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d6:	f013 0201 	ands.w	r2, r3, #1
 80099da:	d00a      	beq.n	80099f2 <__swsetup_r+0x9a>
 80099dc:	2200      	movs	r2, #0
 80099de:	60a2      	str	r2, [r4, #8]
 80099e0:	6962      	ldr	r2, [r4, #20]
 80099e2:	4252      	negs	r2, r2
 80099e4:	61a2      	str	r2, [r4, #24]
 80099e6:	6922      	ldr	r2, [r4, #16]
 80099e8:	b942      	cbnz	r2, 80099fc <__swsetup_r+0xa4>
 80099ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80099ee:	d1c5      	bne.n	800997c <__swsetup_r+0x24>
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
 80099f2:	0799      	lsls	r1, r3, #30
 80099f4:	bf58      	it	pl
 80099f6:	6962      	ldrpl	r2, [r4, #20]
 80099f8:	60a2      	str	r2, [r4, #8]
 80099fa:	e7f4      	b.n	80099e6 <__swsetup_r+0x8e>
 80099fc:	2000      	movs	r0, #0
 80099fe:	e7f7      	b.n	80099f0 <__swsetup_r+0x98>
 8009a00:	20000054 	.word	0x20000054

08009a04 <memset>:
 8009a04:	4402      	add	r2, r0
 8009a06:	4603      	mov	r3, r0
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d100      	bne.n	8009a0e <memset+0xa>
 8009a0c:	4770      	bx	lr
 8009a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a12:	e7f9      	b.n	8009a08 <memset+0x4>

08009a14 <_close_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d06      	ldr	r5, [pc, #24]	@ (8009a30 <_close_r+0x1c>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	f7f7 fdbb 	bl	800159a <_close>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_close_r+0x1a>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_close_r+0x1a>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	20004cd4 	.word	0x20004cd4

08009a34 <_lseek_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d07      	ldr	r5, [pc, #28]	@ (8009a54 <_lseek_r+0x20>)
 8009a38:	4604      	mov	r4, r0
 8009a3a:	4608      	mov	r0, r1
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	2200      	movs	r2, #0
 8009a40:	602a      	str	r2, [r5, #0]
 8009a42:	461a      	mov	r2, r3
 8009a44:	f7f7 fdd0 	bl	80015e8 <_lseek>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_lseek_r+0x1e>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_lseek_r+0x1e>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	20004cd4 	.word	0x20004cd4

08009a58 <_read_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	@ (8009a78 <_read_r+0x20>)
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	602a      	str	r2, [r5, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	f7f7 fd5e 	bl	8001528 <_read>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_read_r+0x1e>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_read_r+0x1e>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	20004cd4 	.word	0x20004cd4

08009a7c <_write_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	@ (8009a9c <_write_r+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	4608      	mov	r0, r1
 8009a84:	4611      	mov	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f7f7 fd69 	bl	8001562 <_write>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_write_r+0x1e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_write_r+0x1e>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20004cd4 	.word	0x20004cd4

08009aa0 <__errno>:
 8009aa0:	4b01      	ldr	r3, [pc, #4]	@ (8009aa8 <__errno+0x8>)
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	20000054 	.word	0x20000054

08009aac <__libc_init_array>:
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	4d0d      	ldr	r5, [pc, #52]	@ (8009ae4 <__libc_init_array+0x38>)
 8009ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8009ae8 <__libc_init_array+0x3c>)
 8009ab2:	1b64      	subs	r4, r4, r5
 8009ab4:	10a4      	asrs	r4, r4, #2
 8009ab6:	2600      	movs	r6, #0
 8009ab8:	42a6      	cmp	r6, r4
 8009aba:	d109      	bne.n	8009ad0 <__libc_init_array+0x24>
 8009abc:	4d0b      	ldr	r5, [pc, #44]	@ (8009aec <__libc_init_array+0x40>)
 8009abe:	4c0c      	ldr	r4, [pc, #48]	@ (8009af0 <__libc_init_array+0x44>)
 8009ac0:	f000 fd96 	bl	800a5f0 <_init>
 8009ac4:	1b64      	subs	r4, r4, r5
 8009ac6:	10a4      	asrs	r4, r4, #2
 8009ac8:	2600      	movs	r6, #0
 8009aca:	42a6      	cmp	r6, r4
 8009acc:	d105      	bne.n	8009ada <__libc_init_array+0x2e>
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
 8009ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad4:	4798      	blx	r3
 8009ad6:	3601      	adds	r6, #1
 8009ad8:	e7ee      	b.n	8009ab8 <__libc_init_array+0xc>
 8009ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ade:	4798      	blx	r3
 8009ae0:	3601      	adds	r6, #1
 8009ae2:	e7f2      	b.n	8009aca <__libc_init_array+0x1e>
 8009ae4:	0800a708 	.word	0x0800a708
 8009ae8:	0800a708 	.word	0x0800a708
 8009aec:	0800a708 	.word	0x0800a708
 8009af0:	0800a70c 	.word	0x0800a70c

08009af4 <__retarget_lock_init_recursive>:
 8009af4:	4770      	bx	lr

08009af6 <__retarget_lock_acquire_recursive>:
 8009af6:	4770      	bx	lr

08009af8 <__retarget_lock_release_recursive>:
 8009af8:	4770      	bx	lr

08009afa <memcpy>:
 8009afa:	440a      	add	r2, r1
 8009afc:	4291      	cmp	r1, r2
 8009afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b02:	d100      	bne.n	8009b06 <memcpy+0xc>
 8009b04:	4770      	bx	lr
 8009b06:	b510      	push	{r4, lr}
 8009b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b10:	4291      	cmp	r1, r2
 8009b12:	d1f9      	bne.n	8009b08 <memcpy+0xe>
 8009b14:	bd10      	pop	{r4, pc}
	...

08009b18 <_free_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	2900      	cmp	r1, #0
 8009b1e:	d041      	beq.n	8009ba4 <_free_r+0x8c>
 8009b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b24:	1f0c      	subs	r4, r1, #4
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	bfb8      	it	lt
 8009b2a:	18e4      	addlt	r4, r4, r3
 8009b2c:	f000 f8e0 	bl	8009cf0 <__malloc_lock>
 8009b30:	4a1d      	ldr	r2, [pc, #116]	@ (8009ba8 <_free_r+0x90>)
 8009b32:	6813      	ldr	r3, [r2, #0]
 8009b34:	b933      	cbnz	r3, 8009b44 <_free_r+0x2c>
 8009b36:	6063      	str	r3, [r4, #4]
 8009b38:	6014      	str	r4, [r2, #0]
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b40:	f000 b8dc 	b.w	8009cfc <__malloc_unlock>
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	d908      	bls.n	8009b5a <_free_r+0x42>
 8009b48:	6820      	ldr	r0, [r4, #0]
 8009b4a:	1821      	adds	r1, r4, r0
 8009b4c:	428b      	cmp	r3, r1
 8009b4e:	bf01      	itttt	eq
 8009b50:	6819      	ldreq	r1, [r3, #0]
 8009b52:	685b      	ldreq	r3, [r3, #4]
 8009b54:	1809      	addeq	r1, r1, r0
 8009b56:	6021      	streq	r1, [r4, #0]
 8009b58:	e7ed      	b.n	8009b36 <_free_r+0x1e>
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	b10b      	cbz	r3, 8009b64 <_free_r+0x4c>
 8009b60:	42a3      	cmp	r3, r4
 8009b62:	d9fa      	bls.n	8009b5a <_free_r+0x42>
 8009b64:	6811      	ldr	r1, [r2, #0]
 8009b66:	1850      	adds	r0, r2, r1
 8009b68:	42a0      	cmp	r0, r4
 8009b6a:	d10b      	bne.n	8009b84 <_free_r+0x6c>
 8009b6c:	6820      	ldr	r0, [r4, #0]
 8009b6e:	4401      	add	r1, r0
 8009b70:	1850      	adds	r0, r2, r1
 8009b72:	4283      	cmp	r3, r0
 8009b74:	6011      	str	r1, [r2, #0]
 8009b76:	d1e0      	bne.n	8009b3a <_free_r+0x22>
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	6053      	str	r3, [r2, #4]
 8009b7e:	4408      	add	r0, r1
 8009b80:	6010      	str	r0, [r2, #0]
 8009b82:	e7da      	b.n	8009b3a <_free_r+0x22>
 8009b84:	d902      	bls.n	8009b8c <_free_r+0x74>
 8009b86:	230c      	movs	r3, #12
 8009b88:	602b      	str	r3, [r5, #0]
 8009b8a:	e7d6      	b.n	8009b3a <_free_r+0x22>
 8009b8c:	6820      	ldr	r0, [r4, #0]
 8009b8e:	1821      	adds	r1, r4, r0
 8009b90:	428b      	cmp	r3, r1
 8009b92:	bf04      	itt	eq
 8009b94:	6819      	ldreq	r1, [r3, #0]
 8009b96:	685b      	ldreq	r3, [r3, #4]
 8009b98:	6063      	str	r3, [r4, #4]
 8009b9a:	bf04      	itt	eq
 8009b9c:	1809      	addeq	r1, r1, r0
 8009b9e:	6021      	streq	r1, [r4, #0]
 8009ba0:	6054      	str	r4, [r2, #4]
 8009ba2:	e7ca      	b.n	8009b3a <_free_r+0x22>
 8009ba4:	bd38      	pop	{r3, r4, r5, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20004ce0 	.word	0x20004ce0

08009bac <sbrk_aligned>:
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	4e0f      	ldr	r6, [pc, #60]	@ (8009bec <sbrk_aligned+0x40>)
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	6831      	ldr	r1, [r6, #0]
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	b911      	cbnz	r1, 8009bbe <sbrk_aligned+0x12>
 8009bb8:	f000 fcd4 	bl	800a564 <_sbrk_r>
 8009bbc:	6030      	str	r0, [r6, #0]
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	f000 fccf 	bl	800a564 <_sbrk_r>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	d103      	bne.n	8009bd2 <sbrk_aligned+0x26>
 8009bca:	f04f 34ff 	mov.w	r4, #4294967295
 8009bce:	4620      	mov	r0, r4
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
 8009bd2:	1cc4      	adds	r4, r0, #3
 8009bd4:	f024 0403 	bic.w	r4, r4, #3
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d0f8      	beq.n	8009bce <sbrk_aligned+0x22>
 8009bdc:	1a21      	subs	r1, r4, r0
 8009bde:	4628      	mov	r0, r5
 8009be0:	f000 fcc0 	bl	800a564 <_sbrk_r>
 8009be4:	3001      	adds	r0, #1
 8009be6:	d1f2      	bne.n	8009bce <sbrk_aligned+0x22>
 8009be8:	e7ef      	b.n	8009bca <sbrk_aligned+0x1e>
 8009bea:	bf00      	nop
 8009bec:	20004cdc 	.word	0x20004cdc

08009bf0 <_malloc_r>:
 8009bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf4:	1ccd      	adds	r5, r1, #3
 8009bf6:	f025 0503 	bic.w	r5, r5, #3
 8009bfa:	3508      	adds	r5, #8
 8009bfc:	2d0c      	cmp	r5, #12
 8009bfe:	bf38      	it	cc
 8009c00:	250c      	movcc	r5, #12
 8009c02:	2d00      	cmp	r5, #0
 8009c04:	4606      	mov	r6, r0
 8009c06:	db01      	blt.n	8009c0c <_malloc_r+0x1c>
 8009c08:	42a9      	cmp	r1, r5
 8009c0a:	d904      	bls.n	8009c16 <_malloc_r+0x26>
 8009c0c:	230c      	movs	r3, #12
 8009c0e:	6033      	str	r3, [r6, #0]
 8009c10:	2000      	movs	r0, #0
 8009c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cec <_malloc_r+0xfc>
 8009c1a:	f000 f869 	bl	8009cf0 <__malloc_lock>
 8009c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c22:	461c      	mov	r4, r3
 8009c24:	bb44      	cbnz	r4, 8009c78 <_malloc_r+0x88>
 8009c26:	4629      	mov	r1, r5
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff ffbf 	bl	8009bac <sbrk_aligned>
 8009c2e:	1c43      	adds	r3, r0, #1
 8009c30:	4604      	mov	r4, r0
 8009c32:	d158      	bne.n	8009ce6 <_malloc_r+0xf6>
 8009c34:	f8d8 4000 	ldr.w	r4, [r8]
 8009c38:	4627      	mov	r7, r4
 8009c3a:	2f00      	cmp	r7, #0
 8009c3c:	d143      	bne.n	8009cc6 <_malloc_r+0xd6>
 8009c3e:	2c00      	cmp	r4, #0
 8009c40:	d04b      	beq.n	8009cda <_malloc_r+0xea>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	4639      	mov	r1, r7
 8009c46:	4630      	mov	r0, r6
 8009c48:	eb04 0903 	add.w	r9, r4, r3
 8009c4c:	f000 fc8a 	bl	800a564 <_sbrk_r>
 8009c50:	4581      	cmp	r9, r0
 8009c52:	d142      	bne.n	8009cda <_malloc_r+0xea>
 8009c54:	6821      	ldr	r1, [r4, #0]
 8009c56:	1a6d      	subs	r5, r5, r1
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7ff ffa6 	bl	8009bac <sbrk_aligned>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d03a      	beq.n	8009cda <_malloc_r+0xea>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	442b      	add	r3, r5
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	bb62      	cbnz	r2, 8009ccc <_malloc_r+0xdc>
 8009c72:	f8c8 7000 	str.w	r7, [r8]
 8009c76:	e00f      	b.n	8009c98 <_malloc_r+0xa8>
 8009c78:	6822      	ldr	r2, [r4, #0]
 8009c7a:	1b52      	subs	r2, r2, r5
 8009c7c:	d420      	bmi.n	8009cc0 <_malloc_r+0xd0>
 8009c7e:	2a0b      	cmp	r2, #11
 8009c80:	d917      	bls.n	8009cb2 <_malloc_r+0xc2>
 8009c82:	1961      	adds	r1, r4, r5
 8009c84:	42a3      	cmp	r3, r4
 8009c86:	6025      	str	r5, [r4, #0]
 8009c88:	bf18      	it	ne
 8009c8a:	6059      	strne	r1, [r3, #4]
 8009c8c:	6863      	ldr	r3, [r4, #4]
 8009c8e:	bf08      	it	eq
 8009c90:	f8c8 1000 	streq.w	r1, [r8]
 8009c94:	5162      	str	r2, [r4, r5]
 8009c96:	604b      	str	r3, [r1, #4]
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 f82f 	bl	8009cfc <__malloc_unlock>
 8009c9e:	f104 000b 	add.w	r0, r4, #11
 8009ca2:	1d23      	adds	r3, r4, #4
 8009ca4:	f020 0007 	bic.w	r0, r0, #7
 8009ca8:	1ac2      	subs	r2, r0, r3
 8009caa:	bf1c      	itt	ne
 8009cac:	1a1b      	subne	r3, r3, r0
 8009cae:	50a3      	strne	r3, [r4, r2]
 8009cb0:	e7af      	b.n	8009c12 <_malloc_r+0x22>
 8009cb2:	6862      	ldr	r2, [r4, #4]
 8009cb4:	42a3      	cmp	r3, r4
 8009cb6:	bf0c      	ite	eq
 8009cb8:	f8c8 2000 	streq.w	r2, [r8]
 8009cbc:	605a      	strne	r2, [r3, #4]
 8009cbe:	e7eb      	b.n	8009c98 <_malloc_r+0xa8>
 8009cc0:	4623      	mov	r3, r4
 8009cc2:	6864      	ldr	r4, [r4, #4]
 8009cc4:	e7ae      	b.n	8009c24 <_malloc_r+0x34>
 8009cc6:	463c      	mov	r4, r7
 8009cc8:	687f      	ldr	r7, [r7, #4]
 8009cca:	e7b6      	b.n	8009c3a <_malloc_r+0x4a>
 8009ccc:	461a      	mov	r2, r3
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	d1fb      	bne.n	8009ccc <_malloc_r+0xdc>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	6053      	str	r3, [r2, #4]
 8009cd8:	e7de      	b.n	8009c98 <_malloc_r+0xa8>
 8009cda:	230c      	movs	r3, #12
 8009cdc:	6033      	str	r3, [r6, #0]
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f000 f80c 	bl	8009cfc <__malloc_unlock>
 8009ce4:	e794      	b.n	8009c10 <_malloc_r+0x20>
 8009ce6:	6005      	str	r5, [r0, #0]
 8009ce8:	e7d6      	b.n	8009c98 <_malloc_r+0xa8>
 8009cea:	bf00      	nop
 8009cec:	20004ce0 	.word	0x20004ce0

08009cf0 <__malloc_lock>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	@ (8009cf8 <__malloc_lock+0x8>)
 8009cf2:	f7ff bf00 	b.w	8009af6 <__retarget_lock_acquire_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	20004cd8 	.word	0x20004cd8

08009cfc <__malloc_unlock>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	@ (8009d04 <__malloc_unlock+0x8>)
 8009cfe:	f7ff befb 	b.w	8009af8 <__retarget_lock_release_recursive>
 8009d02:	bf00      	nop
 8009d04:	20004cd8 	.word	0x20004cd8

08009d08 <__ssputs_r>:
 8009d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d0c:	688e      	ldr	r6, [r1, #8]
 8009d0e:	461f      	mov	r7, r3
 8009d10:	42be      	cmp	r6, r7
 8009d12:	680b      	ldr	r3, [r1, #0]
 8009d14:	4682      	mov	sl, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	4690      	mov	r8, r2
 8009d1a:	d82d      	bhi.n	8009d78 <__ssputs_r+0x70>
 8009d1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d24:	d026      	beq.n	8009d74 <__ssputs_r+0x6c>
 8009d26:	6965      	ldr	r5, [r4, #20]
 8009d28:	6909      	ldr	r1, [r1, #16]
 8009d2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d2e:	eba3 0901 	sub.w	r9, r3, r1
 8009d32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d36:	1c7b      	adds	r3, r7, #1
 8009d38:	444b      	add	r3, r9
 8009d3a:	106d      	asrs	r5, r5, #1
 8009d3c:	429d      	cmp	r5, r3
 8009d3e:	bf38      	it	cc
 8009d40:	461d      	movcc	r5, r3
 8009d42:	0553      	lsls	r3, r2, #21
 8009d44:	d527      	bpl.n	8009d96 <__ssputs_r+0x8e>
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7ff ff52 	bl	8009bf0 <_malloc_r>
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	b360      	cbz	r0, 8009daa <__ssputs_r+0xa2>
 8009d50:	6921      	ldr	r1, [r4, #16]
 8009d52:	464a      	mov	r2, r9
 8009d54:	f7ff fed1 	bl	8009afa <memcpy>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	6126      	str	r6, [r4, #16]
 8009d66:	6165      	str	r5, [r4, #20]
 8009d68:	444e      	add	r6, r9
 8009d6a:	eba5 0509 	sub.w	r5, r5, r9
 8009d6e:	6026      	str	r6, [r4, #0]
 8009d70:	60a5      	str	r5, [r4, #8]
 8009d72:	463e      	mov	r6, r7
 8009d74:	42be      	cmp	r6, r7
 8009d76:	d900      	bls.n	8009d7a <__ssputs_r+0x72>
 8009d78:	463e      	mov	r6, r7
 8009d7a:	6820      	ldr	r0, [r4, #0]
 8009d7c:	4632      	mov	r2, r6
 8009d7e:	4641      	mov	r1, r8
 8009d80:	f000 fbb4 	bl	800a4ec <memmove>
 8009d84:	68a3      	ldr	r3, [r4, #8]
 8009d86:	1b9b      	subs	r3, r3, r6
 8009d88:	60a3      	str	r3, [r4, #8]
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	4433      	add	r3, r6
 8009d8e:	6023      	str	r3, [r4, #0]
 8009d90:	2000      	movs	r0, #0
 8009d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d96:	462a      	mov	r2, r5
 8009d98:	f000 fbf4 	bl	800a584 <_realloc_r>
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d1e0      	bne.n	8009d64 <__ssputs_r+0x5c>
 8009da2:	6921      	ldr	r1, [r4, #16]
 8009da4:	4650      	mov	r0, sl
 8009da6:	f7ff feb7 	bl	8009b18 <_free_r>
 8009daa:	230c      	movs	r3, #12
 8009dac:	f8ca 3000 	str.w	r3, [sl]
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009db6:	81a3      	strh	r3, [r4, #12]
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbc:	e7e9      	b.n	8009d92 <__ssputs_r+0x8a>
	...

08009dc0 <_svfiprintf_r>:
 8009dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	4698      	mov	r8, r3
 8009dc6:	898b      	ldrh	r3, [r1, #12]
 8009dc8:	061b      	lsls	r3, r3, #24
 8009dca:	b09d      	sub	sp, #116	@ 0x74
 8009dcc:	4607      	mov	r7, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	4614      	mov	r4, r2
 8009dd2:	d510      	bpl.n	8009df6 <_svfiprintf_r+0x36>
 8009dd4:	690b      	ldr	r3, [r1, #16]
 8009dd6:	b973      	cbnz	r3, 8009df6 <_svfiprintf_r+0x36>
 8009dd8:	2140      	movs	r1, #64	@ 0x40
 8009dda:	f7ff ff09 	bl	8009bf0 <_malloc_r>
 8009dde:	6028      	str	r0, [r5, #0]
 8009de0:	6128      	str	r0, [r5, #16]
 8009de2:	b930      	cbnz	r0, 8009df2 <_svfiprintf_r+0x32>
 8009de4:	230c      	movs	r3, #12
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dec:	b01d      	add	sp, #116	@ 0x74
 8009dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df2:	2340      	movs	r3, #64	@ 0x40
 8009df4:	616b      	str	r3, [r5, #20]
 8009df6:	2300      	movs	r3, #0
 8009df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dfa:	2320      	movs	r3, #32
 8009dfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e04:	2330      	movs	r3, #48	@ 0x30
 8009e06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009fa4 <_svfiprintf_r+0x1e4>
 8009e0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e0e:	f04f 0901 	mov.w	r9, #1
 8009e12:	4623      	mov	r3, r4
 8009e14:	469a      	mov	sl, r3
 8009e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e1a:	b10a      	cbz	r2, 8009e20 <_svfiprintf_r+0x60>
 8009e1c:	2a25      	cmp	r2, #37	@ 0x25
 8009e1e:	d1f9      	bne.n	8009e14 <_svfiprintf_r+0x54>
 8009e20:	ebba 0b04 	subs.w	fp, sl, r4
 8009e24:	d00b      	beq.n	8009e3e <_svfiprintf_r+0x7e>
 8009e26:	465b      	mov	r3, fp
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	f7ff ff6b 	bl	8009d08 <__ssputs_r>
 8009e32:	3001      	adds	r0, #1
 8009e34:	f000 80a7 	beq.w	8009f86 <_svfiprintf_r+0x1c6>
 8009e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e3a:	445a      	add	r2, fp
 8009e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f000 809f 	beq.w	8009f86 <_svfiprintf_r+0x1c6>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e52:	f10a 0a01 	add.w	sl, sl, #1
 8009e56:	9304      	str	r3, [sp, #16]
 8009e58:	9307      	str	r3, [sp, #28]
 8009e5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e60:	4654      	mov	r4, sl
 8009e62:	2205      	movs	r2, #5
 8009e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e68:	484e      	ldr	r0, [pc, #312]	@ (8009fa4 <_svfiprintf_r+0x1e4>)
 8009e6a:	f7f6 f9d9 	bl	8000220 <memchr>
 8009e6e:	9a04      	ldr	r2, [sp, #16]
 8009e70:	b9d8      	cbnz	r0, 8009eaa <_svfiprintf_r+0xea>
 8009e72:	06d0      	lsls	r0, r2, #27
 8009e74:	bf44      	itt	mi
 8009e76:	2320      	movmi	r3, #32
 8009e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e7c:	0711      	lsls	r1, r2, #28
 8009e7e:	bf44      	itt	mi
 8009e80:	232b      	movmi	r3, #43	@ 0x2b
 8009e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e86:	f89a 3000 	ldrb.w	r3, [sl]
 8009e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e8c:	d015      	beq.n	8009eba <_svfiprintf_r+0xfa>
 8009e8e:	9a07      	ldr	r2, [sp, #28]
 8009e90:	4654      	mov	r4, sl
 8009e92:	2000      	movs	r0, #0
 8009e94:	f04f 0c0a 	mov.w	ip, #10
 8009e98:	4621      	mov	r1, r4
 8009e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e9e:	3b30      	subs	r3, #48	@ 0x30
 8009ea0:	2b09      	cmp	r3, #9
 8009ea2:	d94b      	bls.n	8009f3c <_svfiprintf_r+0x17c>
 8009ea4:	b1b0      	cbz	r0, 8009ed4 <_svfiprintf_r+0x114>
 8009ea6:	9207      	str	r2, [sp, #28]
 8009ea8:	e014      	b.n	8009ed4 <_svfiprintf_r+0x114>
 8009eaa:	eba0 0308 	sub.w	r3, r0, r8
 8009eae:	fa09 f303 	lsl.w	r3, r9, r3
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	9304      	str	r3, [sp, #16]
 8009eb6:	46a2      	mov	sl, r4
 8009eb8:	e7d2      	b.n	8009e60 <_svfiprintf_r+0xa0>
 8009eba:	9b03      	ldr	r3, [sp, #12]
 8009ebc:	1d19      	adds	r1, r3, #4
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	9103      	str	r1, [sp, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	bfbb      	ittet	lt
 8009ec6:	425b      	neglt	r3, r3
 8009ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8009ecc:	9307      	strge	r3, [sp, #28]
 8009ece:	9307      	strlt	r3, [sp, #28]
 8009ed0:	bfb8      	it	lt
 8009ed2:	9204      	strlt	r2, [sp, #16]
 8009ed4:	7823      	ldrb	r3, [r4, #0]
 8009ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ed8:	d10a      	bne.n	8009ef0 <_svfiprintf_r+0x130>
 8009eda:	7863      	ldrb	r3, [r4, #1]
 8009edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ede:	d132      	bne.n	8009f46 <_svfiprintf_r+0x186>
 8009ee0:	9b03      	ldr	r3, [sp, #12]
 8009ee2:	1d1a      	adds	r2, r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	9203      	str	r2, [sp, #12]
 8009ee8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009eec:	3402      	adds	r4, #2
 8009eee:	9305      	str	r3, [sp, #20]
 8009ef0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009fb4 <_svfiprintf_r+0x1f4>
 8009ef4:	7821      	ldrb	r1, [r4, #0]
 8009ef6:	2203      	movs	r2, #3
 8009ef8:	4650      	mov	r0, sl
 8009efa:	f7f6 f991 	bl	8000220 <memchr>
 8009efe:	b138      	cbz	r0, 8009f10 <_svfiprintf_r+0x150>
 8009f00:	9b04      	ldr	r3, [sp, #16]
 8009f02:	eba0 000a 	sub.w	r0, r0, sl
 8009f06:	2240      	movs	r2, #64	@ 0x40
 8009f08:	4082      	lsls	r2, r0
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	3401      	adds	r4, #1
 8009f0e:	9304      	str	r3, [sp, #16]
 8009f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f14:	4824      	ldr	r0, [pc, #144]	@ (8009fa8 <_svfiprintf_r+0x1e8>)
 8009f16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f1a:	2206      	movs	r2, #6
 8009f1c:	f7f6 f980 	bl	8000220 <memchr>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d036      	beq.n	8009f92 <_svfiprintf_r+0x1d2>
 8009f24:	4b21      	ldr	r3, [pc, #132]	@ (8009fac <_svfiprintf_r+0x1ec>)
 8009f26:	bb1b      	cbnz	r3, 8009f70 <_svfiprintf_r+0x1b0>
 8009f28:	9b03      	ldr	r3, [sp, #12]
 8009f2a:	3307      	adds	r3, #7
 8009f2c:	f023 0307 	bic.w	r3, r3, #7
 8009f30:	3308      	adds	r3, #8
 8009f32:	9303      	str	r3, [sp, #12]
 8009f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f36:	4433      	add	r3, r6
 8009f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3a:	e76a      	b.n	8009e12 <_svfiprintf_r+0x52>
 8009f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f40:	460c      	mov	r4, r1
 8009f42:	2001      	movs	r0, #1
 8009f44:	e7a8      	b.n	8009e98 <_svfiprintf_r+0xd8>
 8009f46:	2300      	movs	r3, #0
 8009f48:	3401      	adds	r4, #1
 8009f4a:	9305      	str	r3, [sp, #20]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	f04f 0c0a 	mov.w	ip, #10
 8009f52:	4620      	mov	r0, r4
 8009f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f58:	3a30      	subs	r2, #48	@ 0x30
 8009f5a:	2a09      	cmp	r2, #9
 8009f5c:	d903      	bls.n	8009f66 <_svfiprintf_r+0x1a6>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0c6      	beq.n	8009ef0 <_svfiprintf_r+0x130>
 8009f62:	9105      	str	r1, [sp, #20]
 8009f64:	e7c4      	b.n	8009ef0 <_svfiprintf_r+0x130>
 8009f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e7f0      	b.n	8009f52 <_svfiprintf_r+0x192>
 8009f70:	ab03      	add	r3, sp, #12
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	462a      	mov	r2, r5
 8009f76:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb0 <_svfiprintf_r+0x1f0>)
 8009f78:	a904      	add	r1, sp, #16
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f3af 8000 	nop.w
 8009f80:	1c42      	adds	r2, r0, #1
 8009f82:	4606      	mov	r6, r0
 8009f84:	d1d6      	bne.n	8009f34 <_svfiprintf_r+0x174>
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	065b      	lsls	r3, r3, #25
 8009f8a:	f53f af2d 	bmi.w	8009de8 <_svfiprintf_r+0x28>
 8009f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f90:	e72c      	b.n	8009dec <_svfiprintf_r+0x2c>
 8009f92:	ab03      	add	r3, sp, #12
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	462a      	mov	r2, r5
 8009f98:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <_svfiprintf_r+0x1f0>)
 8009f9a:	a904      	add	r1, sp, #16
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f000 f879 	bl	800a094 <_printf_i>
 8009fa2:	e7ed      	b.n	8009f80 <_svfiprintf_r+0x1c0>
 8009fa4:	0800a6cc 	.word	0x0800a6cc
 8009fa8:	0800a6d6 	.word	0x0800a6d6
 8009fac:	00000000 	.word	0x00000000
 8009fb0:	08009d09 	.word	0x08009d09
 8009fb4:	0800a6d2 	.word	0x0800a6d2

08009fb8 <_printf_common>:
 8009fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	4616      	mov	r6, r2
 8009fbe:	4698      	mov	r8, r3
 8009fc0:	688a      	ldr	r2, [r1, #8]
 8009fc2:	690b      	ldr	r3, [r1, #16]
 8009fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	bfb8      	it	lt
 8009fcc:	4613      	movlt	r3, r2
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b10a      	cbz	r2, 8009fde <_printf_common+0x26>
 8009fda:	3301      	adds	r3, #1
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	0699      	lsls	r1, r3, #26
 8009fe2:	bf42      	ittt	mi
 8009fe4:	6833      	ldrmi	r3, [r6, #0]
 8009fe6:	3302      	addmi	r3, #2
 8009fe8:	6033      	strmi	r3, [r6, #0]
 8009fea:	6825      	ldr	r5, [r4, #0]
 8009fec:	f015 0506 	ands.w	r5, r5, #6
 8009ff0:	d106      	bne.n	800a000 <_printf_common+0x48>
 8009ff2:	f104 0a19 	add.w	sl, r4, #25
 8009ff6:	68e3      	ldr	r3, [r4, #12]
 8009ff8:	6832      	ldr	r2, [r6, #0]
 8009ffa:	1a9b      	subs	r3, r3, r2
 8009ffc:	42ab      	cmp	r3, r5
 8009ffe:	dc26      	bgt.n	800a04e <_printf_common+0x96>
 800a000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a004:	6822      	ldr	r2, [r4, #0]
 800a006:	3b00      	subs	r3, #0
 800a008:	bf18      	it	ne
 800a00a:	2301      	movne	r3, #1
 800a00c:	0692      	lsls	r2, r2, #26
 800a00e:	d42b      	bmi.n	800a068 <_printf_common+0xb0>
 800a010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a014:	4641      	mov	r1, r8
 800a016:	4638      	mov	r0, r7
 800a018:	47c8      	blx	r9
 800a01a:	3001      	adds	r0, #1
 800a01c:	d01e      	beq.n	800a05c <_printf_common+0xa4>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	6922      	ldr	r2, [r4, #16]
 800a022:	f003 0306 	and.w	r3, r3, #6
 800a026:	2b04      	cmp	r3, #4
 800a028:	bf02      	ittt	eq
 800a02a:	68e5      	ldreq	r5, [r4, #12]
 800a02c:	6833      	ldreq	r3, [r6, #0]
 800a02e:	1aed      	subeq	r5, r5, r3
 800a030:	68a3      	ldr	r3, [r4, #8]
 800a032:	bf0c      	ite	eq
 800a034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a038:	2500      	movne	r5, #0
 800a03a:	4293      	cmp	r3, r2
 800a03c:	bfc4      	itt	gt
 800a03e:	1a9b      	subgt	r3, r3, r2
 800a040:	18ed      	addgt	r5, r5, r3
 800a042:	2600      	movs	r6, #0
 800a044:	341a      	adds	r4, #26
 800a046:	42b5      	cmp	r5, r6
 800a048:	d11a      	bne.n	800a080 <_printf_common+0xc8>
 800a04a:	2000      	movs	r0, #0
 800a04c:	e008      	b.n	800a060 <_printf_common+0xa8>
 800a04e:	2301      	movs	r3, #1
 800a050:	4652      	mov	r2, sl
 800a052:	4641      	mov	r1, r8
 800a054:	4638      	mov	r0, r7
 800a056:	47c8      	blx	r9
 800a058:	3001      	adds	r0, #1
 800a05a:	d103      	bne.n	800a064 <_printf_common+0xac>
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a064:	3501      	adds	r5, #1
 800a066:	e7c6      	b.n	8009ff6 <_printf_common+0x3e>
 800a068:	18e1      	adds	r1, r4, r3
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	2030      	movs	r0, #48	@ 0x30
 800a06e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a072:	4422      	add	r2, r4
 800a074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a07c:	3302      	adds	r3, #2
 800a07e:	e7c7      	b.n	800a010 <_printf_common+0x58>
 800a080:	2301      	movs	r3, #1
 800a082:	4622      	mov	r2, r4
 800a084:	4641      	mov	r1, r8
 800a086:	4638      	mov	r0, r7
 800a088:	47c8      	blx	r9
 800a08a:	3001      	adds	r0, #1
 800a08c:	d0e6      	beq.n	800a05c <_printf_common+0xa4>
 800a08e:	3601      	adds	r6, #1
 800a090:	e7d9      	b.n	800a046 <_printf_common+0x8e>
	...

0800a094 <_printf_i>:
 800a094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a098:	7e0f      	ldrb	r7, [r1, #24]
 800a09a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a09c:	2f78      	cmp	r7, #120	@ 0x78
 800a09e:	4691      	mov	r9, r2
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	469a      	mov	sl, r3
 800a0a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0aa:	d807      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ac:	2f62      	cmp	r7, #98	@ 0x62
 800a0ae:	d80a      	bhi.n	800a0c6 <_printf_i+0x32>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	f000 80d1 	beq.w	800a258 <_printf_i+0x1c4>
 800a0b6:	2f58      	cmp	r7, #88	@ 0x58
 800a0b8:	f000 80b8 	beq.w	800a22c <_printf_i+0x198>
 800a0bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0c4:	e03a      	b.n	800a13c <_printf_i+0xa8>
 800a0c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0ca:	2b15      	cmp	r3, #21
 800a0cc:	d8f6      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ce:	a101      	add	r1, pc, #4	@ (adr r1, 800a0d4 <_printf_i+0x40>)
 800a0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0d4:	0800a12d 	.word	0x0800a12d
 800a0d8:	0800a141 	.word	0x0800a141
 800a0dc:	0800a0bd 	.word	0x0800a0bd
 800a0e0:	0800a0bd 	.word	0x0800a0bd
 800a0e4:	0800a0bd 	.word	0x0800a0bd
 800a0e8:	0800a0bd 	.word	0x0800a0bd
 800a0ec:	0800a141 	.word	0x0800a141
 800a0f0:	0800a0bd 	.word	0x0800a0bd
 800a0f4:	0800a0bd 	.word	0x0800a0bd
 800a0f8:	0800a0bd 	.word	0x0800a0bd
 800a0fc:	0800a0bd 	.word	0x0800a0bd
 800a100:	0800a23f 	.word	0x0800a23f
 800a104:	0800a16b 	.word	0x0800a16b
 800a108:	0800a1f9 	.word	0x0800a1f9
 800a10c:	0800a0bd 	.word	0x0800a0bd
 800a110:	0800a0bd 	.word	0x0800a0bd
 800a114:	0800a261 	.word	0x0800a261
 800a118:	0800a0bd 	.word	0x0800a0bd
 800a11c:	0800a16b 	.word	0x0800a16b
 800a120:	0800a0bd 	.word	0x0800a0bd
 800a124:	0800a0bd 	.word	0x0800a0bd
 800a128:	0800a201 	.word	0x0800a201
 800a12c:	6833      	ldr	r3, [r6, #0]
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	6032      	str	r2, [r6, #0]
 800a134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a13c:	2301      	movs	r3, #1
 800a13e:	e09c      	b.n	800a27a <_printf_i+0x1e6>
 800a140:	6833      	ldr	r3, [r6, #0]
 800a142:	6820      	ldr	r0, [r4, #0]
 800a144:	1d19      	adds	r1, r3, #4
 800a146:	6031      	str	r1, [r6, #0]
 800a148:	0606      	lsls	r6, r0, #24
 800a14a:	d501      	bpl.n	800a150 <_printf_i+0xbc>
 800a14c:	681d      	ldr	r5, [r3, #0]
 800a14e:	e003      	b.n	800a158 <_printf_i+0xc4>
 800a150:	0645      	lsls	r5, r0, #25
 800a152:	d5fb      	bpl.n	800a14c <_printf_i+0xb8>
 800a154:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a158:	2d00      	cmp	r5, #0
 800a15a:	da03      	bge.n	800a164 <_printf_i+0xd0>
 800a15c:	232d      	movs	r3, #45	@ 0x2d
 800a15e:	426d      	negs	r5, r5
 800a160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a164:	4858      	ldr	r0, [pc, #352]	@ (800a2c8 <_printf_i+0x234>)
 800a166:	230a      	movs	r3, #10
 800a168:	e011      	b.n	800a18e <_printf_i+0xfa>
 800a16a:	6821      	ldr	r1, [r4, #0]
 800a16c:	6833      	ldr	r3, [r6, #0]
 800a16e:	0608      	lsls	r0, r1, #24
 800a170:	f853 5b04 	ldr.w	r5, [r3], #4
 800a174:	d402      	bmi.n	800a17c <_printf_i+0xe8>
 800a176:	0649      	lsls	r1, r1, #25
 800a178:	bf48      	it	mi
 800a17a:	b2ad      	uxthmi	r5, r5
 800a17c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a17e:	4852      	ldr	r0, [pc, #328]	@ (800a2c8 <_printf_i+0x234>)
 800a180:	6033      	str	r3, [r6, #0]
 800a182:	bf14      	ite	ne
 800a184:	230a      	movne	r3, #10
 800a186:	2308      	moveq	r3, #8
 800a188:	2100      	movs	r1, #0
 800a18a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a18e:	6866      	ldr	r6, [r4, #4]
 800a190:	60a6      	str	r6, [r4, #8]
 800a192:	2e00      	cmp	r6, #0
 800a194:	db05      	blt.n	800a1a2 <_printf_i+0x10e>
 800a196:	6821      	ldr	r1, [r4, #0]
 800a198:	432e      	orrs	r6, r5
 800a19a:	f021 0104 	bic.w	r1, r1, #4
 800a19e:	6021      	str	r1, [r4, #0]
 800a1a0:	d04b      	beq.n	800a23a <_printf_i+0x1a6>
 800a1a2:	4616      	mov	r6, r2
 800a1a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1a8:	fb03 5711 	mls	r7, r3, r1, r5
 800a1ac:	5dc7      	ldrb	r7, [r0, r7]
 800a1ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1b2:	462f      	mov	r7, r5
 800a1b4:	42bb      	cmp	r3, r7
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	d9f4      	bls.n	800a1a4 <_printf_i+0x110>
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	d10b      	bne.n	800a1d6 <_printf_i+0x142>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	07df      	lsls	r7, r3, #31
 800a1c2:	d508      	bpl.n	800a1d6 <_printf_i+0x142>
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	6861      	ldr	r1, [r4, #4]
 800a1c8:	4299      	cmp	r1, r3
 800a1ca:	bfde      	ittt	le
 800a1cc:	2330      	movle	r3, #48	@ 0x30
 800a1ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1d6:	1b92      	subs	r2, r2, r6
 800a1d8:	6122      	str	r2, [r4, #16]
 800a1da:	f8cd a000 	str.w	sl, [sp]
 800a1de:	464b      	mov	r3, r9
 800a1e0:	aa03      	add	r2, sp, #12
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	f7ff fee7 	bl	8009fb8 <_printf_common>
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d14a      	bne.n	800a284 <_printf_i+0x1f0>
 800a1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f2:	b004      	add	sp, #16
 800a1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	f043 0320 	orr.w	r3, r3, #32
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	4832      	ldr	r0, [pc, #200]	@ (800a2cc <_printf_i+0x238>)
 800a202:	2778      	movs	r7, #120	@ 0x78
 800a204:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	6831      	ldr	r1, [r6, #0]
 800a20c:	061f      	lsls	r7, r3, #24
 800a20e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a212:	d402      	bmi.n	800a21a <_printf_i+0x186>
 800a214:	065f      	lsls	r7, r3, #25
 800a216:	bf48      	it	mi
 800a218:	b2ad      	uxthmi	r5, r5
 800a21a:	6031      	str	r1, [r6, #0]
 800a21c:	07d9      	lsls	r1, r3, #31
 800a21e:	bf44      	itt	mi
 800a220:	f043 0320 	orrmi.w	r3, r3, #32
 800a224:	6023      	strmi	r3, [r4, #0]
 800a226:	b11d      	cbz	r5, 800a230 <_printf_i+0x19c>
 800a228:	2310      	movs	r3, #16
 800a22a:	e7ad      	b.n	800a188 <_printf_i+0xf4>
 800a22c:	4826      	ldr	r0, [pc, #152]	@ (800a2c8 <_printf_i+0x234>)
 800a22e:	e7e9      	b.n	800a204 <_printf_i+0x170>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	f023 0320 	bic.w	r3, r3, #32
 800a236:	6023      	str	r3, [r4, #0]
 800a238:	e7f6      	b.n	800a228 <_printf_i+0x194>
 800a23a:	4616      	mov	r6, r2
 800a23c:	e7bd      	b.n	800a1ba <_printf_i+0x126>
 800a23e:	6833      	ldr	r3, [r6, #0]
 800a240:	6825      	ldr	r5, [r4, #0]
 800a242:	6961      	ldr	r1, [r4, #20]
 800a244:	1d18      	adds	r0, r3, #4
 800a246:	6030      	str	r0, [r6, #0]
 800a248:	062e      	lsls	r6, r5, #24
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	d501      	bpl.n	800a252 <_printf_i+0x1be>
 800a24e:	6019      	str	r1, [r3, #0]
 800a250:	e002      	b.n	800a258 <_printf_i+0x1c4>
 800a252:	0668      	lsls	r0, r5, #25
 800a254:	d5fb      	bpl.n	800a24e <_printf_i+0x1ba>
 800a256:	8019      	strh	r1, [r3, #0]
 800a258:	2300      	movs	r3, #0
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	4616      	mov	r6, r2
 800a25e:	e7bc      	b.n	800a1da <_printf_i+0x146>
 800a260:	6833      	ldr	r3, [r6, #0]
 800a262:	1d1a      	adds	r2, r3, #4
 800a264:	6032      	str	r2, [r6, #0]
 800a266:	681e      	ldr	r6, [r3, #0]
 800a268:	6862      	ldr	r2, [r4, #4]
 800a26a:	2100      	movs	r1, #0
 800a26c:	4630      	mov	r0, r6
 800a26e:	f7f5 ffd7 	bl	8000220 <memchr>
 800a272:	b108      	cbz	r0, 800a278 <_printf_i+0x1e4>
 800a274:	1b80      	subs	r0, r0, r6
 800a276:	6060      	str	r0, [r4, #4]
 800a278:	6863      	ldr	r3, [r4, #4]
 800a27a:	6123      	str	r3, [r4, #16]
 800a27c:	2300      	movs	r3, #0
 800a27e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a282:	e7aa      	b.n	800a1da <_printf_i+0x146>
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	4632      	mov	r2, r6
 800a288:	4649      	mov	r1, r9
 800a28a:	4640      	mov	r0, r8
 800a28c:	47d0      	blx	sl
 800a28e:	3001      	adds	r0, #1
 800a290:	d0ad      	beq.n	800a1ee <_printf_i+0x15a>
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	079b      	lsls	r3, r3, #30
 800a296:	d413      	bmi.n	800a2c0 <_printf_i+0x22c>
 800a298:	68e0      	ldr	r0, [r4, #12]
 800a29a:	9b03      	ldr	r3, [sp, #12]
 800a29c:	4298      	cmp	r0, r3
 800a29e:	bfb8      	it	lt
 800a2a0:	4618      	movlt	r0, r3
 800a2a2:	e7a6      	b.n	800a1f2 <_printf_i+0x15e>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	4632      	mov	r2, r6
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	47d0      	blx	sl
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	d09d      	beq.n	800a1ee <_printf_i+0x15a>
 800a2b2:	3501      	adds	r5, #1
 800a2b4:	68e3      	ldr	r3, [r4, #12]
 800a2b6:	9903      	ldr	r1, [sp, #12]
 800a2b8:	1a5b      	subs	r3, r3, r1
 800a2ba:	42ab      	cmp	r3, r5
 800a2bc:	dcf2      	bgt.n	800a2a4 <_printf_i+0x210>
 800a2be:	e7eb      	b.n	800a298 <_printf_i+0x204>
 800a2c0:	2500      	movs	r5, #0
 800a2c2:	f104 0619 	add.w	r6, r4, #25
 800a2c6:	e7f5      	b.n	800a2b4 <_printf_i+0x220>
 800a2c8:	0800a6dd 	.word	0x0800a6dd
 800a2cc:	0800a6ee 	.word	0x0800a6ee

0800a2d0 <__sflush_r>:
 800a2d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d8:	0716      	lsls	r6, r2, #28
 800a2da:	4605      	mov	r5, r0
 800a2dc:	460c      	mov	r4, r1
 800a2de:	d454      	bmi.n	800a38a <__sflush_r+0xba>
 800a2e0:	684b      	ldr	r3, [r1, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	dc02      	bgt.n	800a2ec <__sflush_r+0x1c>
 800a2e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	dd48      	ble.n	800a37e <__sflush_r+0xae>
 800a2ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2ee:	2e00      	cmp	r6, #0
 800a2f0:	d045      	beq.n	800a37e <__sflush_r+0xae>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2f8:	682f      	ldr	r7, [r5, #0]
 800a2fa:	6a21      	ldr	r1, [r4, #32]
 800a2fc:	602b      	str	r3, [r5, #0]
 800a2fe:	d030      	beq.n	800a362 <__sflush_r+0x92>
 800a300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a302:	89a3      	ldrh	r3, [r4, #12]
 800a304:	0759      	lsls	r1, r3, #29
 800a306:	d505      	bpl.n	800a314 <__sflush_r+0x44>
 800a308:	6863      	ldr	r3, [r4, #4]
 800a30a:	1ad2      	subs	r2, r2, r3
 800a30c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a30e:	b10b      	cbz	r3, 800a314 <__sflush_r+0x44>
 800a310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a312:	1ad2      	subs	r2, r2, r3
 800a314:	2300      	movs	r3, #0
 800a316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a318:	6a21      	ldr	r1, [r4, #32]
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b0      	blx	r6
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	d106      	bne.n	800a332 <__sflush_r+0x62>
 800a324:	6829      	ldr	r1, [r5, #0]
 800a326:	291d      	cmp	r1, #29
 800a328:	d82b      	bhi.n	800a382 <__sflush_r+0xb2>
 800a32a:	4a2a      	ldr	r2, [pc, #168]	@ (800a3d4 <__sflush_r+0x104>)
 800a32c:	40ca      	lsrs	r2, r1
 800a32e:	07d6      	lsls	r6, r2, #31
 800a330:	d527      	bpl.n	800a382 <__sflush_r+0xb2>
 800a332:	2200      	movs	r2, #0
 800a334:	6062      	str	r2, [r4, #4]
 800a336:	04d9      	lsls	r1, r3, #19
 800a338:	6922      	ldr	r2, [r4, #16]
 800a33a:	6022      	str	r2, [r4, #0]
 800a33c:	d504      	bpl.n	800a348 <__sflush_r+0x78>
 800a33e:	1c42      	adds	r2, r0, #1
 800a340:	d101      	bne.n	800a346 <__sflush_r+0x76>
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	b903      	cbnz	r3, 800a348 <__sflush_r+0x78>
 800a346:	6560      	str	r0, [r4, #84]	@ 0x54
 800a348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a34a:	602f      	str	r7, [r5, #0]
 800a34c:	b1b9      	cbz	r1, 800a37e <__sflush_r+0xae>
 800a34e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a352:	4299      	cmp	r1, r3
 800a354:	d002      	beq.n	800a35c <__sflush_r+0x8c>
 800a356:	4628      	mov	r0, r5
 800a358:	f7ff fbde 	bl	8009b18 <_free_r>
 800a35c:	2300      	movs	r3, #0
 800a35e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a360:	e00d      	b.n	800a37e <__sflush_r+0xae>
 800a362:	2301      	movs	r3, #1
 800a364:	4628      	mov	r0, r5
 800a366:	47b0      	blx	r6
 800a368:	4602      	mov	r2, r0
 800a36a:	1c50      	adds	r0, r2, #1
 800a36c:	d1c9      	bne.n	800a302 <__sflush_r+0x32>
 800a36e:	682b      	ldr	r3, [r5, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0c6      	beq.n	800a302 <__sflush_r+0x32>
 800a374:	2b1d      	cmp	r3, #29
 800a376:	d001      	beq.n	800a37c <__sflush_r+0xac>
 800a378:	2b16      	cmp	r3, #22
 800a37a:	d11e      	bne.n	800a3ba <__sflush_r+0xea>
 800a37c:	602f      	str	r7, [r5, #0]
 800a37e:	2000      	movs	r0, #0
 800a380:	e022      	b.n	800a3c8 <__sflush_r+0xf8>
 800a382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a386:	b21b      	sxth	r3, r3
 800a388:	e01b      	b.n	800a3c2 <__sflush_r+0xf2>
 800a38a:	690f      	ldr	r7, [r1, #16]
 800a38c:	2f00      	cmp	r7, #0
 800a38e:	d0f6      	beq.n	800a37e <__sflush_r+0xae>
 800a390:	0793      	lsls	r3, r2, #30
 800a392:	680e      	ldr	r6, [r1, #0]
 800a394:	bf08      	it	eq
 800a396:	694b      	ldreq	r3, [r1, #20]
 800a398:	600f      	str	r7, [r1, #0]
 800a39a:	bf18      	it	ne
 800a39c:	2300      	movne	r3, #0
 800a39e:	eba6 0807 	sub.w	r8, r6, r7
 800a3a2:	608b      	str	r3, [r1, #8]
 800a3a4:	f1b8 0f00 	cmp.w	r8, #0
 800a3a8:	dde9      	ble.n	800a37e <__sflush_r+0xae>
 800a3aa:	6a21      	ldr	r1, [r4, #32]
 800a3ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a3ae:	4643      	mov	r3, r8
 800a3b0:	463a      	mov	r2, r7
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	47b0      	blx	r6
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	dc08      	bgt.n	800a3cc <__sflush_r+0xfc>
 800a3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3cc:	4407      	add	r7, r0
 800a3ce:	eba8 0800 	sub.w	r8, r8, r0
 800a3d2:	e7e7      	b.n	800a3a4 <__sflush_r+0xd4>
 800a3d4:	20400001 	.word	0x20400001

0800a3d8 <_fflush_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	690b      	ldr	r3, [r1, #16]
 800a3dc:	4605      	mov	r5, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	b913      	cbnz	r3, 800a3e8 <_fflush_r+0x10>
 800a3e2:	2500      	movs	r5, #0
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	b118      	cbz	r0, 800a3f2 <_fflush_r+0x1a>
 800a3ea:	6a03      	ldr	r3, [r0, #32]
 800a3ec:	b90b      	cbnz	r3, 800a3f2 <_fflush_r+0x1a>
 800a3ee:	f7ff f967 	bl	80096c0 <__sinit>
 800a3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0f3      	beq.n	800a3e2 <_fflush_r+0xa>
 800a3fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3fc:	07d0      	lsls	r0, r2, #31
 800a3fe:	d404      	bmi.n	800a40a <_fflush_r+0x32>
 800a400:	0599      	lsls	r1, r3, #22
 800a402:	d402      	bmi.n	800a40a <_fflush_r+0x32>
 800a404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a406:	f7ff fb76 	bl	8009af6 <__retarget_lock_acquire_recursive>
 800a40a:	4628      	mov	r0, r5
 800a40c:	4621      	mov	r1, r4
 800a40e:	f7ff ff5f 	bl	800a2d0 <__sflush_r>
 800a412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a414:	07da      	lsls	r2, r3, #31
 800a416:	4605      	mov	r5, r0
 800a418:	d4e4      	bmi.n	800a3e4 <_fflush_r+0xc>
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	059b      	lsls	r3, r3, #22
 800a41e:	d4e1      	bmi.n	800a3e4 <_fflush_r+0xc>
 800a420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a422:	f7ff fb69 	bl	8009af8 <__retarget_lock_release_recursive>
 800a426:	e7dd      	b.n	800a3e4 <_fflush_r+0xc>

0800a428 <__swhatbuf_r>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	460c      	mov	r4, r1
 800a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a430:	2900      	cmp	r1, #0
 800a432:	b096      	sub	sp, #88	@ 0x58
 800a434:	4615      	mov	r5, r2
 800a436:	461e      	mov	r6, r3
 800a438:	da0d      	bge.n	800a456 <__swhatbuf_r+0x2e>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a440:	f04f 0100 	mov.w	r1, #0
 800a444:	bf14      	ite	ne
 800a446:	2340      	movne	r3, #64	@ 0x40
 800a448:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a44c:	2000      	movs	r0, #0
 800a44e:	6031      	str	r1, [r6, #0]
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	b016      	add	sp, #88	@ 0x58
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	466a      	mov	r2, sp
 800a458:	f000 f862 	bl	800a520 <_fstat_r>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	dbec      	blt.n	800a43a <__swhatbuf_r+0x12>
 800a460:	9901      	ldr	r1, [sp, #4]
 800a462:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a466:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a46a:	4259      	negs	r1, r3
 800a46c:	4159      	adcs	r1, r3
 800a46e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a472:	e7eb      	b.n	800a44c <__swhatbuf_r+0x24>

0800a474 <__smakebuf_r>:
 800a474:	898b      	ldrh	r3, [r1, #12]
 800a476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a478:	079d      	lsls	r5, r3, #30
 800a47a:	4606      	mov	r6, r0
 800a47c:	460c      	mov	r4, r1
 800a47e:	d507      	bpl.n	800a490 <__smakebuf_r+0x1c>
 800a480:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	6123      	str	r3, [r4, #16]
 800a488:	2301      	movs	r3, #1
 800a48a:	6163      	str	r3, [r4, #20]
 800a48c:	b003      	add	sp, #12
 800a48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a490:	ab01      	add	r3, sp, #4
 800a492:	466a      	mov	r2, sp
 800a494:	f7ff ffc8 	bl	800a428 <__swhatbuf_r>
 800a498:	9f00      	ldr	r7, [sp, #0]
 800a49a:	4605      	mov	r5, r0
 800a49c:	4639      	mov	r1, r7
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f7ff fba6 	bl	8009bf0 <_malloc_r>
 800a4a4:	b948      	cbnz	r0, 800a4ba <__smakebuf_r+0x46>
 800a4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4aa:	059a      	lsls	r2, r3, #22
 800a4ac:	d4ee      	bmi.n	800a48c <__smakebuf_r+0x18>
 800a4ae:	f023 0303 	bic.w	r3, r3, #3
 800a4b2:	f043 0302 	orr.w	r3, r3, #2
 800a4b6:	81a3      	strh	r3, [r4, #12]
 800a4b8:	e7e2      	b.n	800a480 <__smakebuf_r+0xc>
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	6020      	str	r0, [r4, #0]
 800a4be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4c2:	81a3      	strh	r3, [r4, #12]
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a4ca:	b15b      	cbz	r3, 800a4e4 <__smakebuf_r+0x70>
 800a4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f000 f837 	bl	800a544 <_isatty_r>
 800a4d6:	b128      	cbz	r0, 800a4e4 <__smakebuf_r+0x70>
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	f043 0301 	orr.w	r3, r3, #1
 800a4e2:	81a3      	strh	r3, [r4, #12]
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	431d      	orrs	r5, r3
 800a4e8:	81a5      	strh	r5, [r4, #12]
 800a4ea:	e7cf      	b.n	800a48c <__smakebuf_r+0x18>

0800a4ec <memmove>:
 800a4ec:	4288      	cmp	r0, r1
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	eb01 0402 	add.w	r4, r1, r2
 800a4f4:	d902      	bls.n	800a4fc <memmove+0x10>
 800a4f6:	4284      	cmp	r4, r0
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	d807      	bhi.n	800a50c <memmove+0x20>
 800a4fc:	1e43      	subs	r3, r0, #1
 800a4fe:	42a1      	cmp	r1, r4
 800a500:	d008      	beq.n	800a514 <memmove+0x28>
 800a502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a50a:	e7f8      	b.n	800a4fe <memmove+0x12>
 800a50c:	4402      	add	r2, r0
 800a50e:	4601      	mov	r1, r0
 800a510:	428a      	cmp	r2, r1
 800a512:	d100      	bne.n	800a516 <memmove+0x2a>
 800a514:	bd10      	pop	{r4, pc}
 800a516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a51e:	e7f7      	b.n	800a510 <memmove+0x24>

0800a520 <_fstat_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	4d07      	ldr	r5, [pc, #28]	@ (800a540 <_fstat_r+0x20>)
 800a524:	2300      	movs	r3, #0
 800a526:	4604      	mov	r4, r0
 800a528:	4608      	mov	r0, r1
 800a52a:	4611      	mov	r1, r2
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	f7f7 f840 	bl	80015b2 <_fstat>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	d102      	bne.n	800a53c <_fstat_r+0x1c>
 800a536:	682b      	ldr	r3, [r5, #0]
 800a538:	b103      	cbz	r3, 800a53c <_fstat_r+0x1c>
 800a53a:	6023      	str	r3, [r4, #0]
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
 800a53e:	bf00      	nop
 800a540:	20004cd4 	.word	0x20004cd4

0800a544 <_isatty_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4d06      	ldr	r5, [pc, #24]	@ (800a560 <_isatty_r+0x1c>)
 800a548:	2300      	movs	r3, #0
 800a54a:	4604      	mov	r4, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	602b      	str	r3, [r5, #0]
 800a550:	f7f7 f83f 	bl	80015d2 <_isatty>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_isatty_r+0x1a>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_isatty_r+0x1a>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	20004cd4 	.word	0x20004cd4

0800a564 <_sbrk_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	@ (800a580 <_sbrk_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7f7 f848 	bl	8001604 <_sbrk>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_sbrk_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_sbrk_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20004cd4 	.word	0x20004cd4

0800a584 <_realloc_r>:
 800a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a588:	4607      	mov	r7, r0
 800a58a:	4614      	mov	r4, r2
 800a58c:	460d      	mov	r5, r1
 800a58e:	b921      	cbnz	r1, 800a59a <_realloc_r+0x16>
 800a590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	4611      	mov	r1, r2
 800a596:	f7ff bb2b 	b.w	8009bf0 <_malloc_r>
 800a59a:	b92a      	cbnz	r2, 800a5a8 <_realloc_r+0x24>
 800a59c:	f7ff fabc 	bl	8009b18 <_free_r>
 800a5a0:	4625      	mov	r5, r4
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a8:	f000 f81a 	bl	800a5e0 <_malloc_usable_size_r>
 800a5ac:	4284      	cmp	r4, r0
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	d802      	bhi.n	800a5b8 <_realloc_r+0x34>
 800a5b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5b6:	d8f4      	bhi.n	800a5a2 <_realloc_r+0x1e>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	f7ff fb18 	bl	8009bf0 <_malloc_r>
 800a5c0:	4680      	mov	r8, r0
 800a5c2:	b908      	cbnz	r0, 800a5c8 <_realloc_r+0x44>
 800a5c4:	4645      	mov	r5, r8
 800a5c6:	e7ec      	b.n	800a5a2 <_realloc_r+0x1e>
 800a5c8:	42b4      	cmp	r4, r6
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	bf28      	it	cs
 800a5d0:	4632      	movcs	r2, r6
 800a5d2:	f7ff fa92 	bl	8009afa <memcpy>
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	4638      	mov	r0, r7
 800a5da:	f7ff fa9d 	bl	8009b18 <_free_r>
 800a5de:	e7f1      	b.n	800a5c4 <_realloc_r+0x40>

0800a5e0 <_malloc_usable_size_r>:
 800a5e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e4:	1f18      	subs	r0, r3, #4
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	bfbc      	itt	lt
 800a5ea:	580b      	ldrlt	r3, [r1, r0]
 800a5ec:	18c0      	addlt	r0, r0, r3
 800a5ee:	4770      	bx	lr

0800a5f0 <_init>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	bf00      	nop
 800a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f6:	bc08      	pop	{r3}
 800a5f8:	469e      	mov	lr, r3
 800a5fa:	4770      	bx	lr

0800a5fc <_fini>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	bf00      	nop
 800a600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a602:	bc08      	pop	{r3}
 800a604:	469e      	mov	lr, r3
 800a606:	4770      	bx	lr
