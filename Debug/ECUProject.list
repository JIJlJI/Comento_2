
ECUProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a494  0800a494  0000b494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c0  0800a5c0  0000c06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a5c0  0800a5c0  0000b5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5c8  0800a5c8  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5c8  0800a5c8  0000b5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5cc  0800a5cc  0000b5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a5d0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c04  2000006c  0800a63c  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c70  0800a63c  0000cc70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2a3  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee3  00000000  00000000  0002733f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0002b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011fa  00000000  00000000  0002c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025830  00000000  00000000  0002db5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc67  00000000  00000000  0005338a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc009  00000000  00000000  0006eff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014affa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006954  00000000  00000000  0014b040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00151994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a47c 	.word	0x0800a47c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800a47c 	.word	0x0800a47c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <eeprom_cs_select>:

#define EEPROM_WREN_CMD  0x06
#define EEPROM_WRITE_CMD 0x02
#define EEPROM_READ_CMD  0x03

static void eeprom_cs_select(void) { HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_RESET); }
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	2200      	movs	r2, #0
 80005f2:	2110      	movs	r1, #16
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <eeprom_cs_select+0x14>)
 80005f6:	f002 fa21 	bl	8002a3c <HAL_GPIO_WritePin>
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020000 	.word	0x40020000

08000604 <eeprom_cs_deselect>:
static void eeprom_cs_deselect(void) { HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_SET); }
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
 8000608:	2201      	movs	r2, #1
 800060a:	2110      	movs	r1, #16
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <eeprom_cs_deselect+0x14>)
 800060e:	f002 fa15 	bl	8002a3c <HAL_GPIO_WritePin>
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40020000 	.word	0x40020000

0800061c <eeprom_write_bytes>:

static void eeprom_write_bytes(uint16_t address, uint8_t* data, uint16_t size) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	80fb      	strh	r3, [r7, #6]
 8000628:	4613      	mov	r3, r2
 800062a:	80bb      	strh	r3, [r7, #4]
    uint8_t header[3];
    uint8_t wren_cmd = EEPROM_WREN_CMD;
 800062c:	2306      	movs	r3, #6
 800062e:	72fb      	strb	r3, [r7, #11]

    eeprom_cs_select();
 8000630:	f7ff ffdc 	bl	80005ec <eeprom_cs_select>
    HAL_SPI_Transmit(&hspi1, &wren_cmd, 1, 100);
 8000634:	f107 010b 	add.w	r1, r7, #11
 8000638:	2364      	movs	r3, #100	@ 0x64
 800063a:	2201      	movs	r2, #1
 800063c:	481a      	ldr	r0, [pc, #104]	@ (80006a8 <eeprom_write_bytes+0x8c>)
 800063e:	f003 feda 	bl	80043f6 <HAL_SPI_Transmit>
    eeprom_cs_deselect();
 8000642:	f7ff ffdf 	bl	8000604 <eeprom_cs_deselect>
    osDelay(5);
 8000646:	2005      	movs	r0, #5
 8000648:	f005 fa82 	bl	8005b50 <osDelay>

    header[0] = EEPROM_WRITE_CMD;
 800064c:	2302      	movs	r3, #2
 800064e:	733b      	strb	r3, [r7, #12]
    header[1] = (address >> 8) & 0xFF;
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	b29b      	uxth	r3, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	737b      	strb	r3, [r7, #13]
    header[2] = address & 0xFF;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	73bb      	strb	r3, [r7, #14]

    eeprom_cs_select();
 8000660:	f7ff ffc4 	bl	80005ec <eeprom_cs_select>
    HAL_SPI_Transmit_DMA(&hspi1, header, 3);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2203      	movs	r2, #3
 800066a:	4619      	mov	r1, r3
 800066c:	480e      	ldr	r0, [pc, #56]	@ (80006a8 <eeprom_write_bytes+0x8c>)
 800066e:	f004 fac9 	bl	8004c04 <HAL_SPI_Transmit_DMA>
    osSemaphoreAcquire(spiTxDoneSemaphoreHandle, 100);
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <eeprom_write_bytes+0x90>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2164      	movs	r1, #100	@ 0x64
 8000678:	4618      	mov	r0, r3
 800067a:	f005 fc1b 	bl	8005eb4 <osSemaphoreAcquire>
    HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800067e:	88bb      	ldrh	r3, [r7, #4]
 8000680:	461a      	mov	r2, r3
 8000682:	6839      	ldr	r1, [r7, #0]
 8000684:	4808      	ldr	r0, [pc, #32]	@ (80006a8 <eeprom_write_bytes+0x8c>)
 8000686:	f004 fabd 	bl	8004c04 <HAL_SPI_Transmit_DMA>
    osSemaphoreAcquire(spiTxDoneSemaphoreHandle, 100);
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <eeprom_write_bytes+0x90>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2164      	movs	r1, #100	@ 0x64
 8000690:	4618      	mov	r0, r3
 8000692:	f005 fc0f 	bl	8005eb4 <osSemaphoreAcquire>
    eeprom_cs_deselect();
 8000696:	f7ff ffb5 	bl	8000604 <eeprom_cs_deselect>
    osDelay(5);
 800069a:	2005      	movs	r0, #5
 800069c:	f005 fa58 	bl	8005b50 <osDelay>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000104 	.word	0x20000104
 80006ac:	200001b8 	.word	0x200001b8

080006b0 <eeprom_read_bytes>:

static void eeprom_read_bytes(uint16_t address, uint8_t* data, uint16_t size) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	80fb      	strh	r3, [r7, #6]
 80006bc:	4613      	mov	r3, r2
 80006be:	80bb      	strh	r3, [r7, #4]
    uint8_t header[3];
    header[0] = EEPROM_READ_CMD;
 80006c0:	2303      	movs	r3, #3
 80006c2:	733b      	strb	r3, [r7, #12]
    header[1] = (address >> 8) & 0xFF;
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	737b      	strb	r3, [r7, #13]
    header[2] = address & 0xFF;
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	73bb      	strb	r3, [r7, #14]

    eeprom_cs_select();
 80006d4:	f7ff ff8a 	bl	80005ec <eeprom_cs_select>
    HAL_SPI_Transmit(&hspi1, header, 3, 100);
 80006d8:	f107 010c 	add.w	r1, r7, #12
 80006dc:	2364      	movs	r3, #100	@ 0x64
 80006de:	2203      	movs	r2, #3
 80006e0:	4807      	ldr	r0, [pc, #28]	@ (8000700 <eeprom_read_bytes+0x50>)
 80006e2:	f003 fe88 	bl	80043f6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, size, 100);
 80006e6:	88ba      	ldrh	r2, [r7, #4]
 80006e8:	2364      	movs	r3, #100	@ 0x64
 80006ea:	6839      	ldr	r1, [r7, #0]
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <eeprom_read_bytes+0x50>)
 80006ee:	f003 ffc6 	bl	800467e <HAL_SPI_Receive>
    eeprom_cs_deselect();
 80006f2:	f7ff ff87 	bl	8000604 <eeprom_cs_deselect>
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000104 	.word	0x20000104

08000704 <eeprom_log_new_dtc>:

bool eeprom_log_new_dtc(uint32_t dtc_code) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    uint16_t write_address = 0xFFFF;
 800070c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000710:	83fb      	strh	r3, [r7, #30]
    bool already_exists = false;
 8000712:	2300      	movs	r3, #0
 8000714:	777b      	strb	r3, [r7, #29]

    for (int i = 0; i < DTC_MAX_COUNT; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	e024      	b.n	8000766 <eeprom_log_new_dtc+0x62>
        uint16_t current_addr = DTC_AREA_START_ADDRESS + (i * 4);
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	3319      	adds	r3, #25
 8000720:	b29b      	uxth	r3, r3
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	82fb      	strh	r3, [r7, #22]
        eeprom_read_bytes(current_addr, buffer, 4);
 8000726:	f107 010c 	add.w	r1, r7, #12
 800072a:	8afb      	ldrh	r3, [r7, #22]
 800072c:	2204      	movs	r2, #4
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffbe 	bl	80006b0 <eeprom_read_bytes>
        uint32_t existing_dtc = *((uint32_t*)buffer);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	613b      	str	r3, [r7, #16]
        if (existing_dtc == dtc_code) {
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	d102      	bne.n	800074a <eeprom_log_new_dtc+0x46>
            already_exists = true;
 8000744:	2301      	movs	r3, #1
 8000746:	777b      	strb	r3, [r7, #29]
            break;
 8000748:	e010      	b.n	800076c <eeprom_log_new_dtc+0x68>
        }
        if (write_address == 0xFFFF && existing_dtc == 0xFFFFFFFF) {
 800074a:	8bfb      	ldrh	r3, [r7, #30]
 800074c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000750:	4293      	cmp	r3, r2
 8000752:	d105      	bne.n	8000760 <eeprom_log_new_dtc+0x5c>
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800075a:	d101      	bne.n	8000760 <eeprom_log_new_dtc+0x5c>
            write_address = current_addr;
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	83fb      	strh	r3, [r7, #30]
    for (int i = 0; i < DTC_MAX_COUNT; i++) {
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	3301      	adds	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	2b09      	cmp	r3, #9
 800076a:	ddd7      	ble.n	800071c <eeprom_log_new_dtc+0x18>
        }
    }

    if (already_exists) {
 800076c:	7f7b      	ldrb	r3, [r7, #29]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <eeprom_log_new_dtc+0x72>
        return true;
 8000772:	2301      	movs	r3, #1
 8000774:	e020      	b.n	80007b8 <eeprom_log_new_dtc+0xb4>
    }
    if (write_address != 0xFFFF) {
 8000776:	8bfb      	ldrh	r3, [r7, #30]
 8000778:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800077c:	4293      	cmp	r3, r2
 800077e:	d017      	beq.n	80007b0 <eeprom_log_new_dtc+0xac>
        buffer[0] = (dtc_code >> 24) & 0xFF; buffer[1] = (dtc_code >> 16) & 0xFF;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	0e1b      	lsrs	r3, r3, #24
 8000784:	b2db      	uxtb	r3, r3
 8000786:	733b      	strb	r3, [r7, #12]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	0c1b      	lsrs	r3, r3, #16
 800078c:	b2db      	uxtb	r3, r3
 800078e:	737b      	strb	r3, [r7, #13]
        buffer[2] = (dtc_code >> 8) & 0xFF; buffer[3] = dtc_code & 0xFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b2db      	uxtb	r3, r3
 8000796:	73bb      	strb	r3, [r7, #14]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	73fb      	strb	r3, [r7, #15]
        eeprom_write_bytes(write_address, buffer, 4);
 800079e:	f107 010c 	add.w	r1, r7, #12
 80007a2:	8bfb      	ldrh	r3, [r7, #30]
 80007a4:	2204      	movs	r2, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff38 	bl	800061c <eeprom_write_bytes>
        return true;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e003      	b.n	80007b8 <eeprom_log_new_dtc+0xb4>
    }

    printf("[EEPROM] Log area is full.\r\n");
 80007b0:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <eeprom_log_new_dtc+0xbc>)
 80007b2:	f008 fff3 	bl	800979c <puts>
    return false;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	0800a494 	.word	0x0800a494

080007c4 <eeprom_read_all_dtcs>:

uint8_t eeprom_read_all_dtcs(uint32_t* dtc_buffer) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    uint8_t count = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	77fb      	strb	r3, [r7, #31]
    uint8_t read_bytes[4];
    for (int i = 0; i < DTC_MAX_COUNT; i++) {
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	e01e      	b.n	8000814 <eeprom_read_all_dtcs+0x50>
        uint16_t current_addr = DTC_AREA_START_ADDRESS + (i * 4);
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	3319      	adds	r3, #25
 80007da:	b29b      	uxth	r3, r3
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	82fb      	strh	r3, [r7, #22]
        eeprom_read_bytes(current_addr, read_bytes, 4);
 80007e0:	f107 010c 	add.w	r1, r7, #12
 80007e4:	8afb      	ldrh	r3, [r7, #22]
 80007e6:	2204      	movs	r2, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff61 	bl	80006b0 <eeprom_read_bytes>
        uint32_t current_dtc = *((uint32_t*)read_bytes);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	613b      	str	r3, [r7, #16]
        if (current_dtc != 0xFFFFFFFF) {
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d007      	beq.n	800080e <eeprom_read_all_dtcs+0x4a>
            dtc_buffer[count++] = current_dtc;
 80007fe:	7ffb      	ldrb	r3, [r7, #31]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	77fa      	strb	r2, [r7, #31]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < DTC_MAX_COUNT; i++) {
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	3301      	adds	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	2b09      	cmp	r3, #9
 8000818:	dddd      	ble.n	80007d6 <eeprom_read_all_dtcs+0x12>
        }
    }
    return count;
 800081a:	7ffb      	ldrb	r3, [r7, #31]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <eeprom_clear_all_dtcs>:


void eeprom_clear_all_dtcs(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
    uint8_t empty_data[4];
    memset(empty_data, 0xFF, sizeof(empty_data));
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2204      	movs	r2, #4
 800082e:	21ff      	movs	r1, #255	@ 0xff
 8000830:	4618      	mov	r0, r3
 8000832:	f009 f893 	bl	800995c <memset>
    for (int i = 0; i < DTC_MAX_COUNT; i++) {
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e00d      	b.n	8000858 <eeprom_clear_all_dtcs+0x34>
        uint16_t current_addr = DTC_AREA_START_ADDRESS + (i * 4);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3319      	adds	r3, #25
 8000840:	b29b      	uxth	r3, r3
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	817b      	strh	r3, [r7, #10]
        eeprom_write_bytes(current_addr, empty_data, 4);
 8000846:	1d39      	adds	r1, r7, #4
 8000848:	897b      	ldrh	r3, [r7, #10]
 800084a:	2204      	movs	r2, #4
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fee5 	bl	800061c <eeprom_write_bytes>
    for (int i = 0; i < DTC_MAX_COUNT; i++) {
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3301      	adds	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b09      	cmp	r3, #9
 800085c:	ddee      	ble.n	800083c <eeprom_clear_all_dtcs+0x18>
    }
}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <__io_putchar>:
void UartMonitorTask(void *argument);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000870:	1d39      	adds	r1, r7, #4
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	2201      	movs	r2, #1
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <__io_putchar+0x20>)
 800087a:	f004 fc9d 	bl	80051b8 <HAL_UART_Transmit>
    return ch;
 800087e:	687b      	ldr	r3, [r7, #4]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000015c 	.word	0x2000015c

0800088c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) { if (hi2c->Instance == I2C1) g_i2c_state = I2C_STATE_IDLE; }
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a05      	ldr	r2, [pc, #20]	@ (80008b0 <HAL_I2C_ErrorCallback+0x24>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d102      	bne.n	80008a4 <HAL_I2C_ErrorCallback+0x18>
 800089e:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <HAL_I2C_ErrorCallback+0x28>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40005400 	.word	0x40005400
 80008b4:	200001c4 	.word	0x200001c4

080008b8 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) { if (hi2c->Instance == I2C1) pmic_i2c_dma_rx_callback_handler(); }
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_I2C_MemRxCpltCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_I2C_MemRxCpltCallback+0x16>
 80008ca:	f000 fbe9 	bl	80010a0 <pmic_i2c_dma_rx_callback_handler>
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40005400 	.word	0x40005400

080008dc <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) { if (hspi->Instance == SPI1) osSemaphoreRelease(spiTxDoneSemaphoreHandle); }
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a05      	ldr	r2, [pc, #20]	@ (8000900 <HAL_SPI_TxCpltCallback+0x24>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d104      	bne.n	80008f8 <HAL_SPI_TxCpltCallback+0x1c>
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_SPI_TxCpltCallback+0x28>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 fb30 	bl	8005f58 <osSemaphoreRelease>
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40013000 	.word	0x40013000
 8000904:	200001b8 	.word	0x200001b8

08000908 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) { osSemaphoreRelease(canTxDoneSemaphoreHandle); }
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f005 fb1f 	bl	8005f58 <osSemaphoreRelease>
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001bc 	.word	0x200001bc

08000928 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) { osSemaphoreRelease(canTxDoneSemaphoreHandle); }
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f005 fb0f 	bl	8005f58 <osSemaphoreRelease>
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200001bc 	.word	0x200001bc

08000948 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) { osSemaphoreRelease(canTxDoneSemaphoreHandle); }
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f005 faff 	bl	8005f58 <osSemaphoreRelease>
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200001bc 	.word	0x200001bc

08000968 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    DtcEvent_t event;
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	f107 021c 	add.w	r2, r7, #28
 8000978:	2100      	movs	r1, #0
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f001 f9aa 	bl	8001cd4 <HAL_CAN_GetRxMessage>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d122      	bne.n	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
        if (rxHeader.StdId == 0x7E0 && rxData[0] == 0x19) { // Read DTC
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 800098c:	d10d      	bne.n	80009aa <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
 800098e:	7d3b      	ldrb	r3, [r7, #20]
 8000990:	2b19      	cmp	r3, #25
 8000992:	d10a      	bne.n	80009aa <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
             event.command = DTC_EVENT_READ_ALL;
 8000994:	2301      	movs	r3, #1
 8000996:	733b      	strb	r3, [r7, #12]
             osMessageQueuePut(dtcProcessingQueueHandle, &event, 0U, 0U);
 8000998:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	f107 010c 	add.w	r1, r7, #12
 80009a0:	2300      	movs	r3, #0
 80009a2:	2200      	movs	r2, #0
 80009a4:	f005 fb90 	bl	80060c8 <osMessageQueuePut>
        } else if (rxHeader.StdId == 0x7E0 && rxData[0] == 0x14) { // Clear DTC
             event.command = DTC_EVENT_CLEAR_ALL;
             osMessageQueuePut(dtcProcessingQueueHandle, &event, 0U, 0U);
        }
    }
}
 80009a8:	e010      	b.n	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
        } else if (rxHeader.StdId == 0x7E0 && rxData[0] == 0x14) { // Clear DTC
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	f5b3 6ffc 	cmp.w	r3, #2016	@ 0x7e0
 80009b0:	d10c      	bne.n	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
 80009b2:	7d3b      	ldrb	r3, [r7, #20]
 80009b4:	2b14      	cmp	r3, #20
 80009b6:	d109      	bne.n	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
             event.command = DTC_EVENT_CLEAR_ALL;
 80009b8:	2302      	movs	r3, #2
 80009ba:	733b      	strb	r3, [r7, #12]
             osMessageQueuePut(dtcProcessingQueueHandle, &event, 0U, 0U);
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	f107 010c 	add.w	r1, r7, #12
 80009c4:	2300      	movs	r3, #0
 80009c6:	2200      	movs	r2, #0
 80009c8:	f005 fb7e 	bl	80060c8 <osMessageQueuePut>
}
 80009cc:	bf00      	nop
 80009ce:	3738      	adds	r7, #56	@ 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200001c0 	.word	0x200001c0

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fe19 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f831 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 f98d 	bl	8000d04 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ea:	f000 f963 	bl	8000cb4 <MX_DMA_Init>
  MX_I2C1_Init();
 80009ee:	f000 f8d3 	bl	8000b98 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009f2:	f000 f8ff 	bl	8000bf4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80009f6:	f000 f933 	bl	8000c60 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80009fa:	f000 f897 	bl	8000b2c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef canfilterconfig = {0};
 80009fe:	463b      	mov	r3, r7
 8000a00:	2228      	movs	r2, #40	@ 0x28
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f008 ffa9 	bl	800995c <memset>
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000a12:	463b      	mov	r3, r7
 8000a14:	4619      	mov	r1, r3
 8000a16:	480a      	ldr	r0, [pc, #40]	@ (8000a40 <main+0x68>)
 8000a18:	f000 ff6a 	bl	80018f0 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8000a1c:	4808      	ldr	r0, [pc, #32]	@ (8000a40 <main+0x68>)
 8000a1e:	f001 f845 	bl	8001aac <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a22:	2102      	movs	r1, #2
 8000a24:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <main+0x68>)
 8000a26:	f001 fa77 	bl	8001f18 <HAL_CAN_ActivateNotification>
  printf("ECU System Initialized (Advanced Arch).\r\n");
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <main+0x6c>)
 8000a2c:	f008 feb6 	bl	800979c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();   //  RTOS 커널을 초기화
 8000a30:	f004 ffb2 	bl	8005998 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a34:	f000 f9c4 	bl	8000dc0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a38:	f004 ffd2 	bl	80059e0 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <main+0x64>
 8000a40:	20000088 	.word	0x20000088
 8000a44:	0800a4b0 	.word	0x0800a4b0

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	@ 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2234      	movs	r2, #52	@ 0x34
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f008 ff80 	bl	800995c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b2c      	ldr	r3, [pc, #176]	@ (8000b24 <SystemClock_Config+0xdc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	4a2b      	ldr	r2, [pc, #172]	@ (8000b24 <SystemClock_Config+0xdc>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7c:	4b29      	ldr	r3, [pc, #164]	@ (8000b24 <SystemClock_Config+0xdc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <SystemClock_Config+0xe0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <SystemClock_Config+0xe0>)
 8000a92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <SystemClock_Config+0xe0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000abc:	23b4      	movs	r3, #180	@ 0xb4
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 f969 	bl	8003da8 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000adc:	f000 fab8 	bl	8001050 <Error_Handler>
  }

  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ae0:	f002 fe4e 	bl	8003780 <HAL_PWREx_EnableOverDrive>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000aea:	f000 fab1 	bl	8001050 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af2:	2302      	movs	r3, #2
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b04:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	2105      	movs	r1, #5
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fe87 	bl	8003820 <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b18:	f000 fa9a 	bl	8001050 <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3750      	adds	r7, #80	@ 0x50
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  hcan1.Instance = CAN1;
 8000b30:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b32:	4a18      	ldr	r2, [pc, #96]	@ (8000b94 <MX_CAN1_Init+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b38:	2212      	movs	r2, #18
 8000b3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b4a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000b4e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000b56:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b7e:	f000 fdbb 	bl	80016f8 <HAL_CAN_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b88:	f000 fa62 	bl	8001050 <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000088 	.word	0x20000088
 8000b94:	40006400 	.word	0x40006400

08000b98 <MX_I2C1_Init>:

/**
  * @brief I2C1 Initialization Function
  */
static void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	@ (8000bec <MX_I2C1_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_I2C1_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bd6:	f001 ff4b 	bl	8002a70 <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 fa36 	bl	8001050 <Error_Handler>
  }
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000b0 	.word	0x200000b0
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	000186a0 	.word	0x000186a0

08000bf4 <MX_SPI1_Init>:

/**
  * @brief SPI1 Initialization Function
  */
static void MX_SPI1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000bfa:	4a18      	ldr	r2, [pc, #96]	@ (8000c5c <MX_SPI1_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c28:	2218      	movs	r2, #24
 8000c2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c40:	220a      	movs	r2, #10
 8000c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <MX_SPI1_Init+0x64>)
 8000c46:	f003 fb4d 	bl	80042e4 <HAL_SPI_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c50:	f000 f9fe 	bl	8001050 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000104 	.word	0x20000104
 8000c5c:	40013000 	.word	0x40013000

08000c60 <MX_USART2_UART_Init>:

/**
  * @brief USART2 Initialization Function
  */
static void MX_USART2_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <MX_USART2_UART_Init+0x50>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c98:	f004 fa3e 	bl	8005118 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ca2:	f000 f9d5 	bl	8001050 <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000015c 	.word	0x2000015c
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <MX_DMA_Init+0x4c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d00 <MX_DMA_Init+0x4c>)
 8000cc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <MX_DMA_Init+0x4c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2105      	movs	r1, #5
 8000cda:	200b      	movs	r0, #11
 8000cdc:	f001 fc2f 	bl	800253e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ce0:	200b      	movs	r0, #11
 8000ce2:	f001 fc48 	bl	8002576 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2105      	movs	r1, #5
 8000cea:	2010      	movs	r0, #16
 8000cec:	f001 fc27 	bl	800253e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cf0:	2010      	movs	r0, #16
 8000cf2:	f001 fc40 	bl	8002576 <HAL_NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a25      	ldr	r2, [pc, #148]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b1c      	ldr	r3, [pc, #112]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a17      	ldr	r2, [pc, #92]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_GPIO_Init+0xb4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <MX_GPIO_Init+0xb8>)
 8000d90:	f001 fe54 	bl	8002a3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = EEPROM_CS_PIN;
 8000d94:	2310      	movs	r3, #16
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_PORT, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <MX_GPIO_Init+0xb8>)
 8000dac:	f001 fcb2 	bl	8002714 <HAL_GPIO_Init>
}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	@ 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <MX_FREERTOS_Init>:

/* USER CODE BEGIN 4 */
void MX_FREERTOS_Init(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0
  eepromMutexHandle = osMutexNew(NULL);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f004 fedd 	bl	8005b86 <osMutexNew>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a26      	ldr	r2, [pc, #152]	@ (8000e68 <MX_FREERTOS_Init+0xa8>)
 8000dd0:	6013      	str	r3, [r2, #0]
  i2cRxDoneSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f004 ffe3 	bl	8005da2 <osSemaphoreNew>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a23      	ldr	r2, [pc, #140]	@ (8000e6c <MX_FREERTOS_Init+0xac>)
 8000de0:	6013      	str	r3, [r2, #0]
  spiTxDoneSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2001      	movs	r0, #1
 8000de8:	f004 ffdb 	bl	8005da2 <osSemaphoreNew>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a20      	ldr	r2, [pc, #128]	@ (8000e70 <MX_FREERTOS_Init+0xb0>)
 8000df0:	6013      	str	r3, [r2, #0]
  canTxDoneSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2001      	movs	r0, #1
 8000df8:	f004 ffd3 	bl	8005da2 <osSemaphoreNew>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8000e74 <MX_FREERTOS_Init+0xb4>)
 8000e00:	6013      	str	r3, [r2, #0]
  dtcProcessingQueueHandle = osMessageQueueNew(8, sizeof(DtcEvent_t), NULL);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2108      	movs	r1, #8
 8000e06:	2008      	movs	r0, #8
 8000e08:	f005 f8ea 	bl	8005fe0 <osMessageQueueNew>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000e78 <MX_FREERTOS_Init+0xb8>)
 8000e10:	6013      	str	r3, [r2, #0]

  const osThreadAttr_t defaultTaskAttr = { .name = "DefaultTask", .stack_size = 256 * 4 };
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2224      	movs	r2, #36	@ 0x24
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f008 fd9f 	bl	800995c <memset>
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_FREERTOS_Init+0xbc>)
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e26:	61bb      	str	r3, [r7, #24]
  i2cMonitorTaskHandle = osThreadNew(I2cMonitorTask, NULL, &defaultTaskAttr);
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4814      	ldr	r0, [pc, #80]	@ (8000e80 <MX_FREERTOS_Init+0xc0>)
 8000e30:	f004 fdfc 	bl	8005a2c <osThreadNew>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a13      	ldr	r2, [pc, #76]	@ (8000e84 <MX_FREERTOS_Init+0xc4>)
 8000e38:	6013      	str	r3, [r2, #0]
  spiEepromTaskHandle = osThreadNew(SpiEepromTask, NULL, &defaultTaskAttr);
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <MX_FREERTOS_Init+0xc8>)
 8000e42:	f004 fdf3 	bl	8005a2c <osThreadNew>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <MX_FREERTOS_Init+0xcc>)
 8000e4a:	6013      	str	r3, [r2, #0]
  uartMonitorTaskHandle = osThreadNew(UartMonitorTask, NULL, &defaultTaskAttr);
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2100      	movs	r1, #0
 8000e52:	480f      	ldr	r0, [pc, #60]	@ (8000e90 <MX_FREERTOS_Init+0xd0>)
 8000e54:	f004 fdea 	bl	8005a2c <osThreadNew>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e94 <MX_FREERTOS_Init+0xd4>)
 8000e5c:	6013      	str	r3, [r2, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200001b0 	.word	0x200001b0
 8000e6c:	200001b4 	.word	0x200001b4
 8000e70:	200001b8 	.word	0x200001b8
 8000e74:	200001bc 	.word	0x200001bc
 8000e78:	200001c0 	.word	0x200001c0
 8000e7c:	0800a4dc 	.word	0x0800a4dc
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	200001a4 	.word	0x200001a4
 8000e88:	08000eb1 	.word	0x08000eb1
 8000e8c:	200001a8 	.word	0x200001a8
 8000e90:	08001009 	.word	0x08001009
 8000e94:	200001ac 	.word	0x200001ac

08000e98 <I2cMonitorTask>:

void I2cMonitorTask(void *argument) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  for(;;) {
    pmic_request_fault_read_dma();
 8000ea0:	f000 f8dc 	bl	800105c <pmic_request_fault_read_dma>
    osDelay(200);
 8000ea4:	20c8      	movs	r0, #200	@ 0xc8
 8000ea6:	f004 fe53 	bl	8005b50 <osDelay>
    pmic_request_fault_read_dma();
 8000eaa:	bf00      	nop
 8000eac:	e7f8      	b.n	8000ea0 <I2cMonitorTask+0x8>
	...

08000eb0 <SpiEepromTask>:
  }
}

void SpiEepromTask(void *argument) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09a      	sub	sp, #104	@ 0x68
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  CAN_TxHeaderTypeDef txHeader;
  uint8_t txData[8];
  uint32_t txMailbox;

  for(;;) {
    if (osMessageQueueGet(dtcProcessingQueueHandle, &event, NULL, osWaitForever) == osOK) {
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8000fec <SpiEepromTask+0x13c>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f005 f95f 	bl	8006188 <osMessageQueueGet>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f3      	bne.n	8000eb8 <SpiEepromTask+0x8>
        osMutexAcquire(eepromMutexHandle, osWaitForever);    // Mutex획득해서 다른작업의 접근 제한
 8000ed0:	4b47      	ldr	r3, [pc, #284]	@ (8000ff0 <SpiEepromTask+0x140>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 feda 	bl	8005c92 <osMutexAcquire>
        switch(event.command) {
 8000ede:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d075      	beq.n	8000fd2 <SpiEepromTask+0x122>
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	dc79      	bgt.n	8000fde <SpiEepromTask+0x12e>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <SpiEepromTask+0x44>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d00a      	beq.n	8000f08 <SpiEepromTask+0x58>
 8000ef2:	e074      	b.n	8000fde <SpiEepromTask+0x12e>
            case DTC_EVENT_WRITE:
                printf("[SPI Task] Logging DTC: 0x%lX\r\n", event.dtc_code);
 8000ef4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	483e      	ldr	r0, [pc, #248]	@ (8000ff4 <SpiEepromTask+0x144>)
 8000efa:	f008 fbe7 	bl	80096cc <iprintf>
                eeprom_log_new_dtc(event.dtc_code);    // DTC코드를 저장함
 8000efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fbff 	bl	8000704 <eeprom_log_new_dtc>
                break;
 8000f06:	e06a      	b.n	8000fde <SpiEepromTask+0x12e>
            case DTC_EVENT_READ_ALL:
                printf("[SPI Task] Reading DTCs for CAN.\r\n");
 8000f08:	483b      	ldr	r0, [pc, #236]	@ (8000ff8 <SpiEepromTask+0x148>)
 8000f0a:	f008 fc47 	bl	800979c <puts>
                uint8_t count = eeprom_read_all_dtcs(dtc_buffer);
 8000f0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fc56 	bl	80007c4 <eeprom_read_all_dtcs>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                txHeader.StdId = 0x7E8; txHeader.IDE = CAN_ID_STD; txHeader.RTR = CAN_RTR_DATA;
 8000f1e:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
                if (count == 0) {
 8000f2c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d111      	bne.n	8000f58 <SpiEepromTask+0xa8>
                    txHeader.DLC = 3; txData[0] = 0x59; txData[1] = 0x02; txData[2] = 0xFF; // No DTC
 8000f34:	2303      	movs	r3, #3
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f38:	2359      	movs	r3, #89	@ 0x59
 8000f3a:	743b      	strb	r3, [r7, #16]
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	747b      	strb	r3, [r7, #17]
 8000f40:	23ff      	movs	r3, #255	@ 0xff
 8000f42:	74bb      	strb	r3, [r7, #18]
                    HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	f107 0210 	add.w	r2, r7, #16
 8000f4c:	f107 0118 	add.w	r1, r7, #24
 8000f50:	482a      	ldr	r0, [pc, #168]	@ (8000ffc <SpiEepromTask+0x14c>)
 8000f52:	f000 fdef 	bl	8001b34 <HAL_CAN_AddTxMessage>
                        txData[5] = 0x01;    // status: confirmed
                        HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
                        osSemaphoreAcquire(canTxDoneSemaphoreHandle, 100);
                    }
                }
                break;
 8000f56:	e042      	b.n	8000fde <SpiEepromTask+0x12e>
                    for(int i = 0; i < count; i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f5c:	e033      	b.n	8000fc6 <SpiEepromTask+0x116>
                        txHeader.DLC = 6;
 8000f5e:	2306      	movs	r3, #6
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
                        txData[0] = 0x59; txData[1] = 0x02;
 8000f62:	2359      	movs	r3, #89	@ 0x59
 8000f64:	743b      	strb	r3, [r7, #16]
 8000f66:	2302      	movs	r3, #2
 8000f68:	747b      	strb	r3, [r7, #17]
                        txData[2] = (dtc_buffer[i] >> 16) & 0xFF;
 8000f6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	3368      	adds	r3, #104	@ 0x68
 8000f70:	443b      	add	r3, r7
 8000f72:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	74bb      	strb	r3, [r7, #18]
                        txData[3] = (dtc_buffer[i] >> 8) & 0xFF;
 8000f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	3368      	adds	r3, #104	@ 0x68
 8000f82:	443b      	add	r3, r7
 8000f84:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	74fb      	strb	r3, [r7, #19]
                        txData[4] = dtc_buffer[i] & 0xFF;
 8000f8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	3368      	adds	r3, #104	@ 0x68
 8000f94:	443b      	add	r3, r7
 8000f96:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	753b      	strb	r3, [r7, #20]
                        txData[5] = 0x01;    // status: confirmed
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	757b      	strb	r3, [r7, #21]
                        HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox);
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	f107 0210 	add.w	r2, r7, #16
 8000faa:	f107 0118 	add.w	r1, r7, #24
 8000fae:	4813      	ldr	r0, [pc, #76]	@ (8000ffc <SpiEepromTask+0x14c>)
 8000fb0:	f000 fdc0 	bl	8001b34 <HAL_CAN_AddTxMessage>
                        osSemaphoreAcquire(canTxDoneSemaphoreHandle, 100);
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <SpiEepromTask+0x150>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2164      	movs	r1, #100	@ 0x64
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f004 ff7a 	bl	8005eb4 <osSemaphoreAcquire>
                    for(int i = 0; i < count; i++) {
 8000fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000fc6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000fca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbc6      	blt.n	8000f5e <SpiEepromTask+0xae>
                break;
 8000fd0:	e005      	b.n	8000fde <SpiEepromTask+0x12e>
            case DTC_EVENT_CLEAR_ALL:
                printf("[SPI Task] Clearing all DTCs.\r\n");
 8000fd2:	480c      	ldr	r0, [pc, #48]	@ (8001004 <SpiEepromTask+0x154>)
 8000fd4:	f008 fbe2 	bl	800979c <puts>
                eeprom_clear_all_dtcs();
 8000fd8:	f7ff fc24 	bl	8000824 <eeprom_clear_all_dtcs>
                break;
 8000fdc:	bf00      	nop
        }
        osMutexRelease(eepromMutexHandle);
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SpiEepromTask+0x140>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 fea0 	bl	8005d28 <osMutexRelease>
    if (osMessageQueueGet(dtcProcessingQueueHandle, &event, NULL, osWaitForever) == osOK) {
 8000fe8:	e766      	b.n	8000eb8 <SpiEepromTask+0x8>
 8000fea:	bf00      	nop
 8000fec:	200001c0 	.word	0x200001c0
 8000ff0:	200001b0 	.word	0x200001b0
 8000ff4:	0800a4e8 	.word	0x0800a4e8
 8000ff8:	0800a508 	.word	0x0800a508
 8000ffc:	20000088 	.word	0x20000088
 8001000:	200001bc 	.word	0x200001bc
 8001004:	0800a52c 	.word	0x0800a52c

08001008 <UartMonitorTask>:
    }
  }
}

void UartMonitorTask(void *argument) {
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    char msg[] = "ECU Alive...\r\n";
 8001010:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <UartMonitorTask+0x40>)
 8001012:	f107 0408 	add.w	r4, r7, #8
 8001016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001018:	c407      	stmia	r4!, {r0, r1, r2}
 800101a:	8023      	strh	r3, [r4, #0]
 800101c:	3402      	adds	r4, #2
 800101e:	0c1b      	lsrs	r3, r3, #16
 8001020:	7023      	strb	r3, [r4, #0]
    for(;;) {
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 200);
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f8f2 	bl	8000210 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	f107 0108 	add.w	r1, r7, #8
 8001034:	23c8      	movs	r3, #200	@ 0xc8
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <UartMonitorTask+0x44>)
 8001038:	f004 f8be 	bl	80051b8 <HAL_UART_Transmit>
        osDelay(1000);
 800103c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001040:	f004 fd86 	bl	8005b50 <osDelay>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 200);
 8001044:	bf00      	nop
 8001046:	e7ec      	b.n	8001022 <UartMonitorTask+0x1a>
 8001048:	0800a54c 	.word	0x0800a54c
 800104c:	2000015c 	.word	0x2000015c

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();    // 모든 인터럽트를 비활성화하고 시스템을 멈춤
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <Error_Handler+0x8>

0800105c <pmic_request_fault_read_dma>:
extern I2C_HandleTypeDef hi2c1;
extern osMessageQueueId_t dtcProcessingQueueHandle;
extern volatile I2C_State_t g_i2c_state;
extern uint8_t g_i2c_rx_buffer[3];

void pmic_request_fault_read_dma(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af02      	add	r7, sp, #8
    if (g_i2c_state != I2C_STATE_IDLE) {
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <pmic_request_fault_read_dma+0x38>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10f      	bne.n	800108c <pmic_request_fault_read_dma+0x30>
        return;
    }
    g_i2c_state = I2C_STATE_READ_FAULTS_WAIT;
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <pmic_request_fault_read_dma+0x38>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
    uint16_t dev_address = (PMIC_SLAVE_ADDRESS << 1);
 8001072:	23c0      	movs	r3, #192	@ 0xc0
 8001074:	80fb      	strh	r3, [r7, #6]
    HAL_I2C_Mem_Read_DMA(&hi2c1, dev_address, REGISTER_UV_OV_STATUS, I2C_MEMADD_SIZE_8BIT, g_i2c_rx_buffer, 3);
 8001076:	88f9      	ldrh	r1, [r7, #6]
 8001078:	2303      	movs	r3, #3
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <pmic_request_fault_read_dma+0x3c>)
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	2207      	movs	r2, #7
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <pmic_request_fault_read_dma+0x40>)
 8001086:	f001 fe37 	bl	8002cf8 <HAL_I2C_Mem_Read_DMA>
 800108a:	e000      	b.n	800108e <pmic_request_fault_read_dma+0x32>
        return;
 800108c:	bf00      	nop
}
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001c4 	.word	0x200001c4
 8001098:	200001c8 	.word	0x200001c8
 800109c:	200000b0 	.word	0x200000b0

080010a0 <pmic_i2c_dma_rx_callback_handler>:

void pmic_i2c_dma_rx_callback_handler(void) {          // 인터럽트 발생하면 실행. fault여부를 확인.
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
    if (g_i2c_state == I2C_STATE_READ_FAULTS_WAIT)
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <pmic_i2c_dma_rx_callback_handler+0x90>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d13a      	bne.n	8001126 <pmic_i2c_dma_rx_callback_handler+0x86>
    {
        RegisterUvOvStatus uv_ov_reg;
        uv_ov_reg.raw = g_i2c_rx_buffer[0];
 80010b0:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <pmic_i2c_dma_rx_callback_handler+0x94>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	753b      	strb	r3, [r7, #20]
        RegisterOcStatus oc_reg;
        oc_reg.raw = g_i2c_rx_buffer[1];
 80010b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <pmic_i2c_dma_rx_callback_handler+0x94>)
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	743b      	strb	r3, [r7, #16]
        RegisterSystemStatus temp_reg;
        temp_reg.raw = g_i2c_rx_buffer[2];
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <pmic_i2c_dma_rx_callback_handler+0x94>)
 80010be:	789b      	ldrb	r3, [r3, #2]
 80010c0:	733b      	strb	r3, [r7, #12]

        DtcEvent_t event;
        event.command = DTC_EVENT_WRITE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	713b      	strb	r3, [r7, #4]


        //   SpiEepromTask을 깨움

        if (uv_ov_reg.bits.bucka_uv) {
 80010c6:	7d3b      	ldrb	r3, [r7, #20]
 80010c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d008      	beq.n	80010e4 <pmic_i2c_dma_rx_callback_handler+0x44>
            event.dtc_code = 0xB0000001;
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <pmic_i2c_dma_rx_callback_handler+0x98>)
 80010d4:	60bb      	str	r3, [r7, #8]
            osMessageQueuePut(dtcProcessingQueueHandle, &event, 0U, 0U);
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <pmic_i2c_dma_rx_callback_handler+0x9c>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	1d39      	adds	r1, r7, #4
 80010dc:	2300      	movs	r3, #0
 80010de:	2200      	movs	r2, #0
 80010e0:	f004 fff2 	bl	80060c8 <osMessageQueuePut>
        }
        if (oc_reg.bits.bucka_oc) {
 80010e4:	7c3b      	ldrb	r3, [r7, #16]
 80010e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d008      	beq.n	8001102 <pmic_i2c_dma_rx_callback_handler+0x62>
            event.dtc_code = 0xB0000002;
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <pmic_i2c_dma_rx_callback_handler+0xa0>)
 80010f2:	60bb      	str	r3, [r7, #8]
            osMessageQueuePut(dtcProcessingQueueHandle, &event, 0U, 0U);
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <pmic_i2c_dma_rx_callback_handler+0x9c>)
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	1d39      	adds	r1, r7, #4
 80010fa:	2300      	movs	r3, #0
 80010fc:	2200      	movs	r2, #0
 80010fe:	f004 ffe3 	bl	80060c8 <osMessageQueuePut>
        }
        if (temp_reg.bits.pmic_temp_shutdown) {
 8001102:	7b3b      	ldrb	r3, [r7, #12]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d008      	beq.n	8001120 <pmic_i2c_dma_rx_callback_handler+0x80>
            event.dtc_code = 0xB0000003;
 800110e:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <pmic_i2c_dma_rx_callback_handler+0xa4>)
 8001110:	60bb      	str	r3, [r7, #8]
            osMessageQueuePut(dtcProcessingQueueHandle, &event, 0U, 0U);
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <pmic_i2c_dma_rx_callback_handler+0x9c>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	1d39      	adds	r1, r7, #4
 8001118:	2300      	movs	r3, #0
 800111a:	2200      	movs	r2, #0
 800111c:	f004 ffd4 	bl	80060c8 <osMessageQueuePut>
        }

        g_i2c_state = I2C_STATE_IDLE;
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <pmic_i2c_dma_rx_callback_handler+0x90>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    }
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001c4 	.word	0x200001c4
 8001134:	200001c8 	.word	0x200001c8
 8001138:	b0000001 	.word	0xb0000001
 800113c:	200001c0 	.word	0x200001c0
 8001140:	b0000002 	.word	0xb0000002
 8001144:	b0000003 	.word	0xb0000003

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <HAL_MspInit+0x54>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a11      	ldr	r2, [pc, #68]	@ (800119c <HAL_MspInit+0x54>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <HAL_MspInit+0x54>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <HAL_MspInit+0x54>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <HAL_MspInit+0x54>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <HAL_MspInit+0x54>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	210f      	movs	r1, #15
 800118a:	f06f 0001 	mvn.w	r0, #1
 800118e:	f001 f9d6 	bl	800253e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_CAN_MspInit+0x94>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d134      	bne.n	800122c <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <HAL_CAN_MspInit+0x98>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <HAL_CAN_MspInit+0x98>)
 80011cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_CAN_MspInit+0x98>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <HAL_CAN_MspInit+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a14      	ldr	r2, [pc, #80]	@ (8001238 <HAL_CAN_MspInit+0x98>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_CAN_MspInit+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800120c:	2309      	movs	r3, #9
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4809      	ldr	r0, [pc, #36]	@ (800123c <HAL_CAN_MspInit+0x9c>)
 8001218:	f001 fa7c 	bl	8002714 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2105      	movs	r1, #5
 8001220:	2014      	movs	r0, #20
 8001222:	f001 f98c 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001226:	2014      	movs	r0, #20
 8001228:	f001 f9a5 	bl	8002576 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	@ 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40006400 	.word	0x40006400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	@ (80012c4 <HAL_I2C_MspInit+0x84>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12b      	bne.n	80012ba <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800127e:	23c0      	movs	r3, #192	@ 0xc0
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001282:	2312      	movs	r3, #18
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128e:	2304      	movs	r3, #4
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <HAL_I2C_MspInit+0x8c>)
 800129a:	f001 fa3b 	bl	8002714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 80012a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_I2C_MspInit+0x88>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40005400 	.word	0x40005400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400

080012d0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <HAL_SPI_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12b      	bne.n	800134a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_SPI_MspInit+0x88>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <HAL_SPI_MspInit+0x88>)
 80012fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_SPI_MspInit+0x88>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_SPI_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <HAL_SPI_MspInit+0x88>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_SPI_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800132a:	23e0      	movs	r3, #224	@ 0xe0
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800133a:	2305      	movs	r3, #5
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <HAL_SPI_MspInit+0x8c>)
 8001346:	f001 f9e5 	bl	8002714 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	@ 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40013000 	.word	0x40013000
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <HAL_UART_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12b      	bne.n	80013da <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <HAL_UART_MspInit+0x88>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <HAL_UART_MspInit+0x88>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001390:	6413      	str	r3, [r2, #64]	@ 0x40
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <HAL_UART_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <HAL_UART_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <HAL_UART_MspInit+0x88>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ca:	2307      	movs	r3, #7
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <HAL_UART_MspInit+0x8c>)
 80013d6:	f001 f99d 	bl	8002714 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	@ 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40004400 	.word	0x40004400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <UsageFault_Handler+0x4>

08001418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f000 f945 	bl	80016b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800142e:	f006 ff0f 	bl	8008250 <xTaskGetSchedulerState>
 8001432:	4603      	mov	r3, r0
 8001434:	2b01      	cmp	r3, #1
 8001436:	d001      	beq.n	800143c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001438:	f007 fe06 	bl	8009048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <CAN1_RX0_IRQHandler+0x10>)
 8001446:	f000 fd8d 	bl	8001f64 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000088 	.word	0x20000088

08001454 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e00a      	b.n	800147c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001466:	f3af 8000 	nop.w
 800146a:	4601      	mov	r1, r0
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	60ba      	str	r2, [r7, #8]
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf0      	blt.n	8001466 <_read+0x12>
  }

  return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e009      	b.n	80014b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	60ba      	str	r2, [r7, #8]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f9dd 	bl	8000868 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbf1      	blt.n	80014a0 <_write+0x12>
  }
  return len;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_close>:

int _close(int file)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ee:	605a      	str	r2, [r3, #4]
  return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_isatty>:

int _isatty(int file)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001538:	4a14      	ldr	r2, [pc, #80]	@ (800158c <_sbrk+0x5c>)
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <_sbrk+0x60>)
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001544:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <_sbrk+0x64>)
 800154e:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <_sbrk+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	429a      	cmp	r2, r3
 800155e:	d207      	bcs.n	8001570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001560:	f008 fa4a 	bl	80099f8 <__errno>
 8001564:	4603      	mov	r3, r0
 8001566:	220c      	movs	r2, #12
 8001568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	e009      	b.n	8001584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001576:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <_sbrk+0x64>)
 8001580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20020000 	.word	0x20020000
 8001590:	00000400 	.word	0x00000400
 8001594:	200001cc 	.word	0x200001cc
 8001598:	20004c70 	.word	0x20004c70

0800159c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015c4:	f7ff ffea 	bl	800159c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	@ (8001600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	@ (800160c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f008 fa09 	bl	8009a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7ff f9f1 	bl	80009d8 <main>
  bx  lr    
 80015f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001604:	0800a5d0 	.word	0x0800a5d0
  ldr r2, =_sbss
 8001608:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800160c:	20004c70 	.word	0x20004c70

08001610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <HAL_Init+0x40>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_Init+0x40>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800162e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_Init+0x40>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 ff73 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fd7e 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 ff8b 	bl	8002592 <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 ff53 	bl	800253e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000004 	.word	0x20000004

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008
 80016dc:	200001d0 	.word	0x200001d0

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200001d0 	.word	0x200001d0

080016f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0ed      	b.n	80018e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fd42 	bl	80011a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800172c:	f7ff ffd8 	bl	80016e0 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001732:	e012      	b.n	800175a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001734:	f7ff ffd4 	bl	80016e0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b0a      	cmp	r3, #10
 8001740:	d90b      	bls.n	800175a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2205      	movs	r2, #5
 8001752:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0c5      	b.n	80018e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0e5      	beq.n	8001734 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0202 	bic.w	r2, r2, #2
 8001776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001778:	f7ff ffb2 	bl	80016e0 <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800177e:	e012      	b.n	80017a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001780:	f7ff ffae 	bl	80016e0 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d90b      	bls.n	80017a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2205      	movs	r2, #5
 800179e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e09f      	b.n	80018e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e5      	bne.n	8001780 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7e1b      	ldrb	r3, [r3, #24]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e007      	b.n	80017de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7e5b      	ldrb	r3, [r3, #25]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d108      	bne.n	80017f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e007      	b.n	8001808 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001806:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7e9b      	ldrb	r3, [r3, #26]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d108      	bne.n	8001822 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0220 	orr.w	r2, r2, #32
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e007      	b.n	8001832 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0220 	bic.w	r2, r2, #32
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7edb      	ldrb	r3, [r3, #27]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d108      	bne.n	800184c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0210 	bic.w	r2, r2, #16
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e007      	b.n	800185c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0210 	orr.w	r2, r2, #16
 800185a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7f1b      	ldrb	r3, [r3, #28]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d108      	bne.n	8001876 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0208 	orr.w	r2, r2, #8
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e007      	b.n	8001886 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0208 	bic.w	r2, r2, #8
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7f5b      	ldrb	r3, [r3, #29]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0204 	orr.w	r2, r2, #4
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e007      	b.n	80018b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0204 	bic.w	r2, r2, #4
 80018ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	ea42 0103 	orr.w	r1, r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001900:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d003      	beq.n	8001910 <HAL_CAN_ConfigFilter+0x20>
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b02      	cmp	r3, #2
 800190c:	f040 80be 	bne.w	8001a8c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001910:	4b65      	ldr	r3, [pc, #404]	@ (8001aa8 <HAL_CAN_ConfigFilter+0x1b8>)
 8001912:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800192a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	431a      	orrs	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	2201      	movs	r2, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d123      	bne.n	80019ba <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	401a      	ands	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001994:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	3248      	adds	r2, #72	@ 0x48
 800199a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019b0:	6939      	ldr	r1, [r7, #16]
 80019b2:	3348      	adds	r3, #72	@ 0x48
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	440b      	add	r3, r1
 80019b8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d122      	bne.n	8001a08 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	3248      	adds	r2, #72	@ 0x48
 80019e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019fe:	6939      	ldr	r1, [r7, #16]
 8001a00:	3348      	adds	r3, #72	@ 0x48
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	440b      	add	r3, r1
 8001a06:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001a22:	e007      	b.n	8001a34 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	401a      	ands	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001a4e:	e007      	b.n	8001a60 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a7e:	f023 0201 	bic.w	r2, r3, #1
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e006      	b.n	8001a9a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
  }
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40006400 	.word	0x40006400

08001aac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d12e      	bne.n	8001b1e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff fe02 	bl	80016e0 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ade:	e012      	b.n	8001b06 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ae0:	f7ff fdfe 	bl	80016e0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b0a      	cmp	r3, #10
 8001aec:	d90b      	bls.n	8001b06 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2205      	movs	r2, #5
 8001afe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e012      	b.n	8001b2c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e5      	bne.n	8001ae0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e006      	b.n	8001b2c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b48:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d003      	beq.n	8001b60 <HAL_CAN_AddTxMessage+0x2c>
 8001b58:	7ffb      	ldrb	r3, [r7, #31]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	f040 80ad 	bne.w	8001cba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8095 	beq.w	8001caa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	0e1b      	lsrs	r3, r3, #24
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10d      	bne.n	8001bb8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ba6:	68f9      	ldr	r1, [r7, #12]
 8001ba8:	6809      	ldr	r1, [r1, #0]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3318      	adds	r3, #24
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	440b      	add	r3, r1
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e00f      	b.n	8001bd8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bcc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3318      	adds	r3, #24
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3318      	adds	r3, #24
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	440b      	add	r3, r1
 8001be8:	3304      	adds	r3, #4
 8001bea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	7d1b      	ldrb	r3, [r3, #20]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d111      	bne.n	8001c18 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3318      	adds	r3, #24
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4413      	add	r3, r2
 8001c00:	3304      	adds	r3, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	6811      	ldr	r1, [r2, #0]
 8001c08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3318      	adds	r3, #24
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	440b      	add	r3, r1
 8001c14:	3304      	adds	r3, #4
 8001c16:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3307      	adds	r3, #7
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	061a      	lsls	r2, r3, #24
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3306      	adds	r3, #6
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3305      	adds	r3, #5
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	4313      	orrs	r3, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	3204      	adds	r2, #4
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	6811      	ldr	r1, [r2, #0]
 8001c40:	ea43 0200 	orr.w	r2, r3, r0
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	440b      	add	r3, r1
 8001c4a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001c4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3303      	adds	r3, #3
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	061a      	lsls	r2, r3, #24
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3301      	adds	r3, #1
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	4610      	mov	r0, r2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	6811      	ldr	r1, [r2, #0]
 8001c76:	ea43 0200 	orr.w	r2, r3, r0
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	440b      	add	r3, r1
 8001c80:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001c84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4413      	add	r3, r2
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	6811      	ldr	r1, [r2, #0]
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3318      	adds	r3, #24
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	440b      	add	r3, r1
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e00e      	b.n	8001cc8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e006      	b.n	8001cc8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
  }
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3724      	adds	r7, #36	@ 0x24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d003      	beq.n	8001cf8 <HAL_CAN_GetRxMessage+0x24>
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	f040 8103 	bne.w	8001efe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10e      	bne.n	8001d1c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d116      	bne.n	8001d3a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0f7      	b.n	8001f0c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d107      	bne.n	8001d3a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e0e8      	b.n	8001f0c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	331b      	adds	r3, #27
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0204 	and.w	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10c      	bne.n	8001d72 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	331b      	adds	r3, #27
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0d5b      	lsrs	r3, r3, #21
 8001d68:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e00b      	b.n	8001d8a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	331b      	adds	r3, #27
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	331b      	adds	r3, #27
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0202 	and.w	r2, r3, #2
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	331b      	adds	r3, #27
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2208      	movs	r2, #8
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	331b      	adds	r3, #27
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	4413      	add	r3, r2
 8001dcc:	3304      	adds	r3, #4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	331b      	adds	r3, #27
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	331b      	adds	r3, #27
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	0a1a      	lsrs	r2, r3, #8
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0c1a      	lsrs	r2, r3, #16
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0e1a      	lsrs	r2, r3, #24
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	3303      	adds	r3, #3
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0a1a      	lsrs	r2, r3, #8
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3305      	adds	r3, #5
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0c1a      	lsrs	r2, r3, #16
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3306      	adds	r3, #6
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0e1a      	lsrs	r2, r3, #24
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	3307      	adds	r3, #7
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d108      	bne.n	8001eea <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	e007      	b.n	8001efa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0220 	orr.w	r2, r2, #32
 8001ef8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e006      	b.n	8001f0c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
  }
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f28:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d002      	beq.n	8001f36 <HAL_CAN_ActivateNotification+0x1e>
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d109      	bne.n	8001f4a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6959      	ldr	r1, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e006      	b.n	8001f58 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
  }
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	@ 0x28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d07c      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fc9e 	bl	8000908 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fcc:	e016      	b.n	8001ffc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe0:	e00c      	b.n	8001ffc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff4:	e002      	b.n	8001ffc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f96b 	bl	80022d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d024      	beq.n	8002050 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800200e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fc84 	bl	8000928 <HAL_CAN_TxMailbox1CompleteCallback>
 8002020:	e016      	b.n	8002050 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
 8002034:	e00c      	b.n	8002050 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
 8002048:	e002      	b.n	8002050 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f94b 	bl	80022e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d024      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002062:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fc6a 	bl	8000948 <HAL_CAN_TxMailbox2CompleteCallback>
 8002074:	e016      	b.n	80020a4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
 8002088:	e00c      	b.n	80020a4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
 800209c:	e002      	b.n	80020a4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f92b 	bl	80022fa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00c      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2210      	movs	r2, #16
 80020c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2208      	movs	r2, #8
 80020e2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f912 	bl	800230e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fc30 	bl	8000968 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2210      	movs	r2, #16
 800212a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2208      	movs	r2, #8
 8002146:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8f4 	bl	8002336 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8db 	bl	8002322 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f8de 	bl	800234a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00b      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2208      	movs	r2, #8
 80021a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f8d7 	bl	800235e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07b      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d072      	beq.n	80022aa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800221e:	2b00      	cmp	r3, #0
 8002220:	d043      	beq.n	80022aa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	d03e      	beq.n	80022aa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002232:	2b60      	cmp	r3, #96	@ 0x60
 8002234:	d02b      	beq.n	800228e <HAL_CAN_IRQHandler+0x32a>
 8002236:	2b60      	cmp	r3, #96	@ 0x60
 8002238:	d82e      	bhi.n	8002298 <HAL_CAN_IRQHandler+0x334>
 800223a:	2b50      	cmp	r3, #80	@ 0x50
 800223c:	d022      	beq.n	8002284 <HAL_CAN_IRQHandler+0x320>
 800223e:	2b50      	cmp	r3, #80	@ 0x50
 8002240:	d82a      	bhi.n	8002298 <HAL_CAN_IRQHandler+0x334>
 8002242:	2b40      	cmp	r3, #64	@ 0x40
 8002244:	d019      	beq.n	800227a <HAL_CAN_IRQHandler+0x316>
 8002246:	2b40      	cmp	r3, #64	@ 0x40
 8002248:	d826      	bhi.n	8002298 <HAL_CAN_IRQHandler+0x334>
 800224a:	2b30      	cmp	r3, #48	@ 0x30
 800224c:	d010      	beq.n	8002270 <HAL_CAN_IRQHandler+0x30c>
 800224e:	2b30      	cmp	r3, #48	@ 0x30
 8002250:	d822      	bhi.n	8002298 <HAL_CAN_IRQHandler+0x334>
 8002252:	2b10      	cmp	r3, #16
 8002254:	d002      	beq.n	800225c <HAL_CAN_IRQHandler+0x2f8>
 8002256:	2b20      	cmp	r3, #32
 8002258:	d005      	beq.n	8002266 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800225a:	e01d      	b.n	8002298 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002264:	e019      	b.n	800229a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	f043 0310 	orr.w	r3, r3, #16
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800226e:	e014      	b.n	800229a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	f043 0320 	orr.w	r3, r3, #32
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002278:	e00f      	b.n	800229a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002282:	e00a      	b.n	800229a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800228c:	e005      	b.n	800229a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002296:	e000      	b.n	800229a <HAL_CAN_IRQHandler+0x336>
            break;
 8002298:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80022a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2204      	movs	r2, #4
 80022b0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f854 	bl	8002372 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	@ 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	@ (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	@ (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	@ (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	@ 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
         );
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	@ 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f7ff ff8e 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff29 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002550:	f7ff ff3e 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff8e 	bl	800247c <NVIC_EncodePriority>
 8002560:	4602      	mov	r2, r0
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff5d 	bl	8002428 <__NVIC_SetPriority>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff31 	bl	80023ec <__NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffa2 	bl	80024e4 <SysTick_Config>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_DMA_Start_IT+0x26>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e040      	b.n	8002652 <HAL_DMA_Start_IT+0xa8>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d12f      	bne.n	8002644 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f85c 	bl	80026b6 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002602:	223f      	movs	r2, #63	@ 0x3f
 8002604:	409a      	lsls	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0216 	orr.w	r2, r2, #22
 8002618:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0208 	orr.w	r2, r2, #8
 8002630:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e005      	b.n	8002650 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800264c:	2302      	movs	r3, #2
 800264e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002650:	7dfb      	ldrb	r3, [r7, #23]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d004      	beq.n	8002678 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2280      	movs	r2, #128	@ 0x80
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e00c      	b.n	8002692 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2205      	movs	r2, #5
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026d2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b40      	cmp	r3, #64	@ 0x40
 80026e2:	d108      	bne.n	80026f6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026f4:	e007      	b.n	8002706 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	60da      	str	r2, [r3, #12]
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	@ 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e165      	b.n	80029fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	f040 8154 	bne.w	80029f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d005      	beq.n	8002766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002762:	2b02      	cmp	r3, #2
 8002764:	d130      	bne.n	80027c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279c:	2201      	movs	r2, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 0201 	and.w	r2, r3, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d017      	beq.n	8002804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d123      	bne.n	8002858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	08da      	lsrs	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3208      	adds	r2, #8
 8002818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0203 	and.w	r2, r3, #3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80ae 	beq.w	80029f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028b6:	4a58      	ldr	r2, [pc, #352]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3302      	adds	r3, #2
 80028be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	220f      	movs	r2, #15
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4f      	ldr	r2, [pc, #316]	@ (8002a1c <HAL_GPIO_Init+0x308>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d025      	beq.n	800292e <HAL_GPIO_Init+0x21a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002a20 <HAL_GPIO_Init+0x30c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01f      	beq.n	800292a <HAL_GPIO_Init+0x216>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002a24 <HAL_GPIO_Init+0x310>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d019      	beq.n	8002926 <HAL_GPIO_Init+0x212>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002a28 <HAL_GPIO_Init+0x314>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_GPIO_Init+0x20e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4b      	ldr	r2, [pc, #300]	@ (8002a2c <HAL_GPIO_Init+0x318>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00d      	beq.n	800291e <HAL_GPIO_Init+0x20a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4a      	ldr	r2, [pc, #296]	@ (8002a30 <HAL_GPIO_Init+0x31c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <HAL_GPIO_Init+0x206>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a49      	ldr	r2, [pc, #292]	@ (8002a34 <HAL_GPIO_Init+0x320>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_GPIO_Init+0x202>
 8002912:	2306      	movs	r3, #6
 8002914:	e00c      	b.n	8002930 <HAL_GPIO_Init+0x21c>
 8002916:	2307      	movs	r3, #7
 8002918:	e00a      	b.n	8002930 <HAL_GPIO_Init+0x21c>
 800291a:	2305      	movs	r3, #5
 800291c:	e008      	b.n	8002930 <HAL_GPIO_Init+0x21c>
 800291e:	2304      	movs	r3, #4
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x21c>
 8002922:	2303      	movs	r3, #3
 8002924:	e004      	b.n	8002930 <HAL_GPIO_Init+0x21c>
 8002926:	2302      	movs	r3, #2
 8002928:	e002      	b.n	8002930 <HAL_GPIO_Init+0x21c>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_GPIO_Init+0x21c>
 800292e:	2300      	movs	r3, #0
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	f002 0203 	and.w	r2, r2, #3
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	4093      	lsls	r3, r2
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002940:	4935      	ldr	r1, [pc, #212]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a38 <HAL_GPIO_Init+0x324>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002972:	4a31      	ldr	r2, [pc, #196]	@ (8002a38 <HAL_GPIO_Init+0x324>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002978:	4b2f      	ldr	r3, [pc, #188]	@ (8002a38 <HAL_GPIO_Init+0x324>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800299c:	4a26      	ldr	r2, [pc, #152]	@ (8002a38 <HAL_GPIO_Init+0x324>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029a2:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_GPIO_Init+0x324>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <HAL_GPIO_Init+0x324>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <HAL_GPIO_Init+0x324>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029f0:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <HAL_GPIO_Init+0x324>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	f67f ae96 	bls.w	8002730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3724      	adds	r7, #36	@ 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020c00 	.word	0x40020c00
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40021400 	.word	0x40021400
 8002a34:	40021800 	.word	0x40021800
 8002a38:	40013c00 	.word	0x40013c00

08002a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a4c:	787b      	ldrb	r3, [r7, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a58:	e003      	b.n	8002a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	041a      	lsls	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	619a      	str	r2, [r3, #24]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e12b      	b.n	8002cda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe fbd2 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	@ 0x24
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ad4:	f000 ff96 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8002ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a81      	ldr	r2, [pc, #516]	@ (8002ce4 <HAL_I2C_Init+0x274>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d807      	bhi.n	8002af4 <HAL_I2C_Init+0x84>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a80      	ldr	r2, [pc, #512]	@ (8002ce8 <HAL_I2C_Init+0x278>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e006      	b.n	8002b02 <HAL_I2C_Init+0x92>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a7d      	ldr	r2, [pc, #500]	@ (8002cec <HAL_I2C_Init+0x27c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0e7      	b.n	8002cda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a78      	ldr	r2, [pc, #480]	@ (8002cf0 <HAL_I2C_Init+0x280>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9b      	lsrs	r3, r3, #18
 8002b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce4 <HAL_I2C_Init+0x274>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d802      	bhi.n	8002b44 <HAL_I2C_Init+0xd4>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3301      	adds	r3, #1
 8002b42:	e009      	b.n	8002b58 <HAL_I2C_Init+0xe8>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	4a69      	ldr	r2, [pc, #420]	@ (8002cf4 <HAL_I2C_Init+0x284>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	3301      	adds	r3, #1
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	495c      	ldr	r1, [pc, #368]	@ (8002ce4 <HAL_I2C_Init+0x274>)
 8002b74:	428b      	cmp	r3, r1
 8002b76:	d819      	bhi.n	8002bac <HAL_I2C_Init+0x13c>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1e59      	subs	r1, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_I2C_Init+0x138>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e59      	subs	r1, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba6:	e051      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e04f      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d111      	bne.n	8002bd8 <HAL_I2C_Init+0x168>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	440b      	add	r3, r1
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e012      	b.n	8002bfe <HAL_I2C_Init+0x18e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e58      	subs	r0, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	0099      	lsls	r1, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Init+0x196>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e022      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10e      	bne.n	8002c2c <HAL_I2C_Init+0x1bc>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1e58      	subs	r0, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	440b      	add	r3, r1
 8002c1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c2a:	e00f      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e58      	subs	r0, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	0099      	lsls	r1, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6809      	ldr	r1, [r1, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6911      	ldr	r1, [r2, #16]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	000186a0 	.word	0x000186a0
 8002ce8:	001e847f 	.word	0x001e847f
 8002cec:	003d08ff 	.word	0x003d08ff
 8002cf0:	431bde83 	.word	0x431bde83
 8002cf4:	10624dd3 	.word	0x10624dd3

08002cf8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	@ 0x30
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	813b      	strh	r3, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d12:	f7fe fce5 	bl	80016e0 <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	f040 8172 	bne.w	800300e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d2a:	4b93      	ldr	r3, [pc, #588]	@ (8002f78 <HAL_I2C_Mem_Read_DMA+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	08db      	lsrs	r3, r3, #3
 8002d30:	4a92      	ldr	r2, [pc, #584]	@ (8002f7c <HAL_I2C_Mem_Read_DMA+0x284>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	0a1a      	lsrs	r2, r3, #8
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009a      	lsls	r2, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d112      	bne.n	8002d76 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
 8002d74:	e14c      	b.n	8003010 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d0df      	beq.n	8002d44 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2C_Mem_Read_DMA+0x9a>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e13e      	b.n	8003010 <HAL_I2C_Mem_Read_DMA+0x318>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d007      	beq.n	8002db8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2222      	movs	r2, #34	@ 0x22
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2240      	movs	r2, #64	@ 0x40
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a62      	ldr	r2, [pc, #392]	@ (8002f80 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002dfa:	897a      	ldrh	r2, [r7, #10]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002e00:	893a      	ldrh	r2, [r7, #8]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80cc 	beq.w	8002fb4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d02d      	beq.n	8002e80 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	4a56      	ldr	r2, [pc, #344]	@ (8002f84 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002e2a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	4a55      	ldr	r2, [pc, #340]	@ (8002f88 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002e32:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e38:	2200      	movs	r2, #0
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e40:	2200      	movs	r2, #0
 8002e42:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e48:	2200      	movs	r2, #0
 8002e4a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	2200      	movs	r2, #0
 8002e52:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	4619      	mov	r1, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	461a      	mov	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6a:	f7ff fb9e 	bl	80025aa <HAL_DMA_Start_IT>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 8087 	bne.w	8002f8c <HAL_I2C_Mem_Read_DMA+0x294>
 8002e7e:	e013      	b.n	8002ea8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b3      	b.n	8003010 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002ea8:	88f8      	ldrh	r0, [r7, #6]
 8002eaa:	893a      	ldrh	r2, [r7, #8]
 8002eac:	8979      	ldrh	r1, [r7, #10]
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	2323      	movs	r3, #35	@ 0x23
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f8cb 	bl	8003054 <I2C_RequestMemoryRead>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d023      	beq.n	8002f0c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fbc6 	bl	800265a <HAL_DMA_Abort_IT>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed8:	2200      	movs	r2, #0
 8002eda:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e081      	b.n	8003010 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e007      	b.n	8002f36 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f62:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	e049      	b.n	800300a <HAL_I2C_Mem_Read_DMA+0x312>
 8002f76:	bf00      	nop
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	14f8b589 	.word	0x14f8b589
 8002f80:	ffff0000 	.word	0xffff0000
 8002f84:	08003225 	.word	0x08003225
 8002f88:	080033e3 	.word	0x080033e3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	f043 0210 	orr.w	r2, r3, #16
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e02d      	b.n	8003010 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002fb4:	88f8      	ldrh	r0, [r7, #6]
 8002fb6:	893a      	ldrh	r2, [r7, #8]
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	2323      	movs	r3, #35	@ 0x23
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f845 	bl	8003054 <I2C_RequestMemoryRead>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e01d      	b.n	8003010 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3728      	adds	r7, #40	@ 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4603      	mov	r3, r0
 8003064:	817b      	strh	r3, [r7, #10]
 8003066:	460b      	mov	r3, r1
 8003068:	813b      	strh	r3, [r7, #8]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800307c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	2200      	movs	r2, #0
 8003096:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f9de 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b4:	d103      	bne.n	80030be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0aa      	b.n	8003218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	4952      	ldr	r1, [pc, #328]	@ (8003220 <I2C_RequestMemoryRead+0x1cc>)
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fa39 	bl	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e097      	b.n	8003218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fac4 	bl	8003690 <I2C_WaitOnTXEFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	2b04      	cmp	r3, #4
 8003114:	d107      	bne.n	8003126 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e076      	b.n	8003218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	611a      	str	r2, [r3, #16]
 800313a:	e021      	b.n	8003180 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	b29b      	uxth	r3, r3
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa9e 	bl	8003690 <I2C_WaitOnTXEFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	2b04      	cmp	r3, #4
 8003160:	d107      	bne.n	8003172 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e050      	b.n	8003218 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003182:	6a39      	ldr	r1, [r7, #32]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fa83 	bl	8003690 <I2C_WaitOnTXEFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	2b04      	cmp	r3, #4
 8003196:	d107      	bne.n	80031a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e035      	b.n	8003218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f947 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e2:	d103      	bne.n	80031ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e013      	b.n	8003218 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031f0:	897b      	ldrh	r3, [r7, #10]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	6a3a      	ldr	r2, [r7, #32]
 8003204:	4906      	ldr	r1, [pc, #24]	@ (8003220 <I2C_RequestMemoryRead+0x1cc>)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f9a2 	bl	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00010002 	.word	0x00010002

08003224 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003238:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003240:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003256:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003264:	2200      	movs	r2, #0
 8003266:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003274:	2200      	movs	r2, #0
 8003276:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800327e:	2b21      	cmp	r3, #33	@ 0x21
 8003280:	d007      	beq.n	8003292 <I2C_DMAXferCplt+0x6e>
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003288:	2b22      	cmp	r3, #34	@ 0x22
 800328a:	d131      	bne.n	80032f0 <I2C_DMAXferCplt+0xcc>
 800328c:	7cbb      	ldrb	r3, [r7, #18]
 800328e:	2b20      	cmp	r3, #32
 8003290:	d12e      	bne.n	80032f0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2200      	movs	r2, #0
 80032a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	2b29      	cmp	r3, #41	@ 0x29
 80032ac:	d10a      	bne.n	80032c4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2221      	movs	r2, #33	@ 0x21
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2228      	movs	r2, #40	@ 0x28
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032bc:	6978      	ldr	r0, [r7, #20]
 80032be:	f7ff feb5 	bl	800302c <HAL_I2C_SlaveTxCpltCallback>
 80032c2:	e00c      	b.n	80032de <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80032c8:	d109      	bne.n	80032de <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2222      	movs	r2, #34	@ 0x22
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2228      	movs	r2, #40	@ 0x28
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032d8:	6978      	ldr	r0, [r7, #20]
 80032da:	f7ff feb1 	bl	8003040 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80032ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032ee:	e074      	b.n	80033da <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d06e      	beq.n	80033da <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003314:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003324:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800332c:	d009      	beq.n	8003342 <I2C_DMAXferCplt+0x11e>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d006      	beq.n	8003342 <I2C_DMAXferCplt+0x11e>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800333a:	d002      	beq.n	8003342 <I2C_DMAXferCplt+0x11e>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b20      	cmp	r3, #32
 8003340:	d107      	bne.n	8003352 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003350:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003360:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003370:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003380:	6978      	ldr	r0, [r7, #20]
 8003382:	f7fd fa83 	bl	800088c <HAL_I2C_ErrorCallback>
}
 8003386:	e028      	b.n	80033da <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b40      	cmp	r3, #64	@ 0x40
 800339a:	d10a      	bne.n	80033b2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80033aa:	6978      	ldr	r0, [r7, #20]
 80033ac:	f7fd fa84 	bl	80008b8 <HAL_I2C_MemRxCpltCallback>
}
 80033b0:	e013      	b.n	80033da <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d002      	beq.n	80033c6 <I2C_DMAXferCplt+0x1a2>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d103      	bne.n	80033ce <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80033cc:	e002      	b.n	80033d4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2212      	movs	r2, #18
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80033d4:	6978      	ldr	r0, [r7, #20]
 80033d6:	f7ff fe1f 	bl	8003018 <HAL_I2C_MasterRxCpltCallback>
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fc:	2200      	movs	r2, #0
 80033fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	2200      	movs	r2, #0
 800340e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff f944 	bl	800269e <HAL_DMA_GetError>
 8003416:	4603      	mov	r3, r0
 8003418:	2b02      	cmp	r3, #2
 800341a:	d01b      	beq.n	8003454 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f043 0210 	orr.w	r2, r3, #16
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7fd fa1c 	bl	800088c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	e048      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d044      	beq.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe f933 	bl	80016e0 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d139      	bne.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	0c1b      	lsrs	r3, r3, #16
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10d      	bne.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	43da      	mvns	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	e00c      	b.n	80034cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d116      	bne.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e023      	b.n	8003548 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10d      	bne.n	8003526 <I2C_WaitOnFlagUntilTimeout+0xca>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	43da      	mvns	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4013      	ands	r3, r2
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	e00c      	b.n	8003540 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	43da      	mvns	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	429a      	cmp	r2, r3
 8003544:	d093      	beq.n	800346e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355e:	e071      	b.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800356e:	d123      	bne.n	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003588:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e067      	b.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d041      	beq.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe f88e 	bl	80016e0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d136      	bne.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10c      	bne.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	e00b      	b.n	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	43da      	mvns	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4013      	ands	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e021      	b.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10c      	bne.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	43da      	mvns	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e00b      	b.n	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf14      	ite	ne
 800367a:	2301      	movne	r3, #1
 800367c:	2300      	moveq	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	f47f af6d 	bne.w	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800369c:	e034      	b.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f83e 	bl	8003720 <I2C_IsAcknowledgeFailed>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e034      	b.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d028      	beq.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe f813 	bl	80016e0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11d      	bne.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d6:	2b80      	cmp	r3, #128	@ 0x80
 80036d8:	d016      	beq.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b80      	cmp	r3, #128	@ 0x80
 8003714:	d1c3      	bne.n	800369e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003736:	d11b      	bne.n	8003770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <HAL_PWREx_EnableOverDrive+0x90>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	4a1f      	ldr	r2, [pc, #124]	@ (8003810 <HAL_PWREx_EnableOverDrive+0x90>)
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	@ 0x40
 800379a:	4b1d      	ldr	r3, [pc, #116]	@ (8003810 <HAL_PWREx_EnableOverDrive+0x90>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_PWREx_EnableOverDrive+0x94>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ac:	f7fd ff98 	bl	80016e0 <HAL_GetTick>
 80037b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037b2:	e009      	b.n	80037c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037b4:	f7fd ff94 	bl	80016e0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037c2:	d901      	bls.n	80037c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e01f      	b.n	8003808 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037c8:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <HAL_PWREx_EnableOverDrive+0x98>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d4:	d1ee      	bne.n	80037b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037d6:	4b11      	ldr	r3, [pc, #68]	@ (800381c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037dc:	f7fd ff80 	bl	80016e0 <HAL_GetTick>
 80037e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037e2:	e009      	b.n	80037f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037e4:	f7fd ff7c 	bl	80016e0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037f2:	d901      	bls.n	80037f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e007      	b.n	8003808 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037f8:	4b07      	ldr	r3, [pc, #28]	@ (8003818 <HAL_PWREx_EnableOverDrive+0x98>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003800:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003804:	d1ee      	bne.n	80037e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40023800 	.word	0x40023800
 8003814:	420e0040 	.word	0x420e0040
 8003818:	40007000 	.word	0x40007000
 800381c:	420e0044 	.word	0x420e0044

08003820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0cc      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003834:	4b68      	ldr	r3, [pc, #416]	@ (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d90c      	bls.n	800385c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b65      	ldr	r3, [pc, #404]	@ (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b63      	ldr	r3, [pc, #396]	@ (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0b8      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d020      	beq.n	80038aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003874:	4b59      	ldr	r3, [pc, #356]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a58      	ldr	r2, [pc, #352]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800387e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800388c:	4b53      	ldr	r3, [pc, #332]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a52      	ldr	r2, [pc, #328]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003898:	4b50      	ldr	r3, [pc, #320]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	494d      	ldr	r1, [pc, #308]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d044      	beq.n	8003940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b47      	ldr	r3, [pc, #284]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d119      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e07f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d003      	beq.n	80038de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b3f      	ldr	r3, [pc, #252]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e06f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	4b3b      	ldr	r3, [pc, #236]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e067      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b37      	ldr	r3, [pc, #220]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4934      	ldr	r1, [pc, #208]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003910:	f7fd fee6 	bl	80016e0 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fd fee2 	bl	80016e0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e04f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b2b      	ldr	r3, [pc, #172]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003940:	4b25      	ldr	r3, [pc, #148]	@ (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d20c      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b22      	ldr	r3, [pc, #136]	@ (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b20      	ldr	r3, [pc, #128]	@ (80039d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e032      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003974:	4b19      	ldr	r3, [pc, #100]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4916      	ldr	r1, [pc, #88]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003992:	4b12      	ldr	r3, [pc, #72]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	490e      	ldr	r1, [pc, #56]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039a6:	f000 f855 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 80039aa:	4602      	mov	r2, r0
 80039ac:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	490a      	ldr	r1, [pc, #40]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	5ccb      	ldrb	r3, [r1, r3]
 80039ba:	fa22 f303 	lsr.w	r3, r2, r3
 80039be:	4a09      	ldr	r2, [pc, #36]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd fe46 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023c00 	.word	0x40023c00
 80039dc:	40023800 	.word	0x40023800
 80039e0:	0800a574 	.word	0x0800a574
 80039e4:	20000000 	.word	0x20000000
 80039e8:	20000004 	.word	0x20000004

080039ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f0:	4b03      	ldr	r3, [pc, #12]	@ (8003a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000000 	.word	0x20000000

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a08:	f7ff fff0 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0a9b      	lsrs	r3, r3, #10
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	@ (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40023800 	.word	0x40023800
 8003a28:	0800a584 	.word	0x0800a584

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a30:	f7ff ffdc 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0b5b      	lsrs	r3, r3, #13
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	@ (8003a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	0800a584 	.word	0x0800a584

08003a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a58:	b0a6      	sub	sp, #152	@ 0x98
 8003a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7a:	4bc8      	ldr	r3, [pc, #800]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	f200 817e 	bhi.w	8003d84 <HAL_RCC_GetSysClockFreq+0x330>
 8003a88:	a201      	add	r2, pc, #4	@ (adr r2, 8003a90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003ac5 	.word	0x08003ac5
 8003a94:	08003d85 	.word	0x08003d85
 8003a98:	08003d85 	.word	0x08003d85
 8003a9c:	08003d85 	.word	0x08003d85
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003d85 	.word	0x08003d85
 8003aa8:	08003d85 	.word	0x08003d85
 8003aac:	08003d85 	.word	0x08003d85
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003d85 	.word	0x08003d85
 8003ab8:	08003d85 	.word	0x08003d85
 8003abc:	08003d85 	.word	0x08003d85
 8003ac0:	08003c3f 	.word	0x08003c3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4bb6      	ldr	r3, [pc, #728]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003aca:	e15f      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003acc:	4bb5      	ldr	r3, [pc, #724]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ace:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003ad2:	e15b      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad4:	4bb1      	ldr	r3, [pc, #708]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae0:	4bae      	ldr	r3, [pc, #696]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d031      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aec:	4bab      	ldr	r3, [pc, #684]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	2200      	movs	r2, #0
 8003af4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003af6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b00:	2300      	movs	r3, #0
 8003b02:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b04:	4ba7      	ldr	r3, [pc, #668]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b06:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	fb03 f202 	mul.w	r2, r3, r2
 8003b10:	2300      	movs	r3, #0
 8003b12:	4621      	mov	r1, r4
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	4aa2      	ldr	r2, [pc, #648]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	fba1 1202 	umull	r1, r2, r1, r2
 8003b22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b24:	460a      	mov	r2, r1
 8003b26:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003b28:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b2a:	4413      	add	r3, r2
 8003b2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b32:	2200      	movs	r2, #0
 8003b34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b36:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003b40:	f7fc fbbe 	bl	80002c0 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b4e:	e064      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b50:	4b92      	ldr	r3, [pc, #584]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	2200      	movs	r2, #0
 8003b58:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b5a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b64:	2300      	movs	r3, #0
 8003b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b68:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	462b      	mov	r3, r5
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	0159      	lsls	r1, r3, #5
 8003b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7e:	0150      	lsls	r0, r2, #5
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4621      	mov	r1, r4
 8003b86:	1a51      	subs	r1, r2, r1
 8003b88:	6139      	str	r1, [r7, #16]
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b9e:	4659      	mov	r1, fp
 8003ba0:	018b      	lsls	r3, r1, #6
 8003ba2:	4651      	mov	r1, sl
 8003ba4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba8:	4651      	mov	r1, sl
 8003baa:	018a      	lsls	r2, r1, #6
 8003bac:	4651      	mov	r1, sl
 8003bae:	ebb2 0801 	subs.w	r8, r2, r1
 8003bb2:	4659      	mov	r1, fp
 8003bb4:	eb63 0901 	sbc.w	r9, r3, r1
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bcc:	4690      	mov	r8, r2
 8003bce:	4699      	mov	r9, r3
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	eb18 0303 	adds.w	r3, r8, r3
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	462b      	mov	r3, r5
 8003bda:	eb49 0303 	adc.w	r3, r9, r3
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bec:	4629      	mov	r1, r5
 8003bee:	028b      	lsls	r3, r1, #10
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	028a      	lsls	r2, r1, #10
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c02:	2200      	movs	r2, #0
 8003c04:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c06:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c0c:	f7fc fb58 	bl	80002c0 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c1a:	4b60      	ldr	r3, [pc, #384]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	3301      	adds	r3, #1
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003c2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c3c:	e0a6      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c3e:	4b57      	ldr	r3, [pc, #348]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4a:	4b54      	ldr	r3, [pc, #336]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02a      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c56:	4b51      	ldr	r3, [pc, #324]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c6c:	fb03 f201 	mul.w	r2, r3, r1
 8003c70:	2300      	movs	r3, #0
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	4a4a      	ldr	r2, [pc, #296]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c80:	460a      	mov	r2, r1
 8003c82:	673a      	str	r2, [r7, #112]	@ 0x70
 8003c84:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c86:	4413      	add	r3, r2
 8003c88:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c8e:	2200      	movs	r2, #0
 8003c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c92:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c98:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003c9c:	f7fc fb10 	bl	80002c0 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003caa:	e05b      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cac:	4b3b      	ldr	r3, [pc, #236]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cc8:	4642      	mov	r2, r8
 8003cca:	464b      	mov	r3, r9
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	0159      	lsls	r1, r3, #5
 8003cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cda:	0150      	lsls	r0, r2, #5
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d00:	ebb2 040a 	subs.w	r4, r2, sl
 8003d04:	eb63 050b 	sbc.w	r5, r3, fp
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	00eb      	lsls	r3, r5, #3
 8003d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d16:	00e2      	lsls	r2, r4, #3
 8003d18:	4614      	mov	r4, r2
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	4643      	mov	r3, r8
 8003d1e:	18e3      	adds	r3, r4, r3
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	464b      	mov	r3, r9
 8003d24:	eb45 0303 	adc.w	r3, r5, r3
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d36:	4629      	mov	r1, r5
 8003d38:	028b      	lsls	r3, r1, #10
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d40:	4621      	mov	r1, r4
 8003d42:	028a      	lsls	r2, r1, #10
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	61fa      	str	r2, [r7, #28]
 8003d52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d56:	f7fc fab3 	bl	80002c0 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d64:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	0f1b      	lsrs	r3, r3, #28
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003d82:	e003      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003d8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3798      	adds	r7, #152	@ 0x98
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	017d7840 	.word	0x017d7840

08003da8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e28d      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8083 	beq.w	8003ece <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003dc8:	4b94      	ldr	r3, [pc, #592]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d019      	beq.n	8003e08 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003dd4:	4b91      	ldr	r3, [pc, #580]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003de0:	4b8e      	ldr	r3, [pc, #568]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dec:	d00c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b8b      	ldr	r3, [pc, #556]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d112      	bne.n	8003e20 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4b88      	ldr	r3, [pc, #544]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e06:	d10b      	bne.n	8003e20 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e08:	4b84      	ldr	r3, [pc, #528]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05b      	beq.n	8003ecc <HAL_RCC_OscConfig+0x124>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d157      	bne.n	8003ecc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e25a      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e28:	d106      	bne.n	8003e38 <HAL_RCC_OscConfig+0x90>
 8003e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0xcc>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0xb4>
 8003e42:	4b76      	ldr	r3, [pc, #472]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a75      	ldr	r2, [pc, #468]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b73      	ldr	r3, [pc, #460]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a72      	ldr	r2, [pc, #456]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0xcc>
 8003e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6e      	ldr	r2, [pc, #440]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b6c      	ldr	r3, [pc, #432]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6b      	ldr	r2, [pc, #428]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fc30 	bl	80016e0 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd fc2c 	bl	80016e0 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e21f      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b61      	ldr	r3, [pc, #388]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0xdc>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fc1c 	bl	80016e0 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fd fc18 	bl	80016e0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e20b      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b57      	ldr	r3, [pc, #348]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x104>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d06f      	beq.n	8003fba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003eda:	4b50      	ldr	r3, [pc, #320]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d017      	beq.n	8003f16 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
        || \
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d105      	bne.n	8003efe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b47      	ldr	r3, [pc, #284]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d11c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b44      	ldr	r3, [pc, #272]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	4b41      	ldr	r3, [pc, #260]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_RCC_OscConfig+0x186>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e1d3      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4937      	ldr	r1, [pc, #220]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	e03a      	b.n	8003fba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4c:	4b34      	ldr	r3, [pc, #208]	@ (8004020 <HAL_RCC_OscConfig+0x278>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fd fbc5 	bl	80016e0 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fd fbc1 	bl	80016e0 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e1b4      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f78:	4b28      	ldr	r3, [pc, #160]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4925      	ldr	r1, [pc, #148]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
 8003f8c:	e015      	b.n	8003fba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b24      	ldr	r3, [pc, #144]	@ (8004020 <HAL_RCC_OscConfig+0x278>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd fba4 	bl	80016e0 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fd fba0 	bl	80016e0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e193      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d036      	beq.n	8004034 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fce:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <HAL_RCC_OscConfig+0x27c>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fd fb84 	bl	80016e0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fd fb80 	bl	80016e0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e173      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <HAL_RCC_OscConfig+0x274>)
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x234>
 8003ffa:	e01b      	b.n	8004034 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffc:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <HAL_RCC_OscConfig+0x27c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fd fb6d 	bl	80016e0 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	e00e      	b.n	8004028 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400a:	f7fd fb69 	bl	80016e0 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d907      	bls.n	8004028 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e15c      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
 800401c:	40023800 	.word	0x40023800
 8004020:	42470000 	.word	0x42470000
 8004024:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004028:	4b8a      	ldr	r3, [pc, #552]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800402a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ea      	bne.n	800400a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8097 	beq.w	8004170 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004046:	4b83      	ldr	r3, [pc, #524]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	4b7f      	ldr	r3, [pc, #508]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	4a7e      	ldr	r2, [pc, #504]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	@ 0x40
 8004062:	4b7c      	ldr	r3, [pc, #496]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b79      	ldr	r3, [pc, #484]	@ (8004258 <HAL_RCC_OscConfig+0x4b0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d118      	bne.n	80040b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407e:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <HAL_RCC_OscConfig+0x4b0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a75      	ldr	r2, [pc, #468]	@ (8004258 <HAL_RCC_OscConfig+0x4b0>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408a:	f7fd fb29 	bl	80016e0 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7fd fb25 	bl	80016e0 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e118      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004258 <HAL_RCC_OscConfig+0x4b0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x31e>
 80040b8:	4b66      	ldr	r3, [pc, #408]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	4a65      	ldr	r2, [pc, #404]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c4:	e01c      	b.n	8004100 <HAL_RCC_OscConfig+0x358>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x340>
 80040ce:	4b61      	ldr	r3, [pc, #388]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	4a60      	ldr	r2, [pc, #384]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040da:	4b5e      	ldr	r3, [pc, #376]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a5d      	ldr	r2, [pc, #372]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0x358>
 80040e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a59      	ldr	r2, [pc, #356]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f4:	4b57      	ldr	r3, [pc, #348]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	4a56      	ldr	r2, [pc, #344]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040fa:	f023 0304 	bic.w	r3, r3, #4
 80040fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fd faea 	bl	80016e0 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd fae6 	bl	80016e0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0d7      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	4b4b      	ldr	r3, [pc, #300]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ee      	beq.n	8004110 <HAL_RCC_OscConfig+0x368>
 8004132:	e014      	b.n	800415e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd fad4 	bl	80016e0 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fd fad0 	bl	80016e0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0c1      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004152:	4b40      	ldr	r3, [pc, #256]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	4a3a      	ldr	r2, [pc, #232]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800416e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80ad 	beq.w	80042d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417a:	4b36      	ldr	r3, [pc, #216]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b08      	cmp	r3, #8
 8004184:	d060      	beq.n	8004248 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d145      	bne.n	800421a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b33      	ldr	r3, [pc, #204]	@ (800425c <HAL_RCC_OscConfig+0x4b4>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fd faa4 	bl	80016e0 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419c:	f7fd faa0 	bl	80016e0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e093      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b29      	ldr	r3, [pc, #164]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	3b01      	subs	r3, #1
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	491b      	ldr	r1, [pc, #108]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ec:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <HAL_RCC_OscConfig+0x4b4>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fd fa75 	bl	80016e0 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fd fa71 	bl	80016e0 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e064      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420c:	4b11      	ldr	r3, [pc, #68]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x452>
 8004218:	e05c      	b.n	80042d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	4b10      	ldr	r3, [pc, #64]	@ (800425c <HAL_RCC_OscConfig+0x4b4>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd fa5e 	bl	80016e0 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004228:	f7fd fa5a 	bl	80016e0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e04d      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x480>
 8004246:	e045      	b.n	80042d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e040      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
 8004254:	40023800 	.word	0x40023800
 8004258:	40007000 	.word	0x40007000
 800425c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004260:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <HAL_RCC_OscConfig+0x538>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d030      	beq.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d129      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d122      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004298:	4293      	cmp	r3, r2
 800429a:	d119      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d10f      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800

080042e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07b      	b.n	80043ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d108      	bne.n	8004310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004306:	d009      	beq.n	800431c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	61da      	str	r2, [r3, #28]
 800430e:	e005      	b.n	800431c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fc ffca 	bl	80012d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004352:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a0:	ea42 0103 	orr.w	r1, r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	f003 0104 	and.w	r1, r3, #4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	f003 0210 	and.w	r2, r3, #16
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b088      	sub	sp, #32
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004406:	f7fd f96b 	bl	80016e0 <HAL_GetTick>
 800440a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d001      	beq.n	8004420 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
 800441e:	e12a      	b.n	8004676 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_SPI_Transmit+0x36>
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e122      	b.n	8004676 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_SPI_Transmit+0x48>
 800443a:	2302      	movs	r3, #2
 800443c:	e11b      	b.n	8004676 <HAL_SPI_Transmit+0x280>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2203      	movs	r2, #3
 800444a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800448c:	d10f      	bne.n	80044ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800449c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	d007      	beq.n	80044cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044d4:	d152      	bne.n	800457c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Transmit+0xee>
 80044de:	8b7b      	ldrh	r3, [r7, #26]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d145      	bne.n	8004570 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e8:	881a      	ldrh	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004508:	e032      	b.n	8004570 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b02      	cmp	r3, #2
 8004516:	d112      	bne.n	800453e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	881a      	ldrh	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800453c:	e018      	b.n	8004570 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800453e:	f7fd f8cf 	bl	80016e0 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d803      	bhi.n	8004556 <HAL_SPI_Transmit+0x160>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d102      	bne.n	800455c <HAL_SPI_Transmit+0x166>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e082      	b.n	8004676 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1c7      	bne.n	800450a <HAL_SPI_Transmit+0x114>
 800457a:	e053      	b.n	8004624 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_Transmit+0x194>
 8004584:	8b7b      	ldrh	r3, [r7, #26]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d147      	bne.n	800461a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	7812      	ldrb	r2, [r2, #0]
 8004596:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045b0:	e033      	b.n	800461a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d113      	bne.n	80045e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045e6:	e018      	b.n	800461a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e8:	f7fd f87a 	bl	80016e0 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d803      	bhi.n	8004600 <HAL_SPI_Transmit+0x20a>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d102      	bne.n	8004606 <HAL_SPI_Transmit+0x210>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e02d      	b.n	8004676 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1c6      	bne.n	80045b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	6839      	ldr	r1, [r7, #0]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fd21 	bl	8005070 <SPI_EndRxTxTransaction>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004674:	2300      	movs	r3, #0
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b088      	sub	sp, #32
 8004682:	af02      	add	r7, sp, #8
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	d001      	beq.n	800469e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800469a:	2302      	movs	r3, #2
 800469c:	e104      	b.n	80048a8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_Receive+0x2c>
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e0fc      	b.n	80048a8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046b6:	d112      	bne.n	80046de <HAL_SPI_Receive+0x60>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10e      	bne.n	80046de <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2204      	movs	r2, #4
 80046c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046c8:	88fa      	ldrh	r2, [r7, #6]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f8eb 	bl	80048b0 <HAL_SPI_TransmitReceive>
 80046da:	4603      	mov	r3, r0
 80046dc:	e0e4      	b.n	80048a8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046de:	f7fc ffff 	bl	80016e0 <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_SPI_Receive+0x74>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e0da      	b.n	80048a8 <HAL_SPI_Receive+0x22a>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2204      	movs	r2, #4
 80046fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004740:	d10f      	bne.n	8004762 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004750:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004760:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b40      	cmp	r3, #64	@ 0x40
 800476e:	d007      	beq.n	8004780 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800477e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d170      	bne.n	800486a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004788:	e035      	b.n	80047f6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d115      	bne.n	80047c4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f103 020c 	add.w	r2, r3, #12
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	7812      	ldrb	r2, [r2, #0]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047c2:	e018      	b.n	80047f6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c4:	f7fc ff8c 	bl	80016e0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d803      	bhi.n	80047dc <HAL_SPI_Receive+0x15e>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d102      	bne.n	80047e2 <HAL_SPI_Receive+0x164>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e058      	b.n	80048a8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1c4      	bne.n	800478a <HAL_SPI_Receive+0x10c>
 8004800:	e038      	b.n	8004874 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d113      	bne.n	8004838 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481a:	b292      	uxth	r2, r2
 800481c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	1c9a      	adds	r2, r3, #2
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004836:	e018      	b.n	800486a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004838:	f7fc ff52 	bl	80016e0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d803      	bhi.n	8004850 <HAL_SPI_Receive+0x1d2>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d102      	bne.n	8004856 <HAL_SPI_Receive+0x1d8>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e01e      	b.n	80048a8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1c6      	bne.n	8004802 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	6839      	ldr	r1, [r7, #0]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fb93 	bl	8004fa4 <SPI_EndRxTransaction>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
  }
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	@ 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048be:	2301      	movs	r3, #1
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048c2:	f7fc ff0d 	bl	80016e0 <HAL_GetTick>
 80048c6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ce:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80048d6:	887b      	ldrh	r3, [r7, #2]
 80048d8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048da:	7ffb      	ldrb	r3, [r7, #31]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d00c      	beq.n	80048fa <HAL_SPI_TransmitReceive+0x4a>
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048e6:	d106      	bne.n	80048f6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <HAL_SPI_TransmitReceive+0x46>
 80048f0:	7ffb      	ldrb	r3, [r7, #31]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d001      	beq.n	80048fa <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
 80048f8:	e17f      	b.n	8004bfa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_SPI_TransmitReceive+0x5c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_SPI_TransmitReceive+0x5c>
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e174      	b.n	8004bfa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_SPI_TransmitReceive+0x6e>
 800491a:	2302      	movs	r3, #2
 800491c:	e16d      	b.n	8004bfa <HAL_SPI_TransmitReceive+0x34a>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b04      	cmp	r3, #4
 8004930:	d003      	beq.n	800493a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2205      	movs	r2, #5
 8004936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	887a      	ldrh	r2, [r7, #2]
 800494a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	887a      	ldrh	r2, [r7, #2]
 8004950:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	887a      	ldrh	r2, [r7, #2]
 8004962:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497a:	2b40      	cmp	r3, #64	@ 0x40
 800497c:	d007      	beq.n	800498e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800498c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004996:	d17e      	bne.n	8004a96 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0xf6>
 80049a0:	8afb      	ldrh	r3, [r7, #22]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d16c      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	881a      	ldrh	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	1c9a      	adds	r2, r3, #2
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ca:	e059      	b.n	8004a80 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d11b      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x162>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d016      	beq.n	8004a12 <HAL_SPI_TransmitReceive+0x162>
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d113      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ee:	881a      	ldrh	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fa:	1c9a      	adds	r2, r3, #2
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d119      	bne.n	8004a54 <HAL_SPI_TransmitReceive+0x1a4>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d014      	beq.n	8004a54 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	b292      	uxth	r2, r2
 8004a36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3c:	1c9a      	adds	r2, r3, #2
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a50:	2301      	movs	r3, #1
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a54:	f7fc fe44 	bl	80016e0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d80d      	bhi.n	8004a80 <HAL_SPI_TransmitReceive+0x1d0>
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d009      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0bc      	b.n	8004bfa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1a0      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x11c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d19b      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x11c>
 8004a94:	e082      	b.n	8004b9c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_SPI_TransmitReceive+0x1f4>
 8004a9e:	8afb      	ldrh	r3, [r7, #22]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d171      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aca:	e05d      	b.n	8004b88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d11c      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x264>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d017      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x264>
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d114      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d119      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x2a6>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d014      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b52:	2301      	movs	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b56:	f7fc fdc3 	bl	80016e0 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d803      	bhi.n	8004b6e <HAL_SPI_TransmitReceive+0x2be>
 8004b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d102      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x2c4>
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e038      	b.n	8004bfa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d19c      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x21c>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d197      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fa65 	bl	8005070 <SPI_EndRxTxTransaction>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e01d      	b.n	8004bfa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
  }
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3728      	adds	r7, #40	@ 0x28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d001      	beq.n	8004c22 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e097      	b.n	8004d52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_Transmit_DMA+0x2a>
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e08f      	b.n	8004d52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_SPI_Transmit_DMA+0x3c>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e088      	b.n	8004d52 <HAL_SPI_Transmit_DMA+0x14e>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	88fa      	ldrh	r2, [r7, #6]
 8004c66:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c8e:	d10f      	bne.n	8004cb0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb4:	4a29      	ldr	r2, [pc, #164]	@ (8004d5c <HAL_SPI_Transmit_DMA+0x158>)
 8004cb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cbc:	4a28      	ldr	r2, [pc, #160]	@ (8004d60 <HAL_SPI_Transmit_DMA+0x15c>)
 8004cbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc4:	4a27      	ldr	r2, [pc, #156]	@ (8004d64 <HAL_SPI_Transmit_DMA+0x160>)
 8004cc6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ccc:	2200      	movs	r2, #0
 8004cce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	4619      	mov	r1, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ce8:	f7fd fc5f 	bl	80025aa <HAL_DMA_Start_IT>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf6:	f043 0210 	orr.w	r2, r3, #16
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e023      	b.n	8004d52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d007      	beq.n	8004d28 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d26:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0220 	orr.w	r2, r2, #32
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0202 	orr.w	r2, r2, #2
 8004d4e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	08004e39 	.word	0x08004e39
 8004d60:	08004d91 	.word	0x08004d91
 8004d64:	08004e55 	.word	0x08004e55

08004d68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d9e:	f7fc fc9f 	bl	80016e0 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004db2:	d03b      	beq.n	8004e2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0220 	bic.w	r2, r2, #32
 8004dc2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0202 	bic.w	r2, r2, #2
 8004dd2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	2164      	movs	r1, #100	@ 0x64
 8004dd8:	6978      	ldr	r0, [r7, #20]
 8004dda:	f000 f949 	bl	8005070 <SPI_EndRxTxTransaction>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e24:	6978      	ldr	r0, [r7, #20]
 8004e26:	f7ff ffa9 	bl	8004d7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e2a:	e002      	b.n	8004e32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f7fb fd55 	bl	80008dc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff ff8e 	bl	8004d68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e4c:	bf00      	nop
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0203 	bic.w	r2, r2, #3
 8004e70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	f043 0210 	orr.w	r2, r3, #16
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff ff78 	bl	8004d7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ea4:	f7fc fc1c 	bl	80016e0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eb4:	f7fc fc14 	bl	80016e0 <HAL_GetTick>
 8004eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eba:	4b39      	ldr	r3, [pc, #228]	@ (8004fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	015b      	lsls	r3, r3, #5
 8004ec0:	0d1b      	lsrs	r3, r3, #20
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eca:	e055      	b.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d051      	beq.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ed4:	f7fc fc04 	bl	80016e0 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d902      	bls.n	8004eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d13d      	bne.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f02:	d111      	bne.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f0c:	d004      	beq.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f16:	d107      	bne.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f30:	d10f      	bne.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e018      	b.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	e002      	b.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4013      	ands	r3, r2
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d19a      	bne.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000000 	.word	0x20000000

08004fa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fb8:	d111      	bne.n	8004fde <SPI_EndRxTransaction+0x3a>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fc2:	d004      	beq.n	8004fce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fcc:	d107      	bne.n	8004fde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fdc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe6:	d12a      	bne.n	800503e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff0:	d012      	beq.n	8005018 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2180      	movs	r1, #128	@ 0x80
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff ff49 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02d      	beq.n	8005064 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e026      	b.n	8005066 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2200      	movs	r2, #0
 8005020:	2101      	movs	r1, #1
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff ff36 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d01a      	beq.n	8005064 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e013      	b.n	8005066 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2200      	movs	r2, #0
 8005046:	2101      	movs	r1, #1
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff ff23 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d007      	beq.n	8005064 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e000      	b.n	8005066 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2201      	movs	r2, #1
 8005084:	2102      	movs	r1, #2
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff ff04 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e032      	b.n	8005108 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <SPI_EndRxTxTransaction+0xa0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005114 <SPI_EndRxTxTransaction+0xa4>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	0d5b      	lsrs	r3, r3, #21
 80050ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c0:	d112      	bne.n	80050e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	@ 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff fee1 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d016      	beq.n	8005106 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e00f      	b.n	8005108 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fe:	2b80      	cmp	r3, #128	@ 0x80
 8005100:	d0f2      	beq.n	80050e8 <SPI_EndRxTxTransaction+0x78>
 8005102:	e000      	b.n	8005106 <SPI_EndRxTxTransaction+0x96>
        break;
 8005104:	bf00      	nop
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000000 	.word	0x20000000
 8005114:	165e9f81 	.word	0x165e9f81

08005118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e042      	b.n	80051b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fc f90e 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	@ 0x24
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800515a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f973 	bl	8005448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	@ 0x28
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d175      	bne.n	80052c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_UART_Transmit+0x2c>
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e06e      	b.n	80052c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2221      	movs	r2, #33	@ 0x21
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f6:	f7fc fa73 	bl	80016e0 <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005210:	d108      	bne.n	8005224 <HAL_UART_Transmit+0x6c>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d104      	bne.n	8005224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	e003      	b.n	800522c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800522c:	e02e      	b.n	800528c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2200      	movs	r2, #0
 8005236:	2180      	movs	r1, #128	@ 0x80
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f848 	bl	80052ce <UART_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e03a      	b.n	80052c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3302      	adds	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e007      	b.n	800527e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	3301      	adds	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1cb      	bne.n	800522e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2200      	movs	r2, #0
 800529e:	2140      	movs	r1, #64	@ 0x40
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f814 	bl	80052ce <UART_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e006      	b.n	80052c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	603b      	str	r3, [r7, #0]
 80052da:	4613      	mov	r3, r2
 80052dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052de:	e03b      	b.n	8005358 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d037      	beq.n	8005358 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7fc f9fa 	bl	80016e0 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	6a3a      	ldr	r2, [r7, #32]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <UART_WaitOnFlagUntilTimeout+0x30>
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e03a      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d023      	beq.n	8005358 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b80      	cmp	r3, #128	@ 0x80
 8005314:	d020      	beq.n	8005358 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b40      	cmp	r3, #64	@ 0x40
 800531a:	d01d      	beq.n	8005358 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b08      	cmp	r3, #8
 8005328:	d116      	bne.n	8005358 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f81d 	bl	8005380 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2208      	movs	r2, #8
 800534a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e00f      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4013      	ands	r3, r2
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	429a      	cmp	r2, r3
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	429a      	cmp	r2, r3
 8005374:	d0b4      	beq.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b095      	sub	sp, #84	@ 0x54
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800539e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e5      	bne.n	8005388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3314      	adds	r3, #20
 80053c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f023 0301 	bic.w	r3, r3, #1
 80053d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3314      	adds	r3, #20
 80053da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e5      	bne.n	80053bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d119      	bne.n	800542c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	60bb      	str	r3, [r7, #8]
   return(result);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f023 0310 	bic.w	r3, r3, #16
 800540e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005418:	61ba      	str	r2, [r7, #24]
 800541a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6979      	ldr	r1, [r7, #20]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	613b      	str	r3, [r7, #16]
   return(result);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e5      	bne.n	80053f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800543a:	bf00      	nop
 800543c:	3754      	adds	r7, #84	@ 0x54
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800544c:	b0c0      	sub	sp, #256	@ 0x100
 800544e:	af00      	add	r7, sp, #0
 8005450:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	68d9      	ldr	r1, [r3, #12]
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	ea40 0301 	orr.w	r3, r0, r1
 8005470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	431a      	orrs	r2, r3
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	431a      	orrs	r2, r3
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054a0:	f021 010c 	bic.w	r1, r1, #12
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054ae:	430b      	orrs	r3, r1
 80054b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c2:	6999      	ldr	r1, [r3, #24]
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	ea40 0301 	orr.w	r3, r0, r1
 80054ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005714 <UART_SetConfig+0x2cc>)
 80054d8:	429a      	cmp	r2, r3
 80054da:	d005      	beq.n	80054e8 <UART_SetConfig+0xa0>
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005718 <UART_SetConfig+0x2d0>)
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d104      	bne.n	80054f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054e8:	f7fe faa0 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 80054ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054f0:	e003      	b.n	80054fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054f2:	f7fe fa87 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 80054f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005504:	f040 810c 	bne.w	8005720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005512:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800551a:	4622      	mov	r2, r4
 800551c:	462b      	mov	r3, r5
 800551e:	1891      	adds	r1, r2, r2
 8005520:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005522:	415b      	adcs	r3, r3
 8005524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800552a:	4621      	mov	r1, r4
 800552c:	eb12 0801 	adds.w	r8, r2, r1
 8005530:	4629      	mov	r1, r5
 8005532:	eb43 0901 	adc.w	r9, r3, r1
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800554a:	4690      	mov	r8, r2
 800554c:	4699      	mov	r9, r3
 800554e:	4623      	mov	r3, r4
 8005550:	eb18 0303 	adds.w	r3, r8, r3
 8005554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005558:	462b      	mov	r3, r5
 800555a:	eb49 0303 	adc.w	r3, r9, r3
 800555e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800556e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005576:	460b      	mov	r3, r1
 8005578:	18db      	adds	r3, r3, r3
 800557a:	653b      	str	r3, [r7, #80]	@ 0x50
 800557c:	4613      	mov	r3, r2
 800557e:	eb42 0303 	adc.w	r3, r2, r3
 8005582:	657b      	str	r3, [r7, #84]	@ 0x54
 8005584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800558c:	f7fa fe98 	bl	80002c0 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4b61      	ldr	r3, [pc, #388]	@ (800571c <UART_SetConfig+0x2d4>)
 8005596:	fba3 2302 	umull	r2, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	011c      	lsls	r4, r3, #4
 800559e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055b0:	4642      	mov	r2, r8
 80055b2:	464b      	mov	r3, r9
 80055b4:	1891      	adds	r1, r2, r2
 80055b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055b8:	415b      	adcs	r3, r3
 80055ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055c0:	4641      	mov	r1, r8
 80055c2:	eb12 0a01 	adds.w	sl, r2, r1
 80055c6:	4649      	mov	r1, r9
 80055c8:	eb43 0b01 	adc.w	fp, r3, r1
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055e0:	4692      	mov	sl, r2
 80055e2:	469b      	mov	fp, r3
 80055e4:	4643      	mov	r3, r8
 80055e6:	eb1a 0303 	adds.w	r3, sl, r3
 80055ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055ee:	464b      	mov	r3, r9
 80055f0:	eb4b 0303 	adc.w	r3, fp, r3
 80055f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005604:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800560c:	460b      	mov	r3, r1
 800560e:	18db      	adds	r3, r3, r3
 8005610:	643b      	str	r3, [r7, #64]	@ 0x40
 8005612:	4613      	mov	r3, r2
 8005614:	eb42 0303 	adc.w	r3, r2, r3
 8005618:	647b      	str	r3, [r7, #68]	@ 0x44
 800561a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800561e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005622:	f7fa fe4d 	bl	80002c0 <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4611      	mov	r1, r2
 800562c:	4b3b      	ldr	r3, [pc, #236]	@ (800571c <UART_SetConfig+0x2d4>)
 800562e:	fba3 2301 	umull	r2, r3, r3, r1
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	2264      	movs	r2, #100	@ 0x64
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	1acb      	subs	r3, r1, r3
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005642:	4b36      	ldr	r3, [pc, #216]	@ (800571c <UART_SetConfig+0x2d4>)
 8005644:	fba3 2302 	umull	r2, r3, r3, r2
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005650:	441c      	add	r4, r3
 8005652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005656:	2200      	movs	r2, #0
 8005658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800565c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	1891      	adds	r1, r2, r2
 800566a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800566c:	415b      	adcs	r3, r3
 800566e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005674:	4641      	mov	r1, r8
 8005676:	1851      	adds	r1, r2, r1
 8005678:	6339      	str	r1, [r7, #48]	@ 0x30
 800567a:	4649      	mov	r1, r9
 800567c:	414b      	adcs	r3, r1
 800567e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800568c:	4659      	mov	r1, fp
 800568e:	00cb      	lsls	r3, r1, #3
 8005690:	4651      	mov	r1, sl
 8005692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005696:	4651      	mov	r1, sl
 8005698:	00ca      	lsls	r2, r1, #3
 800569a:	4610      	mov	r0, r2
 800569c:	4619      	mov	r1, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	4642      	mov	r2, r8
 80056a2:	189b      	adds	r3, r3, r2
 80056a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056a8:	464b      	mov	r3, r9
 80056aa:	460a      	mov	r2, r1
 80056ac:	eb42 0303 	adc.w	r3, r2, r3
 80056b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056c8:	460b      	mov	r3, r1
 80056ca:	18db      	adds	r3, r3, r3
 80056cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ce:	4613      	mov	r3, r2
 80056d0:	eb42 0303 	adc.w	r3, r2, r3
 80056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056de:	f7fa fdef 	bl	80002c0 <__aeabi_uldivmod>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4b0d      	ldr	r3, [pc, #52]	@ (800571c <UART_SetConfig+0x2d4>)
 80056e8:	fba3 1302 	umull	r1, r3, r3, r2
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	2164      	movs	r1, #100	@ 0x64
 80056f0:	fb01 f303 	mul.w	r3, r1, r3
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	3332      	adds	r3, #50	@ 0x32
 80056fa:	4a08      	ldr	r2, [pc, #32]	@ (800571c <UART_SetConfig+0x2d4>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	f003 0207 	and.w	r2, r3, #7
 8005706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4422      	add	r2, r4
 800570e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005710:	e106      	b.n	8005920 <UART_SetConfig+0x4d8>
 8005712:	bf00      	nop
 8005714:	40011000 	.word	0x40011000
 8005718:	40011400 	.word	0x40011400
 800571c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005724:	2200      	movs	r2, #0
 8005726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800572a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800572e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005732:	4642      	mov	r2, r8
 8005734:	464b      	mov	r3, r9
 8005736:	1891      	adds	r1, r2, r2
 8005738:	6239      	str	r1, [r7, #32]
 800573a:	415b      	adcs	r3, r3
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
 800573e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005742:	4641      	mov	r1, r8
 8005744:	1854      	adds	r4, r2, r1
 8005746:	4649      	mov	r1, r9
 8005748:	eb43 0501 	adc.w	r5, r3, r1
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	00eb      	lsls	r3, r5, #3
 8005756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800575a:	00e2      	lsls	r2, r4, #3
 800575c:	4614      	mov	r4, r2
 800575e:	461d      	mov	r5, r3
 8005760:	4643      	mov	r3, r8
 8005762:	18e3      	adds	r3, r4, r3
 8005764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005768:	464b      	mov	r3, r9
 800576a:	eb45 0303 	adc.w	r3, r5, r3
 800576e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800577e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800578e:	4629      	mov	r1, r5
 8005790:	008b      	lsls	r3, r1, #2
 8005792:	4621      	mov	r1, r4
 8005794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005798:	4621      	mov	r1, r4
 800579a:	008a      	lsls	r2, r1, #2
 800579c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057a0:	f7fa fd8e 	bl	80002c0 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4b60      	ldr	r3, [pc, #384]	@ (800592c <UART_SetConfig+0x4e4>)
 80057aa:	fba3 2302 	umull	r2, r3, r3, r2
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	011c      	lsls	r4, r3, #4
 80057b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057c4:	4642      	mov	r2, r8
 80057c6:	464b      	mov	r3, r9
 80057c8:	1891      	adds	r1, r2, r2
 80057ca:	61b9      	str	r1, [r7, #24]
 80057cc:	415b      	adcs	r3, r3
 80057ce:	61fb      	str	r3, [r7, #28]
 80057d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057d4:	4641      	mov	r1, r8
 80057d6:	1851      	adds	r1, r2, r1
 80057d8:	6139      	str	r1, [r7, #16]
 80057da:	4649      	mov	r1, r9
 80057dc:	414b      	adcs	r3, r1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057ec:	4659      	mov	r1, fp
 80057ee:	00cb      	lsls	r3, r1, #3
 80057f0:	4651      	mov	r1, sl
 80057f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057f6:	4651      	mov	r1, sl
 80057f8:	00ca      	lsls	r2, r1, #3
 80057fa:	4610      	mov	r0, r2
 80057fc:	4619      	mov	r1, r3
 80057fe:	4603      	mov	r3, r0
 8005800:	4642      	mov	r2, r8
 8005802:	189b      	adds	r3, r3, r2
 8005804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005808:	464b      	mov	r3, r9
 800580a:	460a      	mov	r2, r1
 800580c:	eb42 0303 	adc.w	r3, r2, r3
 8005810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800581e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800582c:	4649      	mov	r1, r9
 800582e:	008b      	lsls	r3, r1, #2
 8005830:	4641      	mov	r1, r8
 8005832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005836:	4641      	mov	r1, r8
 8005838:	008a      	lsls	r2, r1, #2
 800583a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800583e:	f7fa fd3f 	bl	80002c0 <__aeabi_uldivmod>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4611      	mov	r1, r2
 8005848:	4b38      	ldr	r3, [pc, #224]	@ (800592c <UART_SetConfig+0x4e4>)
 800584a:	fba3 2301 	umull	r2, r3, r3, r1
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	2264      	movs	r2, #100	@ 0x64
 8005852:	fb02 f303 	mul.w	r3, r2, r3
 8005856:	1acb      	subs	r3, r1, r3
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	3332      	adds	r3, #50	@ 0x32
 800585c:	4a33      	ldr	r2, [pc, #204]	@ (800592c <UART_SetConfig+0x4e4>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005868:	441c      	add	r4, r3
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800586e:	2200      	movs	r2, #0
 8005870:	673b      	str	r3, [r7, #112]	@ 0x70
 8005872:	677a      	str	r2, [r7, #116]	@ 0x74
 8005874:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	1891      	adds	r1, r2, r2
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	415b      	adcs	r3, r3
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005888:	4641      	mov	r1, r8
 800588a:	1851      	adds	r1, r2, r1
 800588c:	6039      	str	r1, [r7, #0]
 800588e:	4649      	mov	r1, r9
 8005890:	414b      	adcs	r3, r1
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058a0:	4659      	mov	r1, fp
 80058a2:	00cb      	lsls	r3, r1, #3
 80058a4:	4651      	mov	r1, sl
 80058a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058aa:	4651      	mov	r1, sl
 80058ac:	00ca      	lsls	r2, r1, #3
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	4642      	mov	r2, r8
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058ba:	464b      	mov	r3, r9
 80058bc:	460a      	mov	r2, r1
 80058be:	eb42 0303 	adc.w	r3, r2, r3
 80058c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058dc:	4649      	mov	r1, r9
 80058de:	008b      	lsls	r3, r1, #2
 80058e0:	4641      	mov	r1, r8
 80058e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058e6:	4641      	mov	r1, r8
 80058e8:	008a      	lsls	r2, r1, #2
 80058ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058ee:	f7fa fce7 	bl	80002c0 <__aeabi_uldivmod>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4b0d      	ldr	r3, [pc, #52]	@ (800592c <UART_SetConfig+0x4e4>)
 80058f8:	fba3 1302 	umull	r1, r3, r3, r2
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	2164      	movs	r1, #100	@ 0x64
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	3332      	adds	r3, #50	@ 0x32
 800590a:	4a08      	ldr	r2, [pc, #32]	@ (800592c <UART_SetConfig+0x4e4>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	f003 020f 	and.w	r2, r3, #15
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4422      	add	r2, r4
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005926:	46bd      	mov	sp, r7
 8005928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800592c:	51eb851f 	.word	0x51eb851f

08005930 <__NVIC_SetPriority>:
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	6039      	str	r1, [r7, #0]
 800593a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800593c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005940:	2b00      	cmp	r3, #0
 8005942:	db0a      	blt.n	800595a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	b2da      	uxtb	r2, r3
 8005948:	490c      	ldr	r1, [pc, #48]	@ (800597c <__NVIC_SetPriority+0x4c>)
 800594a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594e:	0112      	lsls	r2, r2, #4
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	440b      	add	r3, r1
 8005954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005958:	e00a      	b.n	8005970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	4908      	ldr	r1, [pc, #32]	@ (8005980 <__NVIC_SetPriority+0x50>)
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	3b04      	subs	r3, #4
 8005968:	0112      	lsls	r2, r2, #4
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	440b      	add	r3, r1
 800596e:	761a      	strb	r2, [r3, #24]
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	e000e100 	.word	0xe000e100
 8005980:	e000ed00 	.word	0xe000ed00

08005984 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005988:	2100      	movs	r1, #0
 800598a:	f06f 0004 	mvn.w	r0, #4
 800598e:	f7ff ffcf 	bl	8005930 <__NVIC_SetPriority>
#endif
}
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800599e:	f3ef 8305 	mrs	r3, IPSR
 80059a2:	603b      	str	r3, [r7, #0]
  return(result);
 80059a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80059aa:	f06f 0305 	mvn.w	r3, #5
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	e00c      	b.n	80059cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059b2:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <osKernelInitialize+0x44>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80059ba:	4b08      	ldr	r3, [pc, #32]	@ (80059dc <osKernelInitialize+0x44>)
 80059bc:	2201      	movs	r2, #1
 80059be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e002      	b.n	80059cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059cc:	687b      	ldr	r3, [r7, #4]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	200001d4 	.word	0x200001d4

080059e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e6:	f3ef 8305 	mrs	r3, IPSR
 80059ea:	603b      	str	r3, [r7, #0]
  return(result);
 80059ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80059f2:	f06f 0305 	mvn.w	r3, #5
 80059f6:	607b      	str	r3, [r7, #4]
 80059f8:	e010      	b.n	8005a1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005a28 <osKernelStart+0x48>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d109      	bne.n	8005a16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a02:	f7ff ffbf 	bl	8005984 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a06:	4b08      	ldr	r3, [pc, #32]	@ (8005a28 <osKernelStart+0x48>)
 8005a08:	2202      	movs	r2, #2
 8005a0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a0c:	f001 ffc2 	bl	8007994 <vTaskStartScheduler>
      stat = osOK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	e002      	b.n	8005a1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a1c:	687b      	ldr	r3, [r7, #4]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	200001d4 	.word	0x200001d4

08005a2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08e      	sub	sp, #56	@ 0x38
 8005a30:	af04      	add	r7, sp, #16
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a3c:	f3ef 8305 	mrs	r3, IPSR
 8005a40:	617b      	str	r3, [r7, #20]
  return(result);
 8005a42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d17e      	bne.n	8005b46 <osThreadNew+0x11a>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d07b      	beq.n	8005b46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a4e:	2380      	movs	r3, #128	@ 0x80
 8005a50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a52:	2318      	movs	r3, #24
 8005a54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d045      	beq.n	8005af2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <osThreadNew+0x48>
        name = attr->name;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <osThreadNew+0x6e>
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	2b38      	cmp	r3, #56	@ 0x38
 8005a8c:	d805      	bhi.n	8005a9a <osThreadNew+0x6e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <osThreadNew+0x72>
        return (NULL);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e054      	b.n	8005b48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	089b      	lsrs	r3, r3, #2
 8005aac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00e      	beq.n	8005ad4 <osThreadNew+0xa8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	2b5b      	cmp	r3, #91	@ 0x5b
 8005abc:	d90a      	bls.n	8005ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d006      	beq.n	8005ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <osThreadNew+0xa8>
        mem = 1;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e010      	b.n	8005af6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10c      	bne.n	8005af6 <osThreadNew+0xca>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d108      	bne.n	8005af6 <osThreadNew+0xca>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <osThreadNew+0xca>
          mem = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e001      	b.n	8005af6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d110      	bne.n	8005b1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b04:	9202      	str	r2, [sp, #8]
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6a3a      	ldr	r2, [r7, #32]
 8005b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f001 fd62 	bl	80075dc <xTaskCreateStatic>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	e013      	b.n	8005b46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d110      	bne.n	8005b46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	f107 0310 	add.w	r3, r7, #16
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f001 fdb0 	bl	800769c <xTaskCreate>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d001      	beq.n	8005b46 <osThreadNew+0x11a>
            hTask = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b46:	693b      	ldr	r3, [r7, #16]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3728      	adds	r7, #40	@ 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b58:	f3ef 8305 	mrs	r3, IPSR
 8005b5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <osDelay+0x1c>
    stat = osErrorISR;
 8005b64:	f06f 0305 	mvn.w	r3, #5
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e007      	b.n	8005b7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fed6 	bl	8007928 <vTaskDelay>
    }
  }

  return (stat);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b088      	sub	sp, #32
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b92:	f3ef 8305 	mrs	r3, IPSR
 8005b96:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b98:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d174      	bne.n	8005c88 <osMutexNew+0x102>
    if (attr != NULL) {
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <osMutexNew+0x26>
      type = attr->attr_bits;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	e001      	b.n	8005bb0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <osMutexNew+0x3a>
      rmtx = 1U;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e001      	b.n	8005bc4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d15c      	bne.n	8005c88 <osMutexNew+0x102>
      mem = -1;
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d015      	beq.n	8005c06 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d006      	beq.n	8005bf0 <osMutexNew+0x6a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2b4f      	cmp	r3, #79	@ 0x4f
 8005be8:	d902      	bls.n	8005bf0 <osMutexNew+0x6a>
          mem = 1;
 8005bea:	2301      	movs	r3, #1
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	e00c      	b.n	8005c0a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d108      	bne.n	8005c0a <osMutexNew+0x84>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <osMutexNew+0x84>
            mem = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	e001      	b.n	8005c0a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d112      	bne.n	8005c36 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	2004      	movs	r0, #4
 8005c1e:	f000 fd70 	bl	8006702 <xQueueCreateMutexStatic>
 8005c22:	61f8      	str	r0, [r7, #28]
 8005c24:	e016      	b.n	8005c54 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	f000 fd68 	bl	8006702 <xQueueCreateMutexStatic>
 8005c32:	61f8      	str	r0, [r7, #28]
 8005c34:	e00e      	b.n	8005c54 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d004      	beq.n	8005c4c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005c42:	2004      	movs	r0, #4
 8005c44:	f000 fd45 	bl	80066d2 <xQueueCreateMutex>
 8005c48:	61f8      	str	r0, [r7, #28]
 8005c4a:	e003      	b.n	8005c54 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f000 fd40 	bl	80066d2 <xQueueCreateMutex>
 8005c52:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <osMutexNew+0xee>
        if (attr != NULL) {
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <osMutexNew+0xe2>
          name = attr->name;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e001      	b.n	8005c6c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005c6c:	68f9      	ldr	r1, [r7, #12]
 8005c6e:	69f8      	ldr	r0, [r7, #28]
 8005c70:	f001 fc2c 	bl	80074cc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <osMutexNew+0x102>
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005c88:	69fb      	ldr	r3, [r7, #28]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb0:	f3ef 8305 	mrs	r3, IPSR
 8005cb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cb6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005cbc:	f06f 0305 	mvn.w	r3, #5
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	e02c      	b.n	8005d1e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005cca:	f06f 0303 	mvn.w	r3, #3
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	e025      	b.n	8005d1e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d011      	beq.n	8005cfc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6938      	ldr	r0, [r7, #16]
 8005cdc:	f000 fd61 	bl	80067a2 <xQueueTakeMutexRecursive>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d01b      	beq.n	8005d1e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005cec:	f06f 0301 	mvn.w	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	e014      	b.n	8005d1e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005cf4:	f06f 0302 	mvn.w	r3, #2
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e010      	b.n	8005d1e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6938      	ldr	r0, [r7, #16]
 8005d00:	f001 f906 	bl	8006f10 <xQueueSemaphoreTake>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d009      	beq.n	8005d1e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005d10:	f06f 0301 	mvn.w	r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e002      	b.n	8005d1e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005d18:	f06f 0302 	mvn.w	r3, #2
 8005d1c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005d1e:	697b      	ldr	r3, [r7, #20]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d44:	f3ef 8305 	mrs	r3, IPSR
 8005d48:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d4a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005d50:	f06f 0305 	mvn.w	r3, #5
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e01f      	b.n	8005d98 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005d5e:	f06f 0303 	mvn.w	r3, #3
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e018      	b.n	8005d98 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005d6c:	6938      	ldr	r0, [r7, #16]
 8005d6e:	f000 fce3 	bl	8006738 <xQueueGiveMutexRecursive>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d00f      	beq.n	8005d98 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005d78:	f06f 0302 	mvn.w	r3, #2
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	e00b      	b.n	8005d98 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005d80:	2300      	movs	r3, #0
 8005d82:	2200      	movs	r2, #0
 8005d84:	2100      	movs	r1, #0
 8005d86:	6938      	ldr	r0, [r7, #16]
 8005d88:	f000 fdb0 	bl	80068ec <xQueueGenericSend>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d002      	beq.n	8005d98 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005d92:	f06f 0302 	mvn.w	r3, #2
 8005d96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005d98:	697b      	ldr	r3, [r7, #20]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b08a      	sub	sp, #40	@ 0x28
 8005da6:	af02      	add	r7, sp, #8
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db2:	f3ef 8305 	mrs	r3, IPSR
 8005db6:	613b      	str	r3, [r7, #16]
  return(result);
 8005db8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d175      	bne.n	8005eaa <osSemaphoreNew+0x108>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d072      	beq.n	8005eaa <osSemaphoreNew+0x108>
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d86e      	bhi.n	8005eaa <osSemaphoreNew+0x108>
    mem = -1;
 8005dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d015      	beq.n	8005e04 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <osSemaphoreNew+0x4c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	2b4f      	cmp	r3, #79	@ 0x4f
 8005de6:	d902      	bls.n	8005dee <osSemaphoreNew+0x4c>
        mem = 1;
 8005de8:	2301      	movs	r3, #1
 8005dea:	61bb      	str	r3, [r7, #24]
 8005dec:	e00c      	b.n	8005e08 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d108      	bne.n	8005e08 <osSemaphoreNew+0x66>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <osSemaphoreNew+0x66>
          mem = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	e001      	b.n	8005e08 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d04c      	beq.n	8005eaa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d128      	bne.n	8005e68 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d10a      	bne.n	8005e32 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2203      	movs	r2, #3
 8005e22:	9200      	str	r2, [sp, #0]
 8005e24:	2200      	movs	r2, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	2001      	movs	r0, #1
 8005e2a:	f000 fb5d 	bl	80064e8 <xQueueGenericCreateStatic>
 8005e2e:	61f8      	str	r0, [r7, #28]
 8005e30:	e005      	b.n	8005e3e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e32:	2203      	movs	r2, #3
 8005e34:	2100      	movs	r1, #0
 8005e36:	2001      	movs	r0, #1
 8005e38:	f000 fbd3 	bl	80065e2 <xQueueGenericCreate>
 8005e3c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d022      	beq.n	8005e8a <osSemaphoreNew+0xe8>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01f      	beq.n	8005e8a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2100      	movs	r1, #0
 8005e50:	69f8      	ldr	r0, [r7, #28]
 8005e52:	f000 fd4b 	bl	80068ec <xQueueGenericSend>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d016      	beq.n	8005e8a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005e5c:	69f8      	ldr	r0, [r7, #28]
 8005e5e:	f001 f9e9 	bl	8007234 <vQueueDelete>
            hSemaphore = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	e010      	b.n	8005e8a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d108      	bne.n	8005e80 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	461a      	mov	r2, r3
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fcca 	bl	8006810 <xQueueCreateCountingSemaphoreStatic>
 8005e7c:	61f8      	str	r0, [r7, #28]
 8005e7e:	e004      	b.n	8005e8a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 fcfd 	bl	8006882 <xQueueCreateCountingSemaphore>
 8005e88:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00c      	beq.n	8005eaa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e001      	b.n	8005ea2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005ea2:	6979      	ldr	r1, [r7, #20]
 8005ea4:	69f8      	ldr	r0, [r7, #28]
 8005ea6:	f001 fb11 	bl	80074cc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005eaa:	69fb      	ldr	r3, [r7, #28]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3720      	adds	r7, #32
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d103      	bne.n	8005ed4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005ecc:	f06f 0303 	mvn.w	r3, #3
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e039      	b.n	8005f48 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ed4:	f3ef 8305 	mrs	r3, IPSR
 8005ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005eda:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d022      	beq.n	8005f26 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005ee6:	f06f 0303 	mvn.w	r3, #3
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e02c      	b.n	8005f48 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005ef2:	f107 0308 	add.w	r3, r7, #8
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2100      	movs	r1, #0
 8005efa:	6938      	ldr	r0, [r7, #16]
 8005efc:	f001 f918 	bl	8007130 <xQueueReceiveFromISR>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d003      	beq.n	8005f0e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005f06:	f06f 0302 	mvn.w	r3, #2
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e01c      	b.n	8005f48 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d019      	beq.n	8005f48 <osSemaphoreAcquire+0x94>
 8005f14:	4b0f      	ldr	r3, [pc, #60]	@ (8005f54 <osSemaphoreAcquire+0xa0>)
 8005f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	e010      	b.n	8005f48 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6938      	ldr	r0, [r7, #16]
 8005f2a:	f000 fff1 	bl	8006f10 <xQueueSemaphoreTake>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d009      	beq.n	8005f48 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005f3a:	f06f 0301 	mvn.w	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	e002      	b.n	8005f48 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005f42:	f06f 0302 	mvn.w	r3, #2
 8005f46:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005f48:	697b      	ldr	r3, [r7, #20]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d103      	bne.n	8005f76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005f6e:	f06f 0303 	mvn.w	r3, #3
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	e02c      	b.n	8005fd0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f76:	f3ef 8305 	mrs	r3, IPSR
 8005f7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01a      	beq.n	8005fb8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005f86:	f107 0308 	add.w	r3, r7, #8
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6938      	ldr	r0, [r7, #16]
 8005f8e:	f000 fe4d 	bl	8006c2c <xQueueGiveFromISR>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d003      	beq.n	8005fa0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005f98:	f06f 0302 	mvn.w	r3, #2
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	e017      	b.n	8005fd0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d014      	beq.n	8005fd0 <osSemaphoreRelease+0x78>
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <osSemaphoreRelease+0x84>)
 8005fa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	e00b      	b.n	8005fd0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	6938      	ldr	r0, [r7, #16]
 8005fc0:	f000 fc94 	bl	80068ec <xQueueGenericSend>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d002      	beq.n	8005fd0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005fca:	f06f 0302 	mvn.w	r3, #2
 8005fce:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005fd0:	697b      	ldr	r3, [r7, #20]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	@ 0x28
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ff0:	f3ef 8305 	mrs	r3, IPSR
 8005ff4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ff6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d15f      	bne.n	80060bc <osMessageQueueNew+0xdc>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d05c      	beq.n	80060bc <osMessageQueueNew+0xdc>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d059      	beq.n	80060bc <osMessageQueueNew+0xdc>
    mem = -1;
 8006008:	f04f 33ff 	mov.w	r3, #4294967295
 800600c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d029      	beq.n	8006068 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d012      	beq.n	8006042 <osMessageQueueNew+0x62>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b4f      	cmp	r3, #79	@ 0x4f
 8006022:	d90e      	bls.n	8006042 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	695a      	ldr	r2, [r3, #20]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	429a      	cmp	r2, r3
 800603a:	d302      	bcc.n	8006042 <osMessageQueueNew+0x62>
        mem = 1;
 800603c:	2301      	movs	r3, #1
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	e014      	b.n	800606c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d110      	bne.n	800606c <osMessageQueueNew+0x8c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10c      	bne.n	800606c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <osMessageQueueNew+0x8c>
          mem = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	e001      	b.n	800606c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10b      	bne.n	800608a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2100      	movs	r1, #0
 800607c:	9100      	str	r1, [sp, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fa31 	bl	80064e8 <xQueueGenericCreateStatic>
 8006086:	61f8      	str	r0, [r7, #28]
 8006088:	e008      	b.n	800609c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006090:	2200      	movs	r2, #0
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 faa4 	bl	80065e2 <xQueueGenericCreate>
 800609a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00c      	beq.n	80060bc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e001      	b.n	80060b4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80060b4:	6979      	ldr	r1, [r7, #20]
 80060b6:	69f8      	ldr	r0, [r7, #28]
 80060b8:	f001 fa08 	bl	80074cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80060bc:	69fb      	ldr	r3, [r7, #28]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	4613      	mov	r3, r2
 80060d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060e0:	f3ef 8305 	mrs	r3, IPSR
 80060e4:	617b      	str	r3, [r7, #20]
  return(result);
 80060e6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d028      	beq.n	800613e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <osMessageQueuePut+0x36>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <osMessageQueuePut+0x36>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80060fe:	f06f 0303 	mvn.w	r3, #3
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	e038      	b.n	8006178 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800610a:	f107 0210 	add.w	r2, r7, #16
 800610e:	2300      	movs	r3, #0
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	69b8      	ldr	r0, [r7, #24]
 8006114:	f000 fcec 	bl	8006af0 <xQueueGenericSendFromISR>
 8006118:	4603      	mov	r3, r0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d003      	beq.n	8006126 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800611e:	f06f 0302 	mvn.w	r3, #2
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	e028      	b.n	8006178 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d025      	beq.n	8006178 <osMessageQueuePut+0xb0>
 800612c:	4b15      	ldr	r3, [pc, #84]	@ (8006184 <osMessageQueuePut+0xbc>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	e01c      	b.n	8006178 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <osMessageQueuePut+0x82>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800614a:	f06f 0303 	mvn.w	r3, #3
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	e012      	b.n	8006178 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006152:	2300      	movs	r3, #0
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	69b8      	ldr	r0, [r7, #24]
 800615a:	f000 fbc7 	bl	80068ec <xQueueGenericSend>
 800615e:	4603      	mov	r3, r0
 8006160:	2b01      	cmp	r3, #1
 8006162:	d009      	beq.n	8006178 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800616a:	f06f 0301 	mvn.w	r3, #1
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	e002      	b.n	8006178 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006172:	f06f 0302 	mvn.w	r3, #2
 8006176:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006178:	69fb      	ldr	r3, [r7, #28]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800619e:	f3ef 8305 	mrs	r3, IPSR
 80061a2:	617b      	str	r3, [r7, #20]
  return(result);
 80061a4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d028      	beq.n	80061fc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <osMessageQueueGet+0x34>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <osMessageQueueGet+0x34>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80061bc:	f06f 0303 	mvn.w	r3, #3
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	e037      	b.n	8006234 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80061c8:	f107 0310 	add.w	r3, r7, #16
 80061cc:	461a      	mov	r2, r3
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	69b8      	ldr	r0, [r7, #24]
 80061d2:	f000 ffad 	bl	8007130 <xQueueReceiveFromISR>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d003      	beq.n	80061e4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80061dc:	f06f 0302 	mvn.w	r3, #2
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	e027      	b.n	8006234 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d024      	beq.n	8006234 <osMessageQueueGet+0xac>
 80061ea:	4b15      	ldr	r3, [pc, #84]	@ (8006240 <osMessageQueueGet+0xb8>)
 80061ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	e01b      	b.n	8006234 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <osMessageQueueGet+0x80>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d103      	bne.n	8006210 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006208:	f06f 0303 	mvn.w	r3, #3
 800620c:	61fb      	str	r3, [r7, #28]
 800620e:	e011      	b.n	8006234 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	69b8      	ldr	r0, [r7, #24]
 8006216:	f000 fd99 	bl	8006d4c <xQueueReceive>
 800621a:	4603      	mov	r3, r0
 800621c:	2b01      	cmp	r3, #1
 800621e:	d009      	beq.n	8006234 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006226:	f06f 0301 	mvn.w	r3, #1
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	e002      	b.n	8006234 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800622e:	f06f 0302 	mvn.w	r3, #2
 8006232:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006234:	69fb      	ldr	r3, [r7, #28]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4a07      	ldr	r2, [pc, #28]	@ (8006270 <vApplicationGetIdleTaskMemory+0x2c>)
 8006254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4a06      	ldr	r2, [pc, #24]	@ (8006274 <vApplicationGetIdleTaskMemory+0x30>)
 800625a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2280      	movs	r2, #128	@ 0x80
 8006260:	601a      	str	r2, [r3, #0]
}
 8006262:	bf00      	nop
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	200001d8 	.word	0x200001d8
 8006274:	20000234 	.word	0x20000234

08006278 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a07      	ldr	r2, [pc, #28]	@ (80062a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006288:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4a06      	ldr	r2, [pc, #24]	@ (80062a8 <vApplicationGetTimerTaskMemory+0x30>)
 800628e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006296:	601a      	str	r2, [r3, #0]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	20000434 	.word	0x20000434
 80062a8:	20000490 	.word	0x20000490

080062ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f103 0208 	add.w	r2, r3, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f04f 32ff 	mov.w	r2, #4294967295
 80062c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f103 0208 	add.w	r2, r3, #8
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f103 0208 	add.w	r2, r3, #8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	601a      	str	r2, [r3, #0]
}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d103      	bne.n	800636e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	e00c      	b.n	8006388 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3308      	adds	r3, #8
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	e002      	b.n	800637c <vListInsert+0x2e>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	429a      	cmp	r2, r3
 8006386:	d2f6      	bcs.n	8006376 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6892      	ldr	r2, [r2, #8]
 80063d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6852      	ldr	r2, [r2, #4]
 80063e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d103      	bne.n	80063f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	1e5a      	subs	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	e7fd      	b.n	800643c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006440:	f002 fd72 	bl	8008f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644c:	68f9      	ldr	r1, [r7, #12]
 800644e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006450:	fb01 f303 	mul.w	r3, r1, r3
 8006454:	441a      	add	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006470:	3b01      	subs	r3, #1
 8006472:	68f9      	ldr	r1, [r7, #12]
 8006474:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006476:	fb01 f303 	mul.w	r3, r1, r3
 800647a:	441a      	add	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	22ff      	movs	r2, #255	@ 0xff
 8006484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	22ff      	movs	r2, #255	@ 0xff
 800648c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d114      	bne.n	80064c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01a      	beq.n	80064d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3310      	adds	r3, #16
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 fd04 	bl	8007eb0 <xTaskRemoveFromEventList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d012      	beq.n	80064d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064ae:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <xQueueGenericReset+0xd0>)
 80064b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	e009      	b.n	80064d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3310      	adds	r3, #16
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff fef1 	bl	80062ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3324      	adds	r3, #36	@ 0x24
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff feec 	bl	80062ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064d4:	f002 fd5a 	bl	8008f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064d8:	2301      	movs	r3, #1
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08e      	sub	sp, #56	@ 0x38
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10b      	bne.n	8006514 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800650e:	bf00      	nop
 8006510:	bf00      	nop
 8006512:	e7fd      	b.n	8006510 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <xQueueGenericCreateStatic+0x56>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <xQueueGenericCreateStatic+0x5a>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <xQueueGenericCreateStatic+0x5c>
 8006542:	2300      	movs	r3, #0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10b      	bne.n	8006560 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	623b      	str	r3, [r7, #32]
}
 800655a:	bf00      	nop
 800655c:	bf00      	nop
 800655e:	e7fd      	b.n	800655c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <xQueueGenericCreateStatic+0x84>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <xQueueGenericCreateStatic+0x88>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <xQueueGenericCreateStatic+0x8a>
 8006570:	2300      	movs	r3, #0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10b      	bne.n	800658e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	61fb      	str	r3, [r7, #28]
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	e7fd      	b.n	800658a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800658e:	2350      	movs	r3, #80	@ 0x50
 8006590:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b50      	cmp	r3, #80	@ 0x50
 8006596:	d00b      	beq.n	80065b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	61bb      	str	r3, [r7, #24]
}
 80065aa:	bf00      	nop
 80065ac:	bf00      	nop
 80065ae:	e7fd      	b.n	80065ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80065b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00d      	beq.n	80065d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80065c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f840 	bl	8006658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80065da:	4618      	mov	r0, r3
 80065dc:	3730      	adds	r7, #48	@ 0x30
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b08a      	sub	sp, #40	@ 0x28
 80065e6:	af02      	add	r7, sp, #8
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	4613      	mov	r3, r2
 80065ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10b      	bne.n	800660e <xQueueGenericCreate+0x2c>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	613b      	str	r3, [r7, #16]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	fb02 f303 	mul.w	r3, r2, r3
 8006616:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	3350      	adds	r3, #80	@ 0x50
 800661c:	4618      	mov	r0, r3
 800661e:	f002 fda5 	bl	800916c <pvPortMalloc>
 8006622:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	3350      	adds	r3, #80	@ 0x50
 8006632:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800663c:	79fa      	ldrb	r2, [r7, #7]
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	4613      	mov	r3, r2
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f805 	bl	8006658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800664e:	69bb      	ldr	r3, [r7, #24]
	}
 8006650:	4618      	mov	r0, r3
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d103      	bne.n	8006674 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e002      	b.n	800667a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006686:	2101      	movs	r1, #1
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f7ff fec3 	bl	8006414 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	78fa      	ldrb	r2, [r7, #3]
 8006692:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006696:	bf00      	nop
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066be:	2300      	movs	r3, #0
 80066c0:	2200      	movs	r2, #0
 80066c2:	2100      	movs	r1, #0
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f911 	bl	80068ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b086      	sub	sp, #24
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	4603      	mov	r3, r0
 80066da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066dc:	2301      	movs	r3, #1
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6939      	ldr	r1, [r7, #16]
 80066ea:	6978      	ldr	r0, [r7, #20]
 80066ec:	f7ff ff79 	bl	80065e2 <xQueueGenericCreate>
 80066f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ffd3 	bl	800669e <prvInitialiseMutex>

		return xNewQueue;
 80066f8:	68fb      	ldr	r3, [r7, #12]
	}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006702:	b580      	push	{r7, lr}
 8006704:	b088      	sub	sp, #32
 8006706:	af02      	add	r7, sp, #8
 8006708:	4603      	mov	r3, r0
 800670a:	6039      	str	r1, [r7, #0]
 800670c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800670e:	2301      	movs	r3, #1
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	6939      	ldr	r1, [r7, #16]
 8006720:	6978      	ldr	r0, [r7, #20]
 8006722:	f7ff fee1 	bl	80064e8 <xQueueGenericCreateStatic>
 8006726:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7ff ffb8 	bl	800669e <prvInitialiseMutex>

		return xNewQueue;
 800672e:	68fb      	ldr	r3, [r7, #12]
	}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006738:	b590      	push	{r4, r7, lr}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	60fb      	str	r3, [r7, #12]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	689c      	ldr	r4, [r3, #8]
 8006766:	f001 fd63 	bl	8008230 <xTaskGetCurrentTaskHandle>
 800676a:	4603      	mov	r3, r0
 800676c:	429c      	cmp	r4, r3
 800676e:	d111      	bne.n	8006794 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	1e5a      	subs	r2, r3, #1
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006782:	2300      	movs	r3, #0
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	6938      	ldr	r0, [r7, #16]
 800678a:	f000 f8af 	bl	80068ec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800678e:	2301      	movs	r3, #1
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e001      	b.n	8006798 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006798:	697b      	ldr	r3, [r7, #20]
	}
 800679a:	4618      	mov	r0, r3
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd90      	pop	{r4, r7, pc}

080067a2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80067a2:	b590      	push	{r4, r7, lr}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60fb      	str	r3, [r7, #12]
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	689c      	ldr	r4, [r3, #8]
 80067d2:	f001 fd2d 	bl	8008230 <xTaskGetCurrentTaskHandle>
 80067d6:	4603      	mov	r3, r0
 80067d8:	429c      	cmp	r4, r3
 80067da:	d107      	bne.n	80067ec <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80067e6:	2301      	movs	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	e00c      	b.n	8006806 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6938      	ldr	r0, [r7, #16]
 80067f0:	f000 fb8e 	bl	8006f10 <xQueueSemaphoreTake>
 80067f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006806:	697b      	ldr	r3, [r7, #20]
	}
 8006808:	4618      	mov	r0, r3
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	bd90      	pop	{r4, r7, pc}

08006810 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	@ 0x28
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10b      	bne.n	800683a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	61bb      	str	r3, [r7, #24]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	429a      	cmp	r2, r3
 8006840:	d90b      	bls.n	800685a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	617b      	str	r3, [r7, #20]
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800685a:	2302      	movs	r3, #2
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	2100      	movs	r1, #0
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fe3f 	bl	80064e8 <xQueueGenericCreateStatic>
 800686a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006878:	69fb      	ldr	r3, [r7, #28]
	}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10b      	bne.n	80068aa <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	613b      	str	r3, [r7, #16]
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	e7fd      	b.n	80068a6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d90b      	bls.n	80068ca <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60fb      	str	r3, [r7, #12]
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	e7fd      	b.n	80068c6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80068ca:	2202      	movs	r2, #2
 80068cc:	2100      	movs	r1, #0
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff fe87 	bl	80065e2 <xQueueGenericCreate>
 80068d4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068e2:	697b      	ldr	r3, [r7, #20]
	}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08e      	sub	sp, #56	@ 0x38
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068fa:	2300      	movs	r3, #0
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10b      	bne.n	8006920 <xQueueGenericSend+0x34>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	e7fd      	b.n	800691c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d103      	bne.n	800692e <xQueueGenericSend+0x42>
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <xQueueGenericSend+0x46>
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <xQueueGenericSend+0x48>
 8006932:	2300      	movs	r3, #0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10b      	bne.n	8006950 <xQueueGenericSend+0x64>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800694a:	bf00      	nop
 800694c:	bf00      	nop
 800694e:	e7fd      	b.n	800694c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d103      	bne.n	800695e <xQueueGenericSend+0x72>
 8006956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <xQueueGenericSend+0x76>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <xQueueGenericSend+0x78>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10b      	bne.n	8006980 <xQueueGenericSend+0x94>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	623b      	str	r3, [r7, #32]
}
 800697a:	bf00      	nop
 800697c:	bf00      	nop
 800697e:	e7fd      	b.n	800697c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006980:	f001 fc66 	bl	8008250 <xTaskGetSchedulerState>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d102      	bne.n	8006990 <xQueueGenericSend+0xa4>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <xQueueGenericSend+0xa8>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <xQueueGenericSend+0xaa>
 8006994:	2300      	movs	r3, #0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	61fb      	str	r3, [r7, #28]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069b2:	f002 fab9 	bl	8008f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069be:	429a      	cmp	r2, r3
 80069c0:	d302      	bcc.n	80069c8 <xQueueGenericSend+0xdc>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d129      	bne.n	8006a1c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069ce:	f000 fc6d 	bl	80072ac <prvCopyDataToQueue>
 80069d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d010      	beq.n	80069fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	3324      	adds	r3, #36	@ 0x24
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fa65 	bl	8007eb0 <xTaskRemoveFromEventList>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d013      	beq.n	8006a14 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069ec:	4b3f      	ldr	r3, [pc, #252]	@ (8006aec <xQueueGenericSend+0x200>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	e00a      	b.n	8006a14 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a04:	4b39      	ldr	r3, [pc, #228]	@ (8006aec <xQueueGenericSend+0x200>)
 8006a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a14:	f002 faba 	bl	8008f8c <vPortExitCritical>
				return pdPASS;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e063      	b.n	8006ae4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d103      	bne.n	8006a2a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a22:	f002 fab3 	bl	8008f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e05c      	b.n	8006ae4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 fa9f 	bl	8007f78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a3e:	f002 faa5 	bl	8008f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a42:	f001 f80f 	bl	8007a64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a46:	f002 fa6f 	bl	8008f28 <vPortEnterCritical>
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a50:	b25b      	sxtb	r3, r3
 8006a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a56:	d103      	bne.n	8006a60 <xQueueGenericSend+0x174>
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a66:	b25b      	sxtb	r3, r3
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d103      	bne.n	8006a76 <xQueueGenericSend+0x18a>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a76:	f002 fa89 	bl	8008f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a7a:	1d3a      	adds	r2, r7, #4
 8006a7c:	f107 0314 	add.w	r3, r7, #20
 8006a80:	4611      	mov	r1, r2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 fa8e 	bl	8007fa4 <xTaskCheckForTimeOut>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d124      	bne.n	8006ad8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a90:	f000 fd04 	bl	800749c <prvIsQueueFull>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d018      	beq.n	8006acc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	3310      	adds	r3, #16
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 f9b2 	bl	8007e0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006aaa:	f000 fc8f 	bl	80073cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aae:	f000 ffe7 	bl	8007a80 <xTaskResumeAll>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f47f af7c 	bne.w	80069b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006aba:	4b0c      	ldr	r3, [pc, #48]	@ (8006aec <xQueueGenericSend+0x200>)
 8006abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	e772      	b.n	80069b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ace:	f000 fc7d 	bl	80073cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ad2:	f000 ffd5 	bl	8007a80 <xTaskResumeAll>
 8006ad6:	e76c      	b.n	80069b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ada:	f000 fc77 	bl	80073cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ade:	f000 ffcf 	bl	8007a80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ae2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3738      	adds	r7, #56	@ 0x38
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	e000ed04 	.word	0xe000ed04

08006af0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b090      	sub	sp, #64	@ 0x40
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10b      	bne.n	8006b20 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b1a:	bf00      	nop
 8006b1c:	bf00      	nop
 8006b1e:	e7fd      	b.n	8006b1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <xQueueGenericSendFromISR+0x3e>
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <xQueueGenericSendFromISR+0x42>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <xQueueGenericSendFromISR+0x44>
 8006b32:	2300      	movs	r3, #0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10b      	bne.n	8006b50 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	e7fd      	b.n	8006b4c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d103      	bne.n	8006b5e <xQueueGenericSendFromISR+0x6e>
 8006b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <xQueueGenericSendFromISR+0x72>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <xQueueGenericSendFromISR+0x74>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10b      	bne.n	8006b80 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	623b      	str	r3, [r7, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	e7fd      	b.n	8006b7c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b80:	f002 fab2 	bl	80090e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b84:	f3ef 8211 	mrs	r2, BASEPRI
 8006b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	61fa      	str	r2, [r7, #28]
 8006b9a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b9e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <xQueueGenericSendFromISR+0xc2>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d12f      	bne.n	8006c12 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006bc8:	f000 fb70 	bl	80072ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bcc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd4:	d112      	bne.n	8006bfc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d016      	beq.n	8006c0c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be0:	3324      	adds	r3, #36	@ 0x24
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 f964 	bl	8007eb0 <xTaskRemoveFromEventList>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00e      	beq.n	8006c0c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e007      	b.n	8006c0c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c00:	3301      	adds	r3, #1
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	b25a      	sxtb	r2, r3
 8006c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006c10:	e001      	b.n	8006c16 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c18:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3740      	adds	r7, #64	@ 0x40
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08e      	sub	sp, #56	@ 0x38
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	623b      	str	r3, [r7, #32]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	61fb      	str	r3, [r7, #28]
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d103      	bne.n	8006c88 <xQueueGiveFromISR+0x5c>
 8006c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <xQueueGiveFromISR+0x60>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <xQueueGiveFromISR+0x62>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10b      	bne.n	8006caa <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	61bb      	str	r3, [r7, #24]
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	e7fd      	b.n	8006ca6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006caa:	f002 fa1d 	bl	80090e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006cae:	f3ef 8211 	mrs	r2, BASEPRI
 8006cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	617a      	str	r2, [r7, #20]
 8006cc4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006cc6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d22b      	bcs.n	8006d32 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf4:	d112      	bne.n	8006d1c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d016      	beq.n	8006d2c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	3324      	adds	r3, #36	@ 0x24
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 f8d4 	bl	8007eb0 <xTaskRemoveFromEventList>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00e      	beq.n	8006d2c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00b      	beq.n	8006d2c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e007      	b.n	8006d2c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d20:	3301      	adds	r3, #1
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	b25a      	sxtb	r2, r3
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d30:	e001      	b.n	8006d36 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d38:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f383 8811 	msr	BASEPRI, r3
}
 8006d40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3738      	adds	r7, #56	@ 0x38
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08c      	sub	sp, #48	@ 0x30
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10b      	bne.n	8006d7e <xQueueReceive+0x32>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	623b      	str	r3, [r7, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d103      	bne.n	8006d8c <xQueueReceive+0x40>
 8006d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <xQueueReceive+0x44>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <xQueueReceive+0x46>
 8006d90:	2300      	movs	r3, #0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <xQueueReceive+0x62>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	61fb      	str	r3, [r7, #28]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dae:	f001 fa4f 	bl	8008250 <xTaskGetSchedulerState>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <xQueueReceive+0x72>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <xQueueReceive+0x76>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <xQueueReceive+0x78>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10b      	bne.n	8006de0 <xQueueReceive+0x94>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	61bb      	str	r3, [r7, #24]
}
 8006dda:	bf00      	nop
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006de0:	f002 f8a2 	bl	8008f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01f      	beq.n	8006e30 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006df4:	f000 fac4 	bl	8007380 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	1e5a      	subs	r2, r3, #1
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00f      	beq.n	8006e28 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0a:	3310      	adds	r3, #16
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f001 f84f 	bl	8007eb0 <xTaskRemoveFromEventList>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d007      	beq.n	8006e28 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e18:	4b3c      	ldr	r3, [pc, #240]	@ (8006f0c <xQueueReceive+0x1c0>)
 8006e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e28:	f002 f8b0 	bl	8008f8c <vPortExitCritical>
				return pdPASS;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e069      	b.n	8006f04 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e36:	f002 f8a9 	bl	8008f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e062      	b.n	8006f04 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d106      	bne.n	8006e52 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e44:	f107 0310 	add.w	r3, r7, #16
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 f895 	bl	8007f78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e52:	f002 f89b 	bl	8008f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e56:	f000 fe05 	bl	8007a64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e5a:	f002 f865 	bl	8008f28 <vPortEnterCritical>
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e64:	b25b      	sxtb	r3, r3
 8006e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6a:	d103      	bne.n	8006e74 <xQueueReceive+0x128>
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e7a:	b25b      	sxtb	r3, r3
 8006e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e80:	d103      	bne.n	8006e8a <xQueueReceive+0x13e>
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e8a:	f002 f87f 	bl	8008f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e8e:	1d3a      	adds	r2, r7, #4
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 f884 	bl	8007fa4 <xTaskCheckForTimeOut>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d123      	bne.n	8006eea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ea4:	f000 fae4 	bl	8007470 <prvIsQueueEmpty>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d017      	beq.n	8006ede <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	3324      	adds	r3, #36	@ 0x24
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 ffa8 	bl	8007e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ebe:	f000 fa85 	bl	80073cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ec2:	f000 fddd 	bl	8007a80 <xTaskResumeAll>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d189      	bne.n	8006de0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8006f0c <xQueueReceive+0x1c0>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	e780      	b.n	8006de0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ee0:	f000 fa74 	bl	80073cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ee4:	f000 fdcc 	bl	8007a80 <xTaskResumeAll>
 8006ee8:	e77a      	b.n	8006de0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eec:	f000 fa6e 	bl	80073cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ef0:	f000 fdc6 	bl	8007a80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ef6:	f000 fabb 	bl	8007470 <prvIsQueueEmpty>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f43f af6f 	beq.w	8006de0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3730      	adds	r7, #48	@ 0x30
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	e000ed04 	.word	0xe000ed04

08006f10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08e      	sub	sp, #56	@ 0x38
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	623b      	str	r3, [r7, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	61fb      	str	r3, [r7, #28]
}
 8006f5e:	bf00      	nop
 8006f60:	bf00      	nop
 8006f62:	e7fd      	b.n	8006f60 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f64:	f001 f974 	bl	8008250 <xTaskGetSchedulerState>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <xQueueSemaphoreTake+0x64>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <xQueueSemaphoreTake+0x68>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e000      	b.n	8006f7a <xQueueSemaphoreTake+0x6a>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	61bb      	str	r3, [r7, #24]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f96:	f001 ffc7 	bl	8008f28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d024      	beq.n	8006ff0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa8:	1e5a      	subs	r2, r3, #1
 8006faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006fb6:	f001 fac5 	bl	8008544 <pvTaskIncrementMutexHeldCount>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00f      	beq.n	8006fe8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fca:	3310      	adds	r3, #16
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 ff6f 	bl	8007eb0 <xTaskRemoveFromEventList>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d007      	beq.n	8006fe8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fd8:	4b54      	ldr	r3, [pc, #336]	@ (800712c <xQueueSemaphoreTake+0x21c>)
 8006fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fe8:	f001 ffd0 	bl	8008f8c <vPortExitCritical>
				return pdPASS;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e098      	b.n	8007122 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d112      	bne.n	800701c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	617b      	str	r3, [r7, #20]
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007014:	f001 ffba 	bl	8008f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007018:	2300      	movs	r3, #0
 800701a:	e082      	b.n	8007122 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800701c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4618      	mov	r0, r3
 8007028:	f000 ffa6 	bl	8007f78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007030:	f001 ffac 	bl	8008f8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007034:	f000 fd16 	bl	8007a64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007038:	f001 ff76 	bl	8008f28 <vPortEnterCritical>
 800703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007042:	b25b      	sxtb	r3, r3
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d103      	bne.n	8007052 <xQueueSemaphoreTake+0x142>
 800704a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007058:	b25b      	sxtb	r3, r3
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d103      	bne.n	8007068 <xQueueSemaphoreTake+0x158>
 8007060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007068:	f001 ff90 	bl	8008f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800706c:	463a      	mov	r2, r7
 800706e:	f107 030c 	add.w	r3, r7, #12
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f000 ff95 	bl	8007fa4 <xTaskCheckForTimeOut>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d132      	bne.n	80070e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007082:	f000 f9f5 	bl	8007470 <prvIsQueueEmpty>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d026      	beq.n	80070da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d109      	bne.n	80070a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007094:	f001 ff48 	bl	8008f28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4618      	mov	r0, r3
 800709e:	f001 f8f5 	bl	800828c <xTaskPriorityInherit>
 80070a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80070a4:	f001 ff72 	bl	8008f8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070aa:	3324      	adds	r3, #36	@ 0x24
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	4611      	mov	r1, r2
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 feab 	bl	8007e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070b8:	f000 f988 	bl	80073cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070bc:	f000 fce0 	bl	8007a80 <xTaskResumeAll>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f47f af67 	bne.w	8006f96 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80070c8:	4b18      	ldr	r3, [pc, #96]	@ (800712c <xQueueSemaphoreTake+0x21c>)
 80070ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	e75d      	b.n	8006f96 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070dc:	f000 f976 	bl	80073cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070e0:	f000 fcce 	bl	8007a80 <xTaskResumeAll>
 80070e4:	e757      	b.n	8006f96 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070e8:	f000 f970 	bl	80073cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070ec:	f000 fcc8 	bl	8007a80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070f2:	f000 f9bd 	bl	8007470 <prvIsQueueEmpty>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f43f af4c 	beq.w	8006f96 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00d      	beq.n	8007120 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007104:	f001 ff10 	bl	8008f28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007108:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800710a:	f000 f8b7 	bl	800727c <prvGetDisinheritPriorityAfterTimeout>
 800710e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007116:	4618      	mov	r0, r3
 8007118:	f001 f990 	bl	800843c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800711c:	f001 ff36 	bl	8008f8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007120:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007122:	4618      	mov	r0, r3
 8007124:	3738      	adds	r7, #56	@ 0x38
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08e      	sub	sp, #56	@ 0x38
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10b      	bne.n	800715e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	623b      	str	r3, [r7, #32]
}
 8007158:	bf00      	nop
 800715a:	bf00      	nop
 800715c:	e7fd      	b.n	800715a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d103      	bne.n	800716c <xQueueReceiveFromISR+0x3c>
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <xQueueReceiveFromISR+0x40>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <xQueueReceiveFromISR+0x42>
 8007170:	2300      	movs	r3, #0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10b      	bne.n	800718e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	61fb      	str	r3, [r7, #28]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800718e:	f001 ffab 	bl	80090e8 <vPortValidateInterruptPriority>
	__asm volatile
 8007192:	f3ef 8211 	mrs	r2, BASEPRI
 8007196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	61ba      	str	r2, [r7, #24]
 80071a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80071aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d02f      	beq.n	800721a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80071ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071c8:	f000 f8da 	bl	8007380 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	1e5a      	subs	r2, r3, #1
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d112      	bne.n	8007204 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d016      	beq.n	8007214 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	3310      	adds	r3, #16
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fe60 	bl	8007eb0 <xTaskRemoveFromEventList>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00e      	beq.n	8007214 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e007      	b.n	8007214 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007208:	3301      	adds	r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	b25a      	sxtb	r2, r3
 800720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007214:	2301      	movs	r3, #1
 8007216:	637b      	str	r3, [r7, #52]	@ 0x34
 8007218:	e001      	b.n	800721e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800721a:	2300      	movs	r3, #0
 800721c:	637b      	str	r3, [r7, #52]	@ 0x34
 800721e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007220:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f383 8811 	msr	BASEPRI, r3
}
 8007228:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800722a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800722c:	4618      	mov	r0, r3
 800722e:	3738      	adds	r7, #56	@ 0x38
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10b      	bne.n	800725e <vQueueDelete+0x2a>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	60bb      	str	r3, [r7, #8]
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	e7fd      	b.n	800725a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f95e 	bl	8007520 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f002 f84a 	bl	8009308 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d006      	beq.n	800729a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e001      	b.n	800729e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800729e:	68fb      	ldr	r3, [r7, #12]
	}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10d      	bne.n	80072e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d14d      	bne.n	800736e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f001 f840 	bl	800835c <xTaskPriorityDisinherit>
 80072dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	609a      	str	r2, [r3, #8]
 80072e4:	e043      	b.n	800736e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d119      	bne.n	8007320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6858      	ldr	r0, [r3, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f4:	461a      	mov	r2, r3
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	f002 fbab 	bl	8009a52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007304:	441a      	add	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	429a      	cmp	r2, r3
 8007314:	d32b      	bcc.n	800736e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	e026      	b.n	800736e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68d8      	ldr	r0, [r3, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007328:	461a      	mov	r2, r3
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	f002 fb91 	bl	8009a52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007338:	425b      	negs	r3, r3
 800733a:	441a      	add	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d207      	bcs.n	800735c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007354:	425b      	negs	r3, r3
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b02      	cmp	r3, #2
 8007360:	d105      	bne.n	800736e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	3b01      	subs	r3, #1
 800736c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007376:	697b      	ldr	r3, [r7, #20]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d018      	beq.n	80073c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739a:	441a      	add	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d303      	bcc.n	80073b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68d9      	ldr	r1, [r3, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073bc:	461a      	mov	r2, r3
 80073be:	6838      	ldr	r0, [r7, #0]
 80073c0:	f002 fb47 	bl	8009a52 <memcpy>
	}
}
 80073c4:	bf00      	nop
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073d4:	f001 fda8 	bl	8008f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073e0:	e011      	b.n	8007406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d012      	beq.n	8007410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3324      	adds	r3, #36	@ 0x24
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fd5e 	bl	8007eb0 <xTaskRemoveFromEventList>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073fa:	f000 fe37 	bl	800806c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	3b01      	subs	r3, #1
 8007402:	b2db      	uxtb	r3, r3
 8007404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dce9      	bgt.n	80073e2 <prvUnlockQueue+0x16>
 800740e:	e000      	b.n	8007412 <prvUnlockQueue+0x46>
					break;
 8007410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	22ff      	movs	r2, #255	@ 0xff
 8007416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800741a:	f001 fdb7 	bl	8008f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800741e:	f001 fd83 	bl	8008f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800742a:	e011      	b.n	8007450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d012      	beq.n	800745a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3310      	adds	r3, #16
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fd39 	bl	8007eb0 <xTaskRemoveFromEventList>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007444:	f000 fe12 	bl	800806c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	3b01      	subs	r3, #1
 800744c:	b2db      	uxtb	r3, r3
 800744e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007454:	2b00      	cmp	r3, #0
 8007456:	dce9      	bgt.n	800742c <prvUnlockQueue+0x60>
 8007458:	e000      	b.n	800745c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800745a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	22ff      	movs	r2, #255	@ 0xff
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007464:	f001 fd92 	bl	8008f8c <vPortExitCritical>
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007478:	f001 fd56 	bl	8008f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007484:	2301      	movs	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	e001      	b.n	800748e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800748e:	f001 fd7d 	bl	8008f8c <vPortExitCritical>

	return xReturn;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074a4:	f001 fd40 	bl	8008f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d102      	bne.n	80074ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074b4:	2301      	movs	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	e001      	b.n	80074be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074be:	f001 fd65 	bl	8008f8c <vPortExitCritical>

	return xReturn;
 80074c2:	68fb      	ldr	r3, [r7, #12]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e014      	b.n	8007506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074dc:	4a0f      	ldr	r2, [pc, #60]	@ (800751c <vQueueAddToRegistry+0x50>)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074e8:	490c      	ldr	r1, [pc, #48]	@ (800751c <vQueueAddToRegistry+0x50>)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074f2:	4a0a      	ldr	r2, [pc, #40]	@ (800751c <vQueueAddToRegistry+0x50>)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	4413      	add	r3, r2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074fe:	e006      	b.n	800750e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b07      	cmp	r3, #7
 800750a:	d9e7      	bls.n	80074dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000890 	.word	0x20000890

08007520 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	e016      	b.n	800755c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800752e:	4a10      	ldr	r2, [pc, #64]	@ (8007570 <vQueueUnregisterQueue+0x50>)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	4413      	add	r3, r2
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	429a      	cmp	r2, r3
 800753c:	d10b      	bne.n	8007556 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800753e:	4a0c      	ldr	r2, [pc, #48]	@ (8007570 <vQueueUnregisterQueue+0x50>)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2100      	movs	r1, #0
 8007544:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007548:	4a09      	ldr	r2, [pc, #36]	@ (8007570 <vQueueUnregisterQueue+0x50>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	4413      	add	r3, r2
 8007550:	2200      	movs	r2, #0
 8007552:	605a      	str	r2, [r3, #4]
				break;
 8007554:	e006      	b.n	8007564 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3301      	adds	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b07      	cmp	r3, #7
 8007560:	d9e5      	bls.n	800752e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	20000890 	.word	0x20000890

08007574 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007584:	f001 fcd0 	bl	8008f28 <vPortEnterCritical>
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800758e:	b25b      	sxtb	r3, r3
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d103      	bne.n	800759e <vQueueWaitForMessageRestricted+0x2a>
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075a4:	b25b      	sxtb	r3, r3
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075aa:	d103      	bne.n	80075b4 <vQueueWaitForMessageRestricted+0x40>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075b4:	f001 fcea 	bl	8008f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d106      	bne.n	80075ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3324      	adds	r3, #36	@ 0x24
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fc45 	bl	8007e58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075ce:	6978      	ldr	r0, [r7, #20]
 80075d0:	f7ff fefc 	bl	80073cc <prvUnlockQueue>
	}
 80075d4:	bf00      	nop
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08e      	sub	sp, #56	@ 0x38
 80075e0:	af04      	add	r7, sp, #16
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10b      	bne.n	8007608 <xTaskCreateStatic+0x2c>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	623b      	str	r3, [r7, #32]
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10b      	bne.n	8007626 <xTaskCreateStatic+0x4a>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	61fb      	str	r3, [r7, #28]
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	e7fd      	b.n	8007622 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007626:	235c      	movs	r3, #92	@ 0x5c
 8007628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b5c      	cmp	r3, #92	@ 0x5c
 800762e:	d00b      	beq.n	8007648 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	61bb      	str	r3, [r7, #24]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007648:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800764a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01e      	beq.n	800768e <xTaskCreateStatic+0xb2>
 8007650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01b      	beq.n	800768e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007658:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800765e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	2202      	movs	r2, #2
 8007664:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007668:	2300      	movs	r3, #0
 800766a:	9303      	str	r3, [sp, #12]
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	9302      	str	r3, [sp, #8]
 8007670:	f107 0314 	add.w	r3, r7, #20
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 f850 	bl	8007726 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007686:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007688:	f000 f8de 	bl	8007848 <prvAddNewTaskToReadyList>
 800768c:	e001      	b.n	8007692 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800768e:	2300      	movs	r3, #0
 8007690:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007692:	697b      	ldr	r3, [r7, #20]
	}
 8007694:	4618      	mov	r0, r3
 8007696:	3728      	adds	r7, #40	@ 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08c      	sub	sp, #48	@ 0x30
 80076a0:	af04      	add	r7, sp, #16
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076ac:	88fb      	ldrh	r3, [r7, #6]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 fd5b 	bl	800916c <pvPortMalloc>
 80076b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00e      	beq.n	80076dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076be:	205c      	movs	r0, #92	@ 0x5c
 80076c0:	f001 fd54 	bl	800916c <pvPortMalloc>
 80076c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80076d2:	e005      	b.n	80076e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076d4:	6978      	ldr	r0, [r7, #20]
 80076d6:	f001 fe17 	bl	8009308 <vPortFree>
 80076da:	e001      	b.n	80076e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076dc:	2300      	movs	r3, #0
 80076de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d017      	beq.n	8007716 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	2300      	movs	r3, #0
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	9302      	str	r3, [sp, #8]
 80076f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	68b9      	ldr	r1, [r7, #8]
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f80e 	bl	8007726 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800770a:	69f8      	ldr	r0, [r7, #28]
 800770c:	f000 f89c 	bl	8007848 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007710:	2301      	movs	r3, #1
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	e002      	b.n	800771c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007716:	f04f 33ff 	mov.w	r3, #4294967295
 800771a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800771c:	69bb      	ldr	r3, [r7, #24]
	}
 800771e:	4618      	mov	r0, r3
 8007720:	3720      	adds	r7, #32
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b088      	sub	sp, #32
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
 8007732:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	461a      	mov	r2, r3
 800773e:	21a5      	movs	r1, #165	@ 0xa5
 8007740:	f002 f90c 	bl	800995c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800774e:	3b01      	subs	r3, #1
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f023 0307 	bic.w	r3, r3, #7
 800775c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	617b      	str	r3, [r7, #20]
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01f      	beq.n	80077c6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	e012      	b.n	80077b2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	7819      	ldrb	r1, [r3, #0]
 8007794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	3334      	adds	r3, #52	@ 0x34
 800779c:	460a      	mov	r2, r1
 800779e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d006      	beq.n	80077ba <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	3301      	adds	r3, #1
 80077b0:	61fb      	str	r3, [r7, #28]
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	2b0f      	cmp	r3, #15
 80077b6:	d9e9      	bls.n	800778c <prvInitialiseNewTask+0x66>
 80077b8:	e000      	b.n	80077bc <prvInitialiseNewTask+0x96>
			{
				break;
 80077ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077c4:	e003      	b.n	80077ce <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d0:	2b37      	cmp	r3, #55	@ 0x37
 80077d2:	d901      	bls.n	80077d8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077d4:	2337      	movs	r3, #55	@ 0x37
 80077d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077e2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	2200      	movs	r2, #0
 80077e8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	3304      	adds	r3, #4
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fd7c 	bl	80062ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	3318      	adds	r3, #24
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe fd77 	bl	80062ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007802:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007806:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007812:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	2200      	movs	r2, #0
 8007818:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	69b8      	ldr	r0, [r7, #24]
 8007828:	f001 fa4e 	bl	8008cc8 <pxPortInitialiseStack>
 800782c:	4602      	mov	r2, r0
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800783e:	bf00      	nop
 8007840:	3720      	adds	r7, #32
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007850:	f001 fb6a 	bl	8008f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007854:	4b2d      	ldr	r3, [pc, #180]	@ (800790c <prvAddNewTaskToReadyList+0xc4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	4a2c      	ldr	r2, [pc, #176]	@ (800790c <prvAddNewTaskToReadyList+0xc4>)
 800785c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800785e:	4b2c      	ldr	r3, [pc, #176]	@ (8007910 <prvAddNewTaskToReadyList+0xc8>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007866:	4a2a      	ldr	r2, [pc, #168]	@ (8007910 <prvAddNewTaskToReadyList+0xc8>)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800786c:	4b27      	ldr	r3, [pc, #156]	@ (800790c <prvAddNewTaskToReadyList+0xc4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d110      	bne.n	8007896 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007874:	f000 fc1e 	bl	80080b4 <prvInitialiseTaskLists>
 8007878:	e00d      	b.n	8007896 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800787a:	4b26      	ldr	r3, [pc, #152]	@ (8007914 <prvAddNewTaskToReadyList+0xcc>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007882:	4b23      	ldr	r3, [pc, #140]	@ (8007910 <prvAddNewTaskToReadyList+0xc8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788c:	429a      	cmp	r2, r3
 800788e:	d802      	bhi.n	8007896 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007890:	4a1f      	ldr	r2, [pc, #124]	@ (8007910 <prvAddNewTaskToReadyList+0xc8>)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007896:	4b20      	ldr	r3, [pc, #128]	@ (8007918 <prvAddNewTaskToReadyList+0xd0>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	4a1e      	ldr	r2, [pc, #120]	@ (8007918 <prvAddNewTaskToReadyList+0xd0>)
 800789e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007918 <prvAddNewTaskToReadyList+0xd0>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ac:	4b1b      	ldr	r3, [pc, #108]	@ (800791c <prvAddNewTaskToReadyList+0xd4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d903      	bls.n	80078bc <prvAddNewTaskToReadyList+0x74>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b8:	4a18      	ldr	r2, [pc, #96]	@ (800791c <prvAddNewTaskToReadyList+0xd4>)
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4a15      	ldr	r2, [pc, #84]	@ (8007920 <prvAddNewTaskToReadyList+0xd8>)
 80078ca:	441a      	add	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4619      	mov	r1, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	f7fe fd17 	bl	8006306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078d8:	f001 fb58 	bl	8008f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <prvAddNewTaskToReadyList+0xcc>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00e      	beq.n	8007902 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <prvAddNewTaskToReadyList+0xc8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d207      	bcs.n	8007902 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007924 <prvAddNewTaskToReadyList+0xdc>)
 80078f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007902:	bf00      	nop
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000da4 	.word	0x20000da4
 8007910:	200008d0 	.word	0x200008d0
 8007914:	20000db0 	.word	0x20000db0
 8007918:	20000dc0 	.word	0x20000dc0
 800791c:	20000dac 	.word	0x20000dac
 8007920:	200008d4 	.word	0x200008d4
 8007924:	e000ed04 	.word	0xe000ed04

08007928 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d018      	beq.n	800796c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800793a:	4b14      	ldr	r3, [pc, #80]	@ (800798c <vTaskDelay+0x64>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <vTaskDelay+0x32>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60bb      	str	r3, [r7, #8]
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop
 8007958:	e7fd      	b.n	8007956 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800795a:	f000 f883 	bl	8007a64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800795e:	2100      	movs	r1, #0
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fe03 	bl	800856c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007966:	f000 f88b 	bl	8007a80 <xTaskResumeAll>
 800796a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d107      	bne.n	8007982 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007972:	4b07      	ldr	r3, [pc, #28]	@ (8007990 <vTaskDelay+0x68>)
 8007974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007982:	bf00      	nop
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000dcc 	.word	0x20000dcc
 8007990:	e000ed04 	.word	0xe000ed04

08007994 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	@ 0x28
 8007998:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800799e:	2300      	movs	r3, #0
 80079a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079a2:	463a      	mov	r2, r7
 80079a4:	1d39      	adds	r1, r7, #4
 80079a6:	f107 0308 	add.w	r3, r7, #8
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe fc4a 	bl	8006244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	9202      	str	r2, [sp, #8]
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	2300      	movs	r3, #0
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	2300      	movs	r3, #0
 80079c0:	460a      	mov	r2, r1
 80079c2:	4922      	ldr	r1, [pc, #136]	@ (8007a4c <vTaskStartScheduler+0xb8>)
 80079c4:	4822      	ldr	r0, [pc, #136]	@ (8007a50 <vTaskStartScheduler+0xbc>)
 80079c6:	f7ff fe09 	bl	80075dc <xTaskCreateStatic>
 80079ca:	4603      	mov	r3, r0
 80079cc:	4a21      	ldr	r2, [pc, #132]	@ (8007a54 <vTaskStartScheduler+0xc0>)
 80079ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079d0:	4b20      	ldr	r3, [pc, #128]	@ (8007a54 <vTaskStartScheduler+0xc0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079d8:	2301      	movs	r3, #1
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	e001      	b.n	80079e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d102      	bne.n	80079ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80079e8:	f000 fe14 	bl	8008614 <xTimerCreateTimerTask>
 80079ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d116      	bne.n	8007a22 <vTaskStartScheduler+0x8e>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	613b      	str	r3, [r7, #16]
}
 8007a06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a08:	4b13      	ldr	r3, [pc, #76]	@ (8007a58 <vTaskStartScheduler+0xc4>)
 8007a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a10:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <vTaskStartScheduler+0xc8>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a16:	4b12      	ldr	r3, [pc, #72]	@ (8007a60 <vTaskStartScheduler+0xcc>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a1c:	f001 f9e0 	bl	8008de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a20:	e00f      	b.n	8007a42 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d10b      	bne.n	8007a42 <vTaskStartScheduler+0xae>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	60fb      	str	r3, [r7, #12]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <vTaskStartScheduler+0xaa>
}
 8007a42:	bf00      	nop
 8007a44:	3718      	adds	r7, #24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	0800a55c 	.word	0x0800a55c
 8007a50:	08008085 	.word	0x08008085
 8007a54:	20000dc8 	.word	0x20000dc8
 8007a58:	20000dc4 	.word	0x20000dc4
 8007a5c:	20000db0 	.word	0x20000db0
 8007a60:	20000da8 	.word	0x20000da8

08007a64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a68:	4b04      	ldr	r3, [pc, #16]	@ (8007a7c <vTaskSuspendAll+0x18>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	4a03      	ldr	r2, [pc, #12]	@ (8007a7c <vTaskSuspendAll+0x18>)
 8007a70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a72:	bf00      	nop
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	20000dcc 	.word	0x20000dcc

08007a80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a8e:	4b42      	ldr	r3, [pc, #264]	@ (8007b98 <xTaskResumeAll+0x118>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <xTaskResumeAll+0x2e>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	603b      	str	r3, [r7, #0]
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	e7fd      	b.n	8007aaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007aae:	f001 fa3b 	bl	8008f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ab2:	4b39      	ldr	r3, [pc, #228]	@ (8007b98 <xTaskResumeAll+0x118>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	4a37      	ldr	r2, [pc, #220]	@ (8007b98 <xTaskResumeAll+0x118>)
 8007aba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007abc:	4b36      	ldr	r3, [pc, #216]	@ (8007b98 <xTaskResumeAll+0x118>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d162      	bne.n	8007b8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ac4:	4b35      	ldr	r3, [pc, #212]	@ (8007b9c <xTaskResumeAll+0x11c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d05e      	beq.n	8007b8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007acc:	e02f      	b.n	8007b2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ace:	4b34      	ldr	r3, [pc, #208]	@ (8007ba0 <xTaskResumeAll+0x120>)
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3318      	adds	r3, #24
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fc70 	bl	80063c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe fc6b 	bl	80063c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aee:	4b2d      	ldr	r3, [pc, #180]	@ (8007ba4 <xTaskResumeAll+0x124>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d903      	bls.n	8007afe <xTaskResumeAll+0x7e>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afa:	4a2a      	ldr	r2, [pc, #168]	@ (8007ba4 <xTaskResumeAll+0x124>)
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4a27      	ldr	r2, [pc, #156]	@ (8007ba8 <xTaskResumeAll+0x128>)
 8007b0c:	441a      	add	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f7fe fbf6 	bl	8006306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	4b23      	ldr	r3, [pc, #140]	@ (8007bac <xTaskResumeAll+0x12c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d302      	bcc.n	8007b2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007b28:	4b21      	ldr	r3, [pc, #132]	@ (8007bb0 <xTaskResumeAll+0x130>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba0 <xTaskResumeAll+0x120>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1cb      	bne.n	8007ace <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b3c:	f000 fb58 	bl	80081f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b40:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb4 <xTaskResumeAll+0x134>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d010      	beq.n	8007b6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b4c:	f000 f846 	bl	8007bdc <xTaskIncrementTick>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007b56:	4b16      	ldr	r3, [pc, #88]	@ (8007bb0 <xTaskResumeAll+0x130>)
 8007b58:	2201      	movs	r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1f1      	bne.n	8007b4c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007b68:	4b12      	ldr	r3, [pc, #72]	@ (8007bb4 <xTaskResumeAll+0x134>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b6e:	4b10      	ldr	r3, [pc, #64]	@ (8007bb0 <xTaskResumeAll+0x130>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b76:	2301      	movs	r3, #1
 8007b78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb8 <xTaskResumeAll+0x138>)
 8007b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b8a:	f001 f9ff 	bl	8008f8c <vPortExitCritical>

	return xAlreadyYielded;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000dcc 	.word	0x20000dcc
 8007b9c:	20000da4 	.word	0x20000da4
 8007ba0:	20000d64 	.word	0x20000d64
 8007ba4:	20000dac 	.word	0x20000dac
 8007ba8:	200008d4 	.word	0x200008d4
 8007bac:	200008d0 	.word	0x200008d0
 8007bb0:	20000db8 	.word	0x20000db8
 8007bb4:	20000db4 	.word	0x20000db4
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007bc2:	4b05      	ldr	r3, [pc, #20]	@ (8007bd8 <xTaskGetTickCount+0x1c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007bc8:	687b      	ldr	r3, [r7, #4]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000da8 	.word	0x20000da8

08007bdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007be6:	4b4f      	ldr	r3, [pc, #316]	@ (8007d24 <xTaskIncrementTick+0x148>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f040 8090 	bne.w	8007d10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8007d28 <xTaskIncrementTick+0x14c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8007d28 <xTaskIncrementTick+0x14c>)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d121      	bne.n	8007c48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c04:	4b49      	ldr	r3, [pc, #292]	@ (8007d2c <xTaskIncrementTick+0x150>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00b      	beq.n	8007c26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	603b      	str	r3, [r7, #0]
}
 8007c20:	bf00      	nop
 8007c22:	bf00      	nop
 8007c24:	e7fd      	b.n	8007c22 <xTaskIncrementTick+0x46>
 8007c26:	4b41      	ldr	r3, [pc, #260]	@ (8007d2c <xTaskIncrementTick+0x150>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	4b40      	ldr	r3, [pc, #256]	@ (8007d30 <xTaskIncrementTick+0x154>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a3e      	ldr	r2, [pc, #248]	@ (8007d2c <xTaskIncrementTick+0x150>)
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	4a3e      	ldr	r2, [pc, #248]	@ (8007d30 <xTaskIncrementTick+0x154>)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8007d34 <xTaskIncrementTick+0x158>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	4a3c      	ldr	r2, [pc, #240]	@ (8007d34 <xTaskIncrementTick+0x158>)
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	f000 fad4 	bl	80081f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c48:	4b3b      	ldr	r3, [pc, #236]	@ (8007d38 <xTaskIncrementTick+0x15c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d349      	bcc.n	8007ce6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c52:	4b36      	ldr	r3, [pc, #216]	@ (8007d2c <xTaskIncrementTick+0x150>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c5c:	4b36      	ldr	r3, [pc, #216]	@ (8007d38 <xTaskIncrementTick+0x15c>)
 8007c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c62:	601a      	str	r2, [r3, #0]
					break;
 8007c64:	e03f      	b.n	8007ce6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c66:	4b31      	ldr	r3, [pc, #196]	@ (8007d2c <xTaskIncrementTick+0x150>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d203      	bcs.n	8007c86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8007d38 <xTaskIncrementTick+0x15c>)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c84:	e02f      	b.n	8007ce6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fb98 	bl	80063c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	3318      	adds	r3, #24
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe fb8f 	bl	80063c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca6:	4b25      	ldr	r3, [pc, #148]	@ (8007d3c <xTaskIncrementTick+0x160>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d903      	bls.n	8007cb6 <xTaskIncrementTick+0xda>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	4a22      	ldr	r2, [pc, #136]	@ (8007d3c <xTaskIncrementTick+0x160>)
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d40 <xTaskIncrementTick+0x164>)
 8007cc4:	441a      	add	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4610      	mov	r0, r2
 8007cce:	f7fe fb1a 	bl	8006306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d44 <xTaskIncrementTick+0x168>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d3b8      	bcc.n	8007c52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ce4:	e7b5      	b.n	8007c52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ce6:	4b17      	ldr	r3, [pc, #92]	@ (8007d44 <xTaskIncrementTick+0x168>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cec:	4914      	ldr	r1, [pc, #80]	@ (8007d40 <xTaskIncrementTick+0x164>)
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d901      	bls.n	8007d02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d02:	4b11      	ldr	r3, [pc, #68]	@ (8007d48 <xTaskIncrementTick+0x16c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d007      	beq.n	8007d1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	e004      	b.n	8007d1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d10:	4b0e      	ldr	r3, [pc, #56]	@ (8007d4c <xTaskIncrementTick+0x170>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3301      	adds	r3, #1
 8007d16:	4a0d      	ldr	r2, [pc, #52]	@ (8007d4c <xTaskIncrementTick+0x170>)
 8007d18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d1a:	697b      	ldr	r3, [r7, #20]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000dcc 	.word	0x20000dcc
 8007d28:	20000da8 	.word	0x20000da8
 8007d2c:	20000d5c 	.word	0x20000d5c
 8007d30:	20000d60 	.word	0x20000d60
 8007d34:	20000dbc 	.word	0x20000dbc
 8007d38:	20000dc4 	.word	0x20000dc4
 8007d3c:	20000dac 	.word	0x20000dac
 8007d40:	200008d4 	.word	0x200008d4
 8007d44:	200008d0 	.word	0x200008d0
 8007d48:	20000db8 	.word	0x20000db8
 8007d4c:	20000db4 	.word	0x20000db4

08007d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d56:	4b28      	ldr	r3, [pc, #160]	@ (8007df8 <vTaskSwitchContext+0xa8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d5e:	4b27      	ldr	r3, [pc, #156]	@ (8007dfc <vTaskSwitchContext+0xac>)
 8007d60:	2201      	movs	r2, #1
 8007d62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d64:	e042      	b.n	8007dec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007d66:	4b25      	ldr	r3, [pc, #148]	@ (8007dfc <vTaskSwitchContext+0xac>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d6c:	4b24      	ldr	r3, [pc, #144]	@ (8007e00 <vTaskSwitchContext+0xb0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e011      	b.n	8007d98 <vTaskSwitchContext+0x48>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10b      	bne.n	8007d92 <vTaskSwitchContext+0x42>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	607b      	str	r3, [r7, #4]
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	e7fd      	b.n	8007d8e <vTaskSwitchContext+0x3e>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	491a      	ldr	r1, [pc, #104]	@ (8007e04 <vTaskSwitchContext+0xb4>)
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0e3      	beq.n	8007d74 <vTaskSwitchContext+0x24>
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4a13      	ldr	r2, [pc, #76]	@ (8007e04 <vTaskSwitchContext+0xb4>)
 8007db8:	4413      	add	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	605a      	str	r2, [r3, #4]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	3308      	adds	r3, #8
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d104      	bne.n	8007ddc <vTaskSwitchContext+0x8c>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	605a      	str	r2, [r3, #4]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	4a09      	ldr	r2, [pc, #36]	@ (8007e08 <vTaskSwitchContext+0xb8>)
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	4a06      	ldr	r2, [pc, #24]	@ (8007e00 <vTaskSwitchContext+0xb0>)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6013      	str	r3, [r2, #0]
}
 8007dec:	bf00      	nop
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	20000dcc 	.word	0x20000dcc
 8007dfc:	20000db8 	.word	0x20000db8
 8007e00:	20000dac 	.word	0x20000dac
 8007e04:	200008d4 	.word	0x200008d4
 8007e08:	200008d0 	.word	0x200008d0

08007e0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10b      	bne.n	8007e34 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60fb      	str	r3, [r7, #12]
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	e7fd      	b.n	8007e30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e34:	4b07      	ldr	r3, [pc, #28]	@ (8007e54 <vTaskPlaceOnEventList+0x48>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3318      	adds	r3, #24
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fe fa86 	bl	800634e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e42:	2101      	movs	r1, #1
 8007e44:	6838      	ldr	r0, [r7, #0]
 8007e46:	f000 fb91 	bl	800856c <prvAddCurrentTaskToDelayedList>
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	200008d0 	.word	0x200008d0

08007e58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	617b      	str	r3, [r7, #20]
}
 8007e7c:	bf00      	nop
 8007e7e:	bf00      	nop
 8007e80:	e7fd      	b.n	8007e7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e82:	4b0a      	ldr	r3, [pc, #40]	@ (8007eac <vTaskPlaceOnEventListRestricted+0x54>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3318      	adds	r3, #24
 8007e88:	4619      	mov	r1, r3
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7fe fa3b 	bl	8006306 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007e96:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	68b8      	ldr	r0, [r7, #8]
 8007ea0:	f000 fb64 	bl	800856c <prvAddCurrentTaskToDelayedList>
	}
 8007ea4:	bf00      	nop
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	200008d0 	.word	0x200008d0

08007eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10b      	bne.n	8007ede <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	60fb      	str	r3, [r7, #12]
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	e7fd      	b.n	8007eda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	3318      	adds	r3, #24
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe fa6c 	bl	80063c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8007f60 <xTaskRemoveFromEventList+0xb0>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d11d      	bne.n	8007f2c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fa63 	bl	80063c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007efe:	4b19      	ldr	r3, [pc, #100]	@ (8007f64 <xTaskRemoveFromEventList+0xb4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d903      	bls.n	8007f0e <xTaskRemoveFromEventList+0x5e>
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0a:	4a16      	ldr	r2, [pc, #88]	@ (8007f64 <xTaskRemoveFromEventList+0xb4>)
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4a13      	ldr	r2, [pc, #76]	@ (8007f68 <xTaskRemoveFromEventList+0xb8>)
 8007f1c:	441a      	add	r2, r3
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	3304      	adds	r3, #4
 8007f22:	4619      	mov	r1, r3
 8007f24:	4610      	mov	r0, r2
 8007f26:	f7fe f9ee 	bl	8006306 <vListInsertEnd>
 8007f2a:	e005      	b.n	8007f38 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	3318      	adds	r3, #24
 8007f30:	4619      	mov	r1, r3
 8007f32:	480e      	ldr	r0, [pc, #56]	@ (8007f6c <xTaskRemoveFromEventList+0xbc>)
 8007f34:	f7fe f9e7 	bl	8006306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f70 <xTaskRemoveFromEventList+0xc0>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d905      	bls.n	8007f52 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f46:	2301      	movs	r3, #1
 8007f48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f74 <xTaskRemoveFromEventList+0xc4>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	e001      	b.n	8007f56 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007f52:	2300      	movs	r3, #0
 8007f54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f56:	697b      	ldr	r3, [r7, #20]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000dcc 	.word	0x20000dcc
 8007f64:	20000dac 	.word	0x20000dac
 8007f68:	200008d4 	.word	0x200008d4
 8007f6c:	20000d64 	.word	0x20000d64
 8007f70:	200008d0 	.word	0x200008d0
 8007f74:	20000db8 	.word	0x20000db8

08007f78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f80:	4b06      	ldr	r3, [pc, #24]	@ (8007f9c <vTaskInternalSetTimeOutState+0x24>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f88:	4b05      	ldr	r3, [pc, #20]	@ (8007fa0 <vTaskInternalSetTimeOutState+0x28>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	605a      	str	r2, [r3, #4]
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	20000dbc 	.word	0x20000dbc
 8007fa0:	20000da8 	.word	0x20000da8

08007fa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10b      	bne.n	8007fcc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	613b      	str	r3, [r7, #16]
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	e7fd      	b.n	8007fc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10b      	bne.n	8007fea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60fb      	str	r3, [r7, #12]
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	e7fd      	b.n	8007fe6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007fea:	f000 ff9d 	bl	8008f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007fee:	4b1d      	ldr	r3, [pc, #116]	@ (8008064 <xTaskCheckForTimeOut+0xc0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008006:	d102      	bne.n	800800e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008008:	2300      	movs	r3, #0
 800800a:	61fb      	str	r3, [r7, #28]
 800800c:	e023      	b.n	8008056 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	4b15      	ldr	r3, [pc, #84]	@ (8008068 <xTaskCheckForTimeOut+0xc4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d007      	beq.n	800802a <xTaskCheckForTimeOut+0x86>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	429a      	cmp	r2, r3
 8008022:	d302      	bcc.n	800802a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008024:	2301      	movs	r3, #1
 8008026:	61fb      	str	r3, [r7, #28]
 8008028:	e015      	b.n	8008056 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	429a      	cmp	r2, r3
 8008032:	d20b      	bcs.n	800804c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	1ad2      	subs	r2, r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff ff99 	bl	8007f78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008046:	2300      	movs	r3, #0
 8008048:	61fb      	str	r3, [r7, #28]
 800804a:	e004      	b.n	8008056 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008052:	2301      	movs	r3, #1
 8008054:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008056:	f000 ff99 	bl	8008f8c <vPortExitCritical>

	return xReturn;
 800805a:	69fb      	ldr	r3, [r7, #28]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3720      	adds	r7, #32
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20000da8 	.word	0x20000da8
 8008068:	20000dbc 	.word	0x20000dbc

0800806c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008070:	4b03      	ldr	r3, [pc, #12]	@ (8008080 <vTaskMissedYield+0x14>)
 8008072:	2201      	movs	r2, #1
 8008074:	601a      	str	r2, [r3, #0]
}
 8008076:	bf00      	nop
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	20000db8 	.word	0x20000db8

08008084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800808c:	f000 f852 	bl	8008134 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008090:	4b06      	ldr	r3, [pc, #24]	@ (80080ac <prvIdleTask+0x28>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d9f9      	bls.n	800808c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008098:	4b05      	ldr	r3, [pc, #20]	@ (80080b0 <prvIdleTask+0x2c>)
 800809a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080a8:	e7f0      	b.n	800808c <prvIdleTask+0x8>
 80080aa:	bf00      	nop
 80080ac:	200008d4 	.word	0x200008d4
 80080b0:	e000ed04 	.word	0xe000ed04

080080b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080ba:	2300      	movs	r3, #0
 80080bc:	607b      	str	r3, [r7, #4]
 80080be:	e00c      	b.n	80080da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4a12      	ldr	r2, [pc, #72]	@ (8008114 <prvInitialiseTaskLists+0x60>)
 80080cc:	4413      	add	r3, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe f8ec 	bl	80062ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3301      	adds	r3, #1
 80080d8:	607b      	str	r3, [r7, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b37      	cmp	r3, #55	@ 0x37
 80080de:	d9ef      	bls.n	80080c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080e0:	480d      	ldr	r0, [pc, #52]	@ (8008118 <prvInitialiseTaskLists+0x64>)
 80080e2:	f7fe f8e3 	bl	80062ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080e6:	480d      	ldr	r0, [pc, #52]	@ (800811c <prvInitialiseTaskLists+0x68>)
 80080e8:	f7fe f8e0 	bl	80062ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080ec:	480c      	ldr	r0, [pc, #48]	@ (8008120 <prvInitialiseTaskLists+0x6c>)
 80080ee:	f7fe f8dd 	bl	80062ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080f2:	480c      	ldr	r0, [pc, #48]	@ (8008124 <prvInitialiseTaskLists+0x70>)
 80080f4:	f7fe f8da 	bl	80062ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080f8:	480b      	ldr	r0, [pc, #44]	@ (8008128 <prvInitialiseTaskLists+0x74>)
 80080fa:	f7fe f8d7 	bl	80062ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080fe:	4b0b      	ldr	r3, [pc, #44]	@ (800812c <prvInitialiseTaskLists+0x78>)
 8008100:	4a05      	ldr	r2, [pc, #20]	@ (8008118 <prvInitialiseTaskLists+0x64>)
 8008102:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008104:	4b0a      	ldr	r3, [pc, #40]	@ (8008130 <prvInitialiseTaskLists+0x7c>)
 8008106:	4a05      	ldr	r2, [pc, #20]	@ (800811c <prvInitialiseTaskLists+0x68>)
 8008108:	601a      	str	r2, [r3, #0]
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	200008d4 	.word	0x200008d4
 8008118:	20000d34 	.word	0x20000d34
 800811c:	20000d48 	.word	0x20000d48
 8008120:	20000d64 	.word	0x20000d64
 8008124:	20000d78 	.word	0x20000d78
 8008128:	20000d90 	.word	0x20000d90
 800812c:	20000d5c 	.word	0x20000d5c
 8008130:	20000d60 	.word	0x20000d60

08008134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800813a:	e019      	b.n	8008170 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800813c:	f000 fef4 	bl	8008f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008140:	4b10      	ldr	r3, [pc, #64]	@ (8008184 <prvCheckTasksWaitingTermination+0x50>)
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3304      	adds	r3, #4
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe f937 	bl	80063c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008152:	4b0d      	ldr	r3, [pc, #52]	@ (8008188 <prvCheckTasksWaitingTermination+0x54>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3b01      	subs	r3, #1
 8008158:	4a0b      	ldr	r2, [pc, #44]	@ (8008188 <prvCheckTasksWaitingTermination+0x54>)
 800815a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800815c:	4b0b      	ldr	r3, [pc, #44]	@ (800818c <prvCheckTasksWaitingTermination+0x58>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3b01      	subs	r3, #1
 8008162:	4a0a      	ldr	r2, [pc, #40]	@ (800818c <prvCheckTasksWaitingTermination+0x58>)
 8008164:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008166:	f000 ff11 	bl	8008f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f810 	bl	8008190 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008170:	4b06      	ldr	r3, [pc, #24]	@ (800818c <prvCheckTasksWaitingTermination+0x58>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e1      	bne.n	800813c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000d78 	.word	0x20000d78
 8008188:	20000da4 	.word	0x20000da4
 800818c:	20000d8c 	.word	0x20000d8c

08008190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d108      	bne.n	80081b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 f8ae 	bl	8009308 <vPortFree>
				vPortFree( pxTCB );
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 f8ab 	bl	8009308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081b2:	e019      	b.n	80081e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d103      	bne.n	80081c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 f8a2 	bl	8009308 <vPortFree>
	}
 80081c4:	e010      	b.n	80081e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d00b      	beq.n	80081e8 <prvDeleteTCB+0x58>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	60fb      	str	r3, [r7, #12]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <prvDeleteTCB+0x54>
	}
 80081e8:	bf00      	nop
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008228 <prvResetNextTaskUnblockTime+0x38>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008200:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <prvResetNextTaskUnblockTime+0x3c>)
 8008202:	f04f 32ff 	mov.w	r2, #4294967295
 8008206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008208:	e008      	b.n	800821c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800820a:	4b07      	ldr	r3, [pc, #28]	@ (8008228 <prvResetNextTaskUnblockTime+0x38>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4a04      	ldr	r2, [pc, #16]	@ (800822c <prvResetNextTaskUnblockTime+0x3c>)
 800821a:	6013      	str	r3, [r2, #0]
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	20000d5c 	.word	0x20000d5c
 800822c:	20000dc4 	.word	0x20000dc4

08008230 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008236:	4b05      	ldr	r3, [pc, #20]	@ (800824c <xTaskGetCurrentTaskHandle+0x1c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800823c:	687b      	ldr	r3, [r7, #4]
	}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	200008d0 	.word	0x200008d0

08008250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008256:	4b0b      	ldr	r3, [pc, #44]	@ (8008284 <xTaskGetSchedulerState+0x34>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800825e:	2301      	movs	r3, #1
 8008260:	607b      	str	r3, [r7, #4]
 8008262:	e008      	b.n	8008276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008264:	4b08      	ldr	r3, [pc, #32]	@ (8008288 <xTaskGetSchedulerState+0x38>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800826c:	2302      	movs	r3, #2
 800826e:	607b      	str	r3, [r7, #4]
 8008270:	e001      	b.n	8008276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008272:	2300      	movs	r3, #0
 8008274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008276:	687b      	ldr	r3, [r7, #4]
	}
 8008278:	4618      	mov	r0, r3
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	20000db0 	.word	0x20000db0
 8008288:	20000dcc 	.word	0x20000dcc

0800828c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d051      	beq.n	8008346 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a6:	4b2a      	ldr	r3, [pc, #168]	@ (8008350 <xTaskPriorityInherit+0xc4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d241      	bcs.n	8008334 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	db06      	blt.n	80082c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b8:	4b25      	ldr	r3, [pc, #148]	@ (8008350 <xTaskPriorityInherit+0xc4>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6959      	ldr	r1, [r3, #20]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008354 <xTaskPriorityInherit+0xc8>)
 80082d8:	4413      	add	r3, r2
 80082da:	4299      	cmp	r1, r3
 80082dc:	d122      	bne.n	8008324 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	3304      	adds	r3, #4
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe f86c 	bl	80063c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80082e8:	4b19      	ldr	r3, [pc, #100]	@ (8008350 <xTaskPriorityInherit+0xc4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082f6:	4b18      	ldr	r3, [pc, #96]	@ (8008358 <xTaskPriorityInherit+0xcc>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d903      	bls.n	8008306 <xTaskPriorityInherit+0x7a>
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008302:	4a15      	ldr	r2, [pc, #84]	@ (8008358 <xTaskPriorityInherit+0xcc>)
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4a10      	ldr	r2, [pc, #64]	@ (8008354 <xTaskPriorityInherit+0xc8>)
 8008314:	441a      	add	r2, r3
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	3304      	adds	r3, #4
 800831a:	4619      	mov	r1, r3
 800831c:	4610      	mov	r0, r2
 800831e:	f7fd fff2 	bl	8006306 <vListInsertEnd>
 8008322:	e004      	b.n	800832e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008324:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <xTaskPriorityInherit+0xc4>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	e008      	b.n	8008346 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008338:	4b05      	ldr	r3, [pc, #20]	@ (8008350 <xTaskPriorityInherit+0xc4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833e:	429a      	cmp	r2, r3
 8008340:	d201      	bcs.n	8008346 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008342:	2301      	movs	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008346:	68fb      	ldr	r3, [r7, #12]
	}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	200008d0 	.word	0x200008d0
 8008354:	200008d4 	.word	0x200008d4
 8008358:	20000dac 	.word	0x20000dac

0800835c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d058      	beq.n	8008424 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008372:	4b2f      	ldr	r3, [pc, #188]	@ (8008430 <xTaskPriorityDisinherit+0xd4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	429a      	cmp	r2, r3
 800837a:	d00b      	beq.n	8008394 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	60fb      	str	r3, [r7, #12]
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10b      	bne.n	80083b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	60bb      	str	r3, [r7, #8]
}
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	e7fd      	b.n	80083b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b8:	1e5a      	subs	r2, r3, #1
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d02c      	beq.n	8008424 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d128      	bne.n	8008424 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	3304      	adds	r3, #4
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fd fff2 	bl	80063c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008434 <xTaskPriorityDisinherit+0xd8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d903      	bls.n	8008404 <xTaskPriorityDisinherit+0xa8>
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008400:	4a0c      	ldr	r2, [pc, #48]	@ (8008434 <xTaskPriorityDisinherit+0xd8>)
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4a09      	ldr	r2, [pc, #36]	@ (8008438 <xTaskPriorityDisinherit+0xdc>)
 8008412:	441a      	add	r2, r3
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f7fd ff73 	bl	8006306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008420:	2301      	movs	r3, #1
 8008422:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008424:	697b      	ldr	r3, [r7, #20]
	}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200008d0 	.word	0x200008d0
 8008434:	20000dac 	.word	0x20000dac
 8008438:	200008d4 	.word	0x200008d4

0800843c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800844a:	2301      	movs	r3, #1
 800844c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d06c      	beq.n	800852e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10b      	bne.n	8008474 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60fb      	str	r3, [r7, #12]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d902      	bls.n	8008484 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	e002      	b.n	800848a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008488:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	429a      	cmp	r2, r3
 8008492:	d04c      	beq.n	800852e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	429a      	cmp	r2, r3
 800849c:	d147      	bne.n	800852e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800849e:	4b26      	ldr	r3, [pc, #152]	@ (8008538 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d10b      	bne.n	80084c0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	60bb      	str	r3, [r7, #8]
}
 80084ba:	bf00      	nop
 80084bc:	bf00      	nop
 80084be:	e7fd      	b.n	80084bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	69fa      	ldr	r2, [r7, #28]
 80084ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	db04      	blt.n	80084de <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	6959      	ldr	r1, [r3, #20]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4a13      	ldr	r2, [pc, #76]	@ (800853c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80084ee:	4413      	add	r3, r2
 80084f0:	4299      	cmp	r1, r3
 80084f2:	d11c      	bne.n	800852e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	3304      	adds	r3, #4
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fd ff61 	bl	80063c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008502:	4b0f      	ldr	r3, [pc, #60]	@ (8008540 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	d903      	bls.n	8008512 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850e:	4a0c      	ldr	r2, [pc, #48]	@ (8008540 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4a07      	ldr	r2, [pc, #28]	@ (800853c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008520:	441a      	add	r2, r3
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	3304      	adds	r3, #4
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7fd feec 	bl	8006306 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800852e:	bf00      	nop
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	200008d0 	.word	0x200008d0
 800853c:	200008d4 	.word	0x200008d4
 8008540:	20000dac 	.word	0x20000dac

08008544 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008548:	4b07      	ldr	r3, [pc, #28]	@ (8008568 <pvTaskIncrementMutexHeldCount+0x24>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008550:	4b05      	ldr	r3, [pc, #20]	@ (8008568 <pvTaskIncrementMutexHeldCount+0x24>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008556:	3201      	adds	r2, #1
 8008558:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800855a:	4b03      	ldr	r3, [pc, #12]	@ (8008568 <pvTaskIncrementMutexHeldCount+0x24>)
 800855c:	681b      	ldr	r3, [r3, #0]
	}
 800855e:	4618      	mov	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	200008d0 	.word	0x200008d0

0800856c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008576:	4b21      	ldr	r3, [pc, #132]	@ (80085fc <prvAddCurrentTaskToDelayedList+0x90>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800857c:	4b20      	ldr	r3, [pc, #128]	@ (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3304      	adds	r3, #4
 8008582:	4618      	mov	r0, r3
 8008584:	f7fd ff1c 	bl	80063c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d10a      	bne.n	80085a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d007      	beq.n	80085a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008596:	4b1a      	ldr	r3, [pc, #104]	@ (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4819      	ldr	r0, [pc, #100]	@ (8008604 <prvAddCurrentTaskToDelayedList+0x98>)
 80085a0:	f7fd feb1 	bl	8006306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085a4:	e026      	b.n	80085f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4413      	add	r3, r2
 80085ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085ae:	4b14      	ldr	r3, [pc, #80]	@ (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d209      	bcs.n	80085d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085be:	4b12      	ldr	r3, [pc, #72]	@ (8008608 <prvAddCurrentTaskToDelayedList+0x9c>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f7fd febf 	bl	800634e <vListInsert>
}
 80085d0:	e010      	b.n	80085f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d2:	4b0e      	ldr	r3, [pc, #56]	@ (800860c <prvAddCurrentTaskToDelayedList+0xa0>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008600 <prvAddCurrentTaskToDelayedList+0x94>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f7fd feb5 	bl	800634e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d202      	bcs.n	80085f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085ee:	4a08      	ldr	r2, [pc, #32]	@ (8008610 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6013      	str	r3, [r2, #0]
}
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20000da8 	.word	0x20000da8
 8008600:	200008d0 	.word	0x200008d0
 8008604:	20000d90 	.word	0x20000d90
 8008608:	20000d60 	.word	0x20000d60
 800860c:	20000d5c 	.word	0x20000d5c
 8008610:	20000dc4 	.word	0x20000dc4

08008614 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08a      	sub	sp, #40	@ 0x28
 8008618:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800861e:	f000 fb13 	bl	8008c48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008622:	4b1d      	ldr	r3, [pc, #116]	@ (8008698 <xTimerCreateTimerTask+0x84>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d021      	beq.n	800866e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008632:	1d3a      	adds	r2, r7, #4
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	f107 030c 	add.w	r3, r7, #12
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fe1b 	bl	8006278 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	9202      	str	r2, [sp, #8]
 800864a:	9301      	str	r3, [sp, #4]
 800864c:	2302      	movs	r3, #2
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	460a      	mov	r2, r1
 8008654:	4911      	ldr	r1, [pc, #68]	@ (800869c <xTimerCreateTimerTask+0x88>)
 8008656:	4812      	ldr	r0, [pc, #72]	@ (80086a0 <xTimerCreateTimerTask+0x8c>)
 8008658:	f7fe ffc0 	bl	80075dc <xTaskCreateStatic>
 800865c:	4603      	mov	r3, r0
 800865e:	4a11      	ldr	r2, [pc, #68]	@ (80086a4 <xTimerCreateTimerTask+0x90>)
 8008660:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008662:	4b10      	ldr	r3, [pc, #64]	@ (80086a4 <xTimerCreateTimerTask+0x90>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800866a:	2301      	movs	r3, #1
 800866c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	613b      	str	r3, [r7, #16]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800868c:	697b      	ldr	r3, [r7, #20]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000e00 	.word	0x20000e00
 800869c:	0800a564 	.word	0x0800a564
 80086a0:	080087e1 	.word	0x080087e1
 80086a4:	20000e04 	.word	0x20000e04

080086a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08a      	sub	sp, #40	@ 0x28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10b      	bne.n	80086d8 <xTimerGenericCommand+0x30>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	623b      	str	r3, [r7, #32]
}
 80086d2:	bf00      	nop
 80086d4:	bf00      	nop
 80086d6:	e7fd      	b.n	80086d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086d8:	4b19      	ldr	r3, [pc, #100]	@ (8008740 <xTimerGenericCommand+0x98>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d02a      	beq.n	8008736 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	dc18      	bgt.n	8008724 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086f2:	f7ff fdad 	bl	8008250 <xTaskGetSchedulerState>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d109      	bne.n	8008710 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086fc:	4b10      	ldr	r3, [pc, #64]	@ (8008740 <xTimerGenericCommand+0x98>)
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	f107 0110 	add.w	r1, r7, #16
 8008704:	2300      	movs	r3, #0
 8008706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008708:	f7fe f8f0 	bl	80068ec <xQueueGenericSend>
 800870c:	6278      	str	r0, [r7, #36]	@ 0x24
 800870e:	e012      	b.n	8008736 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008710:	4b0b      	ldr	r3, [pc, #44]	@ (8008740 <xTimerGenericCommand+0x98>)
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	f107 0110 	add.w	r1, r7, #16
 8008718:	2300      	movs	r3, #0
 800871a:	2200      	movs	r2, #0
 800871c:	f7fe f8e6 	bl	80068ec <xQueueGenericSend>
 8008720:	6278      	str	r0, [r7, #36]	@ 0x24
 8008722:	e008      	b.n	8008736 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008724:	4b06      	ldr	r3, [pc, #24]	@ (8008740 <xTimerGenericCommand+0x98>)
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	f107 0110 	add.w	r1, r7, #16
 800872c:	2300      	movs	r3, #0
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	f7fe f9de 	bl	8006af0 <xQueueGenericSendFromISR>
 8008734:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008738:	4618      	mov	r0, r3
 800873a:	3728      	adds	r7, #40	@ 0x28
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000e00 	.word	0x20000e00

08008744 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af02      	add	r7, sp, #8
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800874e:	4b23      	ldr	r3, [pc, #140]	@ (80087dc <prvProcessExpiredTimer+0x98>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	3304      	adds	r3, #4
 800875c:	4618      	mov	r0, r3
 800875e:	f7fd fe2f 	bl	80063c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008768:	f003 0304 	and.w	r3, r3, #4
 800876c:	2b00      	cmp	r3, #0
 800876e:	d023      	beq.n	80087b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	699a      	ldr	r2, [r3, #24]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	18d1      	adds	r1, r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	6978      	ldr	r0, [r7, #20]
 800877e:	f000 f8d5 	bl	800892c <prvInsertTimerInActiveList>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d020      	beq.n	80087ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008788:	2300      	movs	r3, #0
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	2300      	movs	r3, #0
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	2100      	movs	r1, #0
 8008792:	6978      	ldr	r0, [r7, #20]
 8008794:	f7ff ff88 	bl	80086a8 <xTimerGenericCommand>
 8008798:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d114      	bne.n	80087ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60fb      	str	r3, [r7, #12]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	6978      	ldr	r0, [r7, #20]
 80087d0:	4798      	blx	r3
}
 80087d2:	bf00      	nop
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20000df8 	.word	0x20000df8

080087e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087e8:	f107 0308 	add.w	r3, r7, #8
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 f859 	bl	80088a4 <prvGetNextExpireTime>
 80087f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	4619      	mov	r1, r3
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f805 	bl	8008808 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087fe:	f000 f8d7 	bl	80089b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008802:	bf00      	nop
 8008804:	e7f0      	b.n	80087e8 <prvTimerTask+0x8>
	...

08008808 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008812:	f7ff f927 	bl	8007a64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008816:	f107 0308 	add.w	r3, r7, #8
 800881a:	4618      	mov	r0, r3
 800881c:	f000 f866 	bl	80088ec <prvSampleTimeNow>
 8008820:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d130      	bne.n	800888a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <prvProcessTimerOrBlockTask+0x3c>
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	429a      	cmp	r2, r3
 8008834:	d806      	bhi.n	8008844 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008836:	f7ff f923 	bl	8007a80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800883a:	68f9      	ldr	r1, [r7, #12]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ff81 	bl	8008744 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008842:	e024      	b.n	800888e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d008      	beq.n	800885c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800884a:	4b13      	ldr	r3, [pc, #76]	@ (8008898 <prvProcessTimerOrBlockTask+0x90>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <prvProcessTimerOrBlockTask+0x50>
 8008854:	2301      	movs	r3, #1
 8008856:	e000      	b.n	800885a <prvProcessTimerOrBlockTask+0x52>
 8008858:	2300      	movs	r3, #0
 800885a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800885c:	4b0f      	ldr	r3, [pc, #60]	@ (800889c <prvProcessTimerOrBlockTask+0x94>)
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	4619      	mov	r1, r3
 800886a:	f7fe fe83 	bl	8007574 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800886e:	f7ff f907 	bl	8007a80 <xTaskResumeAll>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10a      	bne.n	800888e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008878:	4b09      	ldr	r3, [pc, #36]	@ (80088a0 <prvProcessTimerOrBlockTask+0x98>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
}
 8008888:	e001      	b.n	800888e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800888a:	f7ff f8f9 	bl	8007a80 <xTaskResumeAll>
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000dfc 	.word	0x20000dfc
 800889c:	20000e00 	.word	0x20000e00
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088ac:	4b0e      	ldr	r3, [pc, #56]	@ (80088e8 <prvGetNextExpireTime+0x44>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <prvGetNextExpireTime+0x16>
 80088b6:	2201      	movs	r2, #1
 80088b8:	e000      	b.n	80088bc <prvGetNextExpireTime+0x18>
 80088ba:	2200      	movs	r2, #0
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d105      	bne.n	80088d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088c8:	4b07      	ldr	r3, [pc, #28]	@ (80088e8 <prvGetNextExpireTime+0x44>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	e001      	b.n	80088d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088d8:	68fb      	ldr	r3, [r7, #12]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	20000df8 	.word	0x20000df8

080088ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088f4:	f7ff f962 	bl	8007bbc <xTaskGetTickCount>
 80088f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008928 <prvSampleTimeNow+0x3c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	429a      	cmp	r2, r3
 8008902:	d205      	bcs.n	8008910 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008904:	f000 f93a 	bl	8008b7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e002      	b.n	8008916 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008916:	4a04      	ldr	r2, [pc, #16]	@ (8008928 <prvSampleTimeNow+0x3c>)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800891c:	68fb      	ldr	r3, [r7, #12]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000e08 	.word	0x20000e08

0800892c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800893a:	2300      	movs	r3, #0
 800893c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	429a      	cmp	r2, r3
 8008950:	d812      	bhi.n	8008978 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	1ad2      	subs	r2, r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	429a      	cmp	r2, r3
 800895e:	d302      	bcc.n	8008966 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008960:	2301      	movs	r3, #1
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e01b      	b.n	800899e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008966:	4b10      	ldr	r3, [pc, #64]	@ (80089a8 <prvInsertTimerInActiveList+0x7c>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7fd fcec 	bl	800634e <vListInsert>
 8008976:	e012      	b.n	800899e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d206      	bcs.n	800898e <prvInsertTimerInActiveList+0x62>
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d302      	bcc.n	800898e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008988:	2301      	movs	r3, #1
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	e007      	b.n	800899e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800898e:	4b07      	ldr	r3, [pc, #28]	@ (80089ac <prvInsertTimerInActiveList+0x80>)
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3304      	adds	r3, #4
 8008996:	4619      	mov	r1, r3
 8008998:	4610      	mov	r0, r2
 800899a:	f7fd fcd8 	bl	800634e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800899e:	697b      	ldr	r3, [r7, #20]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	20000dfc 	.word	0x20000dfc
 80089ac:	20000df8 	.word	0x20000df8

080089b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08e      	sub	sp, #56	@ 0x38
 80089b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089b6:	e0ce      	b.n	8008b56 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	da19      	bge.n	80089f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089be:	1d3b      	adds	r3, r7, #4
 80089c0:	3304      	adds	r3, #4
 80089c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80089c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10b      	bne.n	80089e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	61fb      	str	r3, [r7, #28]
}
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	e7fd      	b.n	80089de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e8:	6850      	ldr	r0, [r2, #4]
 80089ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089ec:	6892      	ldr	r2, [r2, #8]
 80089ee:	4611      	mov	r1, r2
 80089f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f2c0 80ae 	blt.w	8008b56 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d004      	beq.n	8008a10 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd fcd8 	bl	80063c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a10:	463b      	mov	r3, r7
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7ff ff6a 	bl	80088ec <prvSampleTimeNow>
 8008a18:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b09      	cmp	r3, #9
 8008a1e:	f200 8097 	bhi.w	8008b50 <prvProcessReceivedCommands+0x1a0>
 8008a22:	a201      	add	r2, pc, #4	@ (adr r2, 8008a28 <prvProcessReceivedCommands+0x78>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008a51 	.word	0x08008a51
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a51 	.word	0x08008a51
 8008a34:	08008ac7 	.word	0x08008ac7
 8008a38:	08008adb 	.word	0x08008adb
 8008a3c:	08008b27 	.word	0x08008b27
 8008a40:	08008a51 	.word	0x08008a51
 8008a44:	08008a51 	.word	0x08008a51
 8008a48:	08008ac7 	.word	0x08008ac7
 8008a4c:	08008adb 	.word	0x08008adb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a56:	f043 0301 	orr.w	r3, r3, #1
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	18d1      	adds	r1, r2, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a70:	f7ff ff5c 	bl	800892c <prvInsertTimerInActiveList>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d06c      	beq.n	8008b54 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d061      	beq.n	8008b54 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	441a      	add	r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008aa2:	f7ff fe01 	bl	80086a8 <xTimerGenericCommand>
 8008aa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d152      	bne.n	8008b54 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	61bb      	str	r3, [r7, #24]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008acc:	f023 0301 	bic.w	r3, r3, #1
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008ad8:	e03d      	b.n	8008b56 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008adc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ae0:	f043 0301 	orr.w	r3, r3, #1
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10b      	bne.n	8008b12 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	617b      	str	r3, [r7, #20]
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	e7fd      	b.n	8008b0e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	18d1      	adds	r1, r2, r3
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b20:	f7ff ff04 	bl	800892c <prvInsertTimerInActiveList>
					break;
 8008b24:	e017      	b.n	8008b56 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d103      	bne.n	8008b3c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008b34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b36:	f000 fbe7 	bl	8009308 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b3a:	e00c      	b.n	8008b56 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b42:	f023 0301 	bic.w	r3, r3, #1
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b4e:	e002      	b.n	8008b56 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008b50:	bf00      	nop
 8008b52:	e000      	b.n	8008b56 <prvProcessReceivedCommands+0x1a6>
					break;
 8008b54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b56:	4b08      	ldr	r3, [pc, #32]	@ (8008b78 <prvProcessReceivedCommands+0x1c8>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	1d39      	adds	r1, r7, #4
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe f8f4 	bl	8006d4c <xQueueReceive>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f47f af26 	bne.w	80089b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	3730      	adds	r7, #48	@ 0x30
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000e00 	.word	0x20000e00

08008b7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b82:	e049      	b.n	8008c18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b84:	4b2e      	ldr	r3, [pc, #184]	@ (8008c40 <prvSwitchTimerLists+0xc4>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8008c40 <prvSwitchTimerLists+0xc4>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fd fc0f 	bl	80063c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d02f      	beq.n	8008c18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d90e      	bls.n	8008be8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8008c40 <prvSwitchTimerLists+0xc4>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	4619      	mov	r1, r3
 8008be0:	4610      	mov	r0, r2
 8008be2:	f7fd fbb4 	bl	800634e <vListInsert>
 8008be6:	e017      	b.n	8008c18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008be8:	2300      	movs	r3, #0
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	2300      	movs	r3, #0
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f7ff fd58 	bl	80086a8 <xTimerGenericCommand>
 8008bf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10b      	bne.n	8008c18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	603b      	str	r3, [r7, #0]
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	e7fd      	b.n	8008c14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c18:	4b09      	ldr	r3, [pc, #36]	@ (8008c40 <prvSwitchTimerLists+0xc4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1b0      	bne.n	8008b84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c22:	4b07      	ldr	r3, [pc, #28]	@ (8008c40 <prvSwitchTimerLists+0xc4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c28:	4b06      	ldr	r3, [pc, #24]	@ (8008c44 <prvSwitchTimerLists+0xc8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a04      	ldr	r2, [pc, #16]	@ (8008c40 <prvSwitchTimerLists+0xc4>)
 8008c2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c30:	4a04      	ldr	r2, [pc, #16]	@ (8008c44 <prvSwitchTimerLists+0xc8>)
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	6013      	str	r3, [r2, #0]
}
 8008c36:	bf00      	nop
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20000df8 	.word	0x20000df8
 8008c44:	20000dfc 	.word	0x20000dfc

08008c48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c4e:	f000 f96b 	bl	8008f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c52:	4b15      	ldr	r3, [pc, #84]	@ (8008ca8 <prvCheckForValidListAndQueue+0x60>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d120      	bne.n	8008c9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c5a:	4814      	ldr	r0, [pc, #80]	@ (8008cac <prvCheckForValidListAndQueue+0x64>)
 8008c5c:	f7fd fb26 	bl	80062ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c60:	4813      	ldr	r0, [pc, #76]	@ (8008cb0 <prvCheckForValidListAndQueue+0x68>)
 8008c62:	f7fd fb23 	bl	80062ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c66:	4b13      	ldr	r3, [pc, #76]	@ (8008cb4 <prvCheckForValidListAndQueue+0x6c>)
 8008c68:	4a10      	ldr	r2, [pc, #64]	@ (8008cac <prvCheckForValidListAndQueue+0x64>)
 8008c6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c6c:	4b12      	ldr	r3, [pc, #72]	@ (8008cb8 <prvCheckForValidListAndQueue+0x70>)
 8008c6e:	4a10      	ldr	r2, [pc, #64]	@ (8008cb0 <prvCheckForValidListAndQueue+0x68>)
 8008c70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c72:	2300      	movs	r3, #0
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	4b11      	ldr	r3, [pc, #68]	@ (8008cbc <prvCheckForValidListAndQueue+0x74>)
 8008c78:	4a11      	ldr	r2, [pc, #68]	@ (8008cc0 <prvCheckForValidListAndQueue+0x78>)
 8008c7a:	2110      	movs	r1, #16
 8008c7c:	200a      	movs	r0, #10
 8008c7e:	f7fd fc33 	bl	80064e8 <xQueueGenericCreateStatic>
 8008c82:	4603      	mov	r3, r0
 8008c84:	4a08      	ldr	r2, [pc, #32]	@ (8008ca8 <prvCheckForValidListAndQueue+0x60>)
 8008c86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c88:	4b07      	ldr	r3, [pc, #28]	@ (8008ca8 <prvCheckForValidListAndQueue+0x60>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d005      	beq.n	8008c9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c90:	4b05      	ldr	r3, [pc, #20]	@ (8008ca8 <prvCheckForValidListAndQueue+0x60>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	490b      	ldr	r1, [pc, #44]	@ (8008cc4 <prvCheckForValidListAndQueue+0x7c>)
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe fc18 	bl	80074cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c9c:	f000 f976 	bl	8008f8c <vPortExitCritical>
}
 8008ca0:	bf00      	nop
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000e00 	.word	0x20000e00
 8008cac:	20000dd0 	.word	0x20000dd0
 8008cb0:	20000de4 	.word	0x20000de4
 8008cb4:	20000df8 	.word	0x20000df8
 8008cb8:	20000dfc 	.word	0x20000dfc
 8008cbc:	20000eac 	.word	0x20000eac
 8008cc0:	20000e0c 	.word	0x20000e0c
 8008cc4:	0800a56c 	.word	0x0800a56c

08008cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3b04      	subs	r3, #4
 8008cd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3b04      	subs	r3, #4
 8008ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f023 0201 	bic.w	r2, r3, #1
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3b04      	subs	r3, #4
 8008cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8008d2c <pxPortInitialiseStack+0x64>)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3b14      	subs	r3, #20
 8008d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3b04      	subs	r3, #4
 8008d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f06f 0202 	mvn.w	r2, #2
 8008d16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3b20      	subs	r3, #32
 8008d1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	08008d31 	.word	0x08008d31

08008d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d3a:	4b13      	ldr	r3, [pc, #76]	@ (8008d88 <prvTaskExitError+0x58>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d42:	d00b      	beq.n	8008d5c <prvTaskExitError+0x2c>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	60fb      	str	r3, [r7, #12]
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <prvTaskExitError+0x28>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	60bb      	str	r3, [r7, #8]
}
 8008d6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d70:	bf00      	nop
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0fc      	beq.n	8008d72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	2000000c 	.word	0x2000000c
 8008d8c:	00000000 	.word	0x00000000

08008d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d90:	4b07      	ldr	r3, [pc, #28]	@ (8008db0 <pxCurrentTCBConst2>)
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	6808      	ldr	r0, [r1, #0]
 8008d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	f380 8809 	msr	PSP, r0
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8811 	msr	BASEPRI, r0
 8008daa:	4770      	bx	lr
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst2>:
 8008db0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008db8:	4808      	ldr	r0, [pc, #32]	@ (8008ddc <prvPortStartFirstTask+0x24>)
 8008dba:	6800      	ldr	r0, [r0, #0]
 8008dbc:	6800      	ldr	r0, [r0, #0]
 8008dbe:	f380 8808 	msr	MSP, r0
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8814 	msr	CONTROL, r0
 8008dca:	b662      	cpsie	i
 8008dcc:	b661      	cpsie	f
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	df00      	svc	0
 8008dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dda:	bf00      	nop
 8008ddc:	e000ed08 	.word	0xe000ed08

08008de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008de6:	4b47      	ldr	r3, [pc, #284]	@ (8008f04 <xPortStartScheduler+0x124>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a47      	ldr	r2, [pc, #284]	@ (8008f08 <xPortStartScheduler+0x128>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d10b      	bne.n	8008e08 <xPortStartScheduler+0x28>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60fb      	str	r3, [r7, #12]
}
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	e7fd      	b.n	8008e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e08:	4b3e      	ldr	r3, [pc, #248]	@ (8008f04 <xPortStartScheduler+0x124>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8008f0c <xPortStartScheduler+0x12c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d10b      	bne.n	8008e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	613b      	str	r3, [r7, #16]
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop
 8008e28:	e7fd      	b.n	8008e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e2a:	4b39      	ldr	r3, [pc, #228]	@ (8008f10 <xPortStartScheduler+0x130>)
 8008e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	22ff      	movs	r2, #255	@ 0xff
 8008e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	4b31      	ldr	r3, [pc, #196]	@ (8008f14 <xPortStartScheduler+0x134>)
 8008e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e52:	4b31      	ldr	r3, [pc, #196]	@ (8008f18 <xPortStartScheduler+0x138>)
 8008e54:	2207      	movs	r2, #7
 8008e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e58:	e009      	b.n	8008e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f18 <xPortStartScheduler+0x138>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	4a2d      	ldr	r2, [pc, #180]	@ (8008f18 <xPortStartScheduler+0x138>)
 8008e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e6e:	78fb      	ldrb	r3, [r7, #3]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e76:	2b80      	cmp	r3, #128	@ 0x80
 8008e78:	d0ef      	beq.n	8008e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e7a:	4b27      	ldr	r3, [pc, #156]	@ (8008f18 <xPortStartScheduler+0x138>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f1c3 0307 	rsb	r3, r3, #7
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d00b      	beq.n	8008e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	60bb      	str	r3, [r7, #8]
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	e7fd      	b.n	8008e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008f18 <xPortStartScheduler+0x138>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	021b      	lsls	r3, r3, #8
 8008ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f18 <xPortStartScheduler+0x138>)
 8008ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f18 <xPortStartScheduler+0x138>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008eb0:	4a19      	ldr	r2, [pc, #100]	@ (8008f18 <xPortStartScheduler+0x138>)
 8008eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ebc:	4b17      	ldr	r3, [pc, #92]	@ (8008f1c <xPortStartScheduler+0x13c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a16      	ldr	r2, [pc, #88]	@ (8008f1c <xPortStartScheduler+0x13c>)
 8008ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ec8:	4b14      	ldr	r3, [pc, #80]	@ (8008f1c <xPortStartScheduler+0x13c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a13      	ldr	r2, [pc, #76]	@ (8008f1c <xPortStartScheduler+0x13c>)
 8008ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ed4:	f000 f8da 	bl	800908c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ed8:	4b11      	ldr	r3, [pc, #68]	@ (8008f20 <xPortStartScheduler+0x140>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ede:	f000 f8f9 	bl	80090d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ee2:	4b10      	ldr	r3, [pc, #64]	@ (8008f24 <xPortStartScheduler+0x144>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8008f24 <xPortStartScheduler+0x144>)
 8008ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eee:	f7ff ff63 	bl	8008db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ef2:	f7fe ff2d 	bl	8007d50 <vTaskSwitchContext>
	prvTaskExitError();
 8008ef6:	f7ff ff1b 	bl	8008d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	e000ed00 	.word	0xe000ed00
 8008f08:	410fc271 	.word	0x410fc271
 8008f0c:	410fc270 	.word	0x410fc270
 8008f10:	e000e400 	.word	0xe000e400
 8008f14:	20000efc 	.word	0x20000efc
 8008f18:	20000f00 	.word	0x20000f00
 8008f1c:	e000ed20 	.word	0xe000ed20
 8008f20:	2000000c 	.word	0x2000000c
 8008f24:	e000ef34 	.word	0xe000ef34

08008f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f42:	4b10      	ldr	r3, [pc, #64]	@ (8008f84 <vPortEnterCritical+0x5c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3301      	adds	r3, #1
 8008f48:	4a0e      	ldr	r2, [pc, #56]	@ (8008f84 <vPortEnterCritical+0x5c>)
 8008f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f84 <vPortEnterCritical+0x5c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d110      	bne.n	8008f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f54:	4b0c      	ldr	r3, [pc, #48]	@ (8008f88 <vPortEnterCritical+0x60>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00b      	beq.n	8008f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	603b      	str	r3, [r7, #0]
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	e7fd      	b.n	8008f72 <vPortEnterCritical+0x4a>
	}
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	2000000c 	.word	0x2000000c
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f92:	4b12      	ldr	r3, [pc, #72]	@ (8008fdc <vPortExitCritical+0x50>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10b      	bne.n	8008fb2 <vPortExitCritical+0x26>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	607b      	str	r3, [r7, #4]
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	e7fd      	b.n	8008fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fdc <vPortExitCritical+0x50>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	4a08      	ldr	r2, [pc, #32]	@ (8008fdc <vPortExitCritical+0x50>)
 8008fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fbc:	4b07      	ldr	r3, [pc, #28]	@ (8008fdc <vPortExitCritical+0x50>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d105      	bne.n	8008fd0 <vPortExitCritical+0x44>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	f383 8811 	msr	BASEPRI, r3
}
 8008fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	2000000c 	.word	0x2000000c

08008fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fe0:	f3ef 8009 	mrs	r0, PSP
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	4b15      	ldr	r3, [pc, #84]	@ (8009040 <pxCurrentTCBConst>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	f01e 0f10 	tst.w	lr, #16
 8008ff0:	bf08      	it	eq
 8008ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffa:	6010      	str	r0, [r2, #0]
 8008ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009004:	f380 8811 	msr	BASEPRI, r0
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f7fe fe9e 	bl	8007d50 <vTaskSwitchContext>
 8009014:	f04f 0000 	mov.w	r0, #0
 8009018:	f380 8811 	msr	BASEPRI, r0
 800901c:	bc09      	pop	{r0, r3}
 800901e:	6819      	ldr	r1, [r3, #0]
 8009020:	6808      	ldr	r0, [r1, #0]
 8009022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009026:	f01e 0f10 	tst.w	lr, #16
 800902a:	bf08      	it	eq
 800902c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009030:	f380 8809 	msr	PSP, r0
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	f3af 8000 	nop.w

08009040 <pxCurrentTCBConst>:
 8009040:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
}
 8009060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009062:	f7fe fdbb 	bl	8007bdc <xTaskIncrementTick>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800906c:	4b06      	ldr	r3, [pc, #24]	@ (8009088 <xPortSysTickHandler+0x40>)
 800906e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	2300      	movs	r3, #0
 8009076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f383 8811 	msr	BASEPRI, r3
}
 800907e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009090:	4b0b      	ldr	r3, [pc, #44]	@ (80090c0 <vPortSetupTimerInterrupt+0x34>)
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009096:	4b0b      	ldr	r3, [pc, #44]	@ (80090c4 <vPortSetupTimerInterrupt+0x38>)
 8009098:	2200      	movs	r2, #0
 800909a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800909c:	4b0a      	ldr	r3, [pc, #40]	@ (80090c8 <vPortSetupTimerInterrupt+0x3c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a0a      	ldr	r2, [pc, #40]	@ (80090cc <vPortSetupTimerInterrupt+0x40>)
 80090a2:	fba2 2303 	umull	r2, r3, r2, r3
 80090a6:	099b      	lsrs	r3, r3, #6
 80090a8:	4a09      	ldr	r2, [pc, #36]	@ (80090d0 <vPortSetupTimerInterrupt+0x44>)
 80090aa:	3b01      	subs	r3, #1
 80090ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090ae:	4b04      	ldr	r3, [pc, #16]	@ (80090c0 <vPortSetupTimerInterrupt+0x34>)
 80090b0:	2207      	movs	r2, #7
 80090b2:	601a      	str	r2, [r3, #0]
}
 80090b4:	bf00      	nop
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	e000e010 	.word	0xe000e010
 80090c4:	e000e018 	.word	0xe000e018
 80090c8:	20000000 	.word	0x20000000
 80090cc:	10624dd3 	.word	0x10624dd3
 80090d0:	e000e014 	.word	0xe000e014

080090d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090e4 <vPortEnableVFP+0x10>
 80090d8:	6801      	ldr	r1, [r0, #0]
 80090da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090de:	6001      	str	r1, [r0, #0]
 80090e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090e2:	bf00      	nop
 80090e4:	e000ed88 	.word	0xe000ed88

080090e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090ee:	f3ef 8305 	mrs	r3, IPSR
 80090f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b0f      	cmp	r3, #15
 80090f8:	d915      	bls.n	8009126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090fa:	4a18      	ldr	r2, [pc, #96]	@ (800915c <vPortValidateInterruptPriority+0x74>)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4413      	add	r3, r2
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009104:	4b16      	ldr	r3, [pc, #88]	@ (8009160 <vPortValidateInterruptPriority+0x78>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	7afa      	ldrb	r2, [r7, #11]
 800910a:	429a      	cmp	r2, r3
 800910c:	d20b      	bcs.n	8009126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	607b      	str	r3, [r7, #4]
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	e7fd      	b.n	8009122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009126:	4b0f      	ldr	r3, [pc, #60]	@ (8009164 <vPortValidateInterruptPriority+0x7c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800912e:	4b0e      	ldr	r3, [pc, #56]	@ (8009168 <vPortValidateInterruptPriority+0x80>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	d90b      	bls.n	800914e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	603b      	str	r3, [r7, #0]
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	e7fd      	b.n	800914a <vPortValidateInterruptPriority+0x62>
	}
 800914e:	bf00      	nop
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	e000e3f0 	.word	0xe000e3f0
 8009160:	20000efc 	.word	0x20000efc
 8009164:	e000ed0c 	.word	0xe000ed0c
 8009168:	20000f00 	.word	0x20000f00

0800916c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08a      	sub	sp, #40	@ 0x28
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009178:	f7fe fc74 	bl	8007a64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800917c:	4b5c      	ldr	r3, [pc, #368]	@ (80092f0 <pvPortMalloc+0x184>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009184:	f000 f924 	bl	80093d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009188:	4b5a      	ldr	r3, [pc, #360]	@ (80092f4 <pvPortMalloc+0x188>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4013      	ands	r3, r2
 8009190:	2b00      	cmp	r3, #0
 8009192:	f040 8095 	bne.w	80092c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01e      	beq.n	80091da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800919c:	2208      	movs	r2, #8
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4413      	add	r3, r2
 80091a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d015      	beq.n	80091da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f023 0307 	bic.w	r3, r3, #7
 80091b4:	3308      	adds	r3, #8
 80091b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00b      	beq.n	80091da <pvPortMalloc+0x6e>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	617b      	str	r3, [r7, #20]
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	e7fd      	b.n	80091d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d06f      	beq.n	80092c0 <pvPortMalloc+0x154>
 80091e0:	4b45      	ldr	r3, [pc, #276]	@ (80092f8 <pvPortMalloc+0x18c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d86a      	bhi.n	80092c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091ea:	4b44      	ldr	r3, [pc, #272]	@ (80092fc <pvPortMalloc+0x190>)
 80091ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091ee:	4b43      	ldr	r3, [pc, #268]	@ (80092fc <pvPortMalloc+0x190>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091f4:	e004      	b.n	8009200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d903      	bls.n	8009212 <pvPortMalloc+0xa6>
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1f1      	bne.n	80091f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009212:	4b37      	ldr	r3, [pc, #220]	@ (80092f0 <pvPortMalloc+0x184>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009218:	429a      	cmp	r2, r3
 800921a:	d051      	beq.n	80092c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2208      	movs	r2, #8
 8009222:	4413      	add	r3, r2
 8009224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800922e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	1ad2      	subs	r2, r2, r3
 8009236:	2308      	movs	r3, #8
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	429a      	cmp	r2, r3
 800923c:	d920      	bls.n	8009280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800923e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4413      	add	r3, r2
 8009244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00b      	beq.n	8009268 <pvPortMalloc+0xfc>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	613b      	str	r3, [r7, #16]
}
 8009262:	bf00      	nop
 8009264:	bf00      	nop
 8009266:	e7fd      	b.n	8009264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	1ad2      	subs	r2, r2, r3
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800927a:	69b8      	ldr	r0, [r7, #24]
 800927c:	f000 f90a 	bl	8009494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009280:	4b1d      	ldr	r3, [pc, #116]	@ (80092f8 <pvPortMalloc+0x18c>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	4a1b      	ldr	r2, [pc, #108]	@ (80092f8 <pvPortMalloc+0x18c>)
 800928c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800928e:	4b1a      	ldr	r3, [pc, #104]	@ (80092f8 <pvPortMalloc+0x18c>)
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4b1b      	ldr	r3, [pc, #108]	@ (8009300 <pvPortMalloc+0x194>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d203      	bcs.n	80092a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800929a:	4b17      	ldr	r3, [pc, #92]	@ (80092f8 <pvPortMalloc+0x18c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a18      	ldr	r2, [pc, #96]	@ (8009300 <pvPortMalloc+0x194>)
 80092a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	4b13      	ldr	r3, [pc, #76]	@ (80092f4 <pvPortMalloc+0x188>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092b6:	4b13      	ldr	r3, [pc, #76]	@ (8009304 <pvPortMalloc+0x198>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3301      	adds	r3, #1
 80092bc:	4a11      	ldr	r2, [pc, #68]	@ (8009304 <pvPortMalloc+0x198>)
 80092be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092c0:	f7fe fbde 	bl	8007a80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <pvPortMalloc+0x17a>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	60fb      	str	r3, [r7, #12]
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <pvPortMalloc+0x176>
	return pvReturn;
 80092e6:	69fb      	ldr	r3, [r7, #28]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3728      	adds	r7, #40	@ 0x28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20004b0c 	.word	0x20004b0c
 80092f4:	20004b20 	.word	0x20004b20
 80092f8:	20004b10 	.word	0x20004b10
 80092fc:	20004b04 	.word	0x20004b04
 8009300:	20004b14 	.word	0x20004b14
 8009304:	20004b18 	.word	0x20004b18

08009308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d04f      	beq.n	80093ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800931a:	2308      	movs	r3, #8
 800931c:	425b      	negs	r3, r3
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	4413      	add	r3, r2
 8009322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	4b25      	ldr	r3, [pc, #148]	@ (80093c4 <vPortFree+0xbc>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4013      	ands	r3, r2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10b      	bne.n	800934e <vPortFree+0x46>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	60fb      	str	r3, [r7, #12]
}
 8009348:	bf00      	nop
 800934a:	bf00      	nop
 800934c:	e7fd      	b.n	800934a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00b      	beq.n	800936e <vPortFree+0x66>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	60bb      	str	r3, [r7, #8]
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	e7fd      	b.n	800936a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	4b14      	ldr	r3, [pc, #80]	@ (80093c4 <vPortFree+0xbc>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4013      	ands	r3, r2
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01e      	beq.n	80093ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d11a      	bne.n	80093ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	4b0e      	ldr	r3, [pc, #56]	@ (80093c4 <vPortFree+0xbc>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	43db      	mvns	r3, r3
 800938e:	401a      	ands	r2, r3
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009394:	f7fe fb66 	bl	8007a64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	4b0a      	ldr	r3, [pc, #40]	@ (80093c8 <vPortFree+0xc0>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4413      	add	r3, r2
 80093a2:	4a09      	ldr	r2, [pc, #36]	@ (80093c8 <vPortFree+0xc0>)
 80093a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093a6:	6938      	ldr	r0, [r7, #16]
 80093a8:	f000 f874 	bl	8009494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093ac:	4b07      	ldr	r3, [pc, #28]	@ (80093cc <vPortFree+0xc4>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3301      	adds	r3, #1
 80093b2:	4a06      	ldr	r2, [pc, #24]	@ (80093cc <vPortFree+0xc4>)
 80093b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80093b6:	f7fe fb63 	bl	8007a80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093ba:	bf00      	nop
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20004b20 	.word	0x20004b20
 80093c8:	20004b10 	.word	0x20004b10
 80093cc:	20004b1c 	.word	0x20004b1c

080093d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80093da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093dc:	4b27      	ldr	r3, [pc, #156]	@ (800947c <prvHeapInit+0xac>)
 80093de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f003 0307 	and.w	r3, r3, #7
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00c      	beq.n	8009404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3307      	adds	r3, #7
 80093ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 0307 	bic.w	r3, r3, #7
 80093f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	4a1f      	ldr	r2, [pc, #124]	@ (800947c <prvHeapInit+0xac>)
 8009400:	4413      	add	r3, r2
 8009402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009408:	4a1d      	ldr	r2, [pc, #116]	@ (8009480 <prvHeapInit+0xb0>)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800940e:	4b1c      	ldr	r3, [pc, #112]	@ (8009480 <prvHeapInit+0xb0>)
 8009410:	2200      	movs	r2, #0
 8009412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800941c:	2208      	movs	r2, #8
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1a9b      	subs	r3, r3, r2
 8009422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f023 0307 	bic.w	r3, r3, #7
 800942a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4a15      	ldr	r2, [pc, #84]	@ (8009484 <prvHeapInit+0xb4>)
 8009430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009432:	4b14      	ldr	r3, [pc, #80]	@ (8009484 <prvHeapInit+0xb4>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2200      	movs	r2, #0
 8009438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800943a:	4b12      	ldr	r3, [pc, #72]	@ (8009484 <prvHeapInit+0xb4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2200      	movs	r2, #0
 8009440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	1ad2      	subs	r2, r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009450:	4b0c      	ldr	r3, [pc, #48]	@ (8009484 <prvHeapInit+0xb4>)
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	4a0a      	ldr	r2, [pc, #40]	@ (8009488 <prvHeapInit+0xb8>)
 800945e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	4a09      	ldr	r2, [pc, #36]	@ (800948c <prvHeapInit+0xbc>)
 8009466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009468:	4b09      	ldr	r3, [pc, #36]	@ (8009490 <prvHeapInit+0xc0>)
 800946a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800946e:	601a      	str	r2, [r3, #0]
}
 8009470:	bf00      	nop
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	20000f04 	.word	0x20000f04
 8009480:	20004b04 	.word	0x20004b04
 8009484:	20004b0c 	.word	0x20004b0c
 8009488:	20004b14 	.word	0x20004b14
 800948c:	20004b10 	.word	0x20004b10
 8009490:	20004b20 	.word	0x20004b20

08009494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800949c:	4b28      	ldr	r3, [pc, #160]	@ (8009540 <prvInsertBlockIntoFreeList+0xac>)
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e002      	b.n	80094a8 <prvInsertBlockIntoFreeList+0x14>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d8f7      	bhi.n	80094a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	4413      	add	r3, r2
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d108      	bne.n	80094d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	441a      	add	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	441a      	add	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d118      	bne.n	800951c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	4b15      	ldr	r3, [pc, #84]	@ (8009544 <prvInsertBlockIntoFreeList+0xb0>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d00d      	beq.n	8009512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	441a      	add	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	e008      	b.n	8009524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009512:	4b0c      	ldr	r3, [pc, #48]	@ (8009544 <prvInsertBlockIntoFreeList+0xb0>)
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e003      	b.n	8009524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d002      	beq.n	8009532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	20004b04 	.word	0x20004b04
 8009544:	20004b0c 	.word	0x20004b0c

08009548 <std>:
 8009548:	2300      	movs	r3, #0
 800954a:	b510      	push	{r4, lr}
 800954c:	4604      	mov	r4, r0
 800954e:	e9c0 3300 	strd	r3, r3, [r0]
 8009552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009556:	6083      	str	r3, [r0, #8]
 8009558:	8181      	strh	r1, [r0, #12]
 800955a:	6643      	str	r3, [r0, #100]	@ 0x64
 800955c:	81c2      	strh	r2, [r0, #14]
 800955e:	6183      	str	r3, [r0, #24]
 8009560:	4619      	mov	r1, r3
 8009562:	2208      	movs	r2, #8
 8009564:	305c      	adds	r0, #92	@ 0x5c
 8009566:	f000 f9f9 	bl	800995c <memset>
 800956a:	4b0d      	ldr	r3, [pc, #52]	@ (80095a0 <std+0x58>)
 800956c:	6263      	str	r3, [r4, #36]	@ 0x24
 800956e:	4b0d      	ldr	r3, [pc, #52]	@ (80095a4 <std+0x5c>)
 8009570:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009572:	4b0d      	ldr	r3, [pc, #52]	@ (80095a8 <std+0x60>)
 8009574:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009576:	4b0d      	ldr	r3, [pc, #52]	@ (80095ac <std+0x64>)
 8009578:	6323      	str	r3, [r4, #48]	@ 0x30
 800957a:	4b0d      	ldr	r3, [pc, #52]	@ (80095b0 <std+0x68>)
 800957c:	6224      	str	r4, [r4, #32]
 800957e:	429c      	cmp	r4, r3
 8009580:	d006      	beq.n	8009590 <std+0x48>
 8009582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009586:	4294      	cmp	r4, r2
 8009588:	d002      	beq.n	8009590 <std+0x48>
 800958a:	33d0      	adds	r3, #208	@ 0xd0
 800958c:	429c      	cmp	r4, r3
 800958e:	d105      	bne.n	800959c <std+0x54>
 8009590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009598:	f000 ba58 	b.w	8009a4c <__retarget_lock_init_recursive>
 800959c:	bd10      	pop	{r4, pc}
 800959e:	bf00      	nop
 80095a0:	080097ad 	.word	0x080097ad
 80095a4:	080097cf 	.word	0x080097cf
 80095a8:	08009807 	.word	0x08009807
 80095ac:	0800982b 	.word	0x0800982b
 80095b0:	20004b24 	.word	0x20004b24

080095b4 <stdio_exit_handler>:
 80095b4:	4a02      	ldr	r2, [pc, #8]	@ (80095c0 <stdio_exit_handler+0xc>)
 80095b6:	4903      	ldr	r1, [pc, #12]	@ (80095c4 <stdio_exit_handler+0x10>)
 80095b8:	4803      	ldr	r0, [pc, #12]	@ (80095c8 <stdio_exit_handler+0x14>)
 80095ba:	f000 b869 	b.w	8009690 <_fwalk_sglue>
 80095be:	bf00      	nop
 80095c0:	20000010 	.word	0x20000010
 80095c4:	0800a305 	.word	0x0800a305
 80095c8:	20000020 	.word	0x20000020

080095cc <cleanup_stdio>:
 80095cc:	6841      	ldr	r1, [r0, #4]
 80095ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009600 <cleanup_stdio+0x34>)
 80095d0:	4299      	cmp	r1, r3
 80095d2:	b510      	push	{r4, lr}
 80095d4:	4604      	mov	r4, r0
 80095d6:	d001      	beq.n	80095dc <cleanup_stdio+0x10>
 80095d8:	f000 fe94 	bl	800a304 <_fflush_r>
 80095dc:	68a1      	ldr	r1, [r4, #8]
 80095de:	4b09      	ldr	r3, [pc, #36]	@ (8009604 <cleanup_stdio+0x38>)
 80095e0:	4299      	cmp	r1, r3
 80095e2:	d002      	beq.n	80095ea <cleanup_stdio+0x1e>
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 fe8d 	bl	800a304 <_fflush_r>
 80095ea:	68e1      	ldr	r1, [r4, #12]
 80095ec:	4b06      	ldr	r3, [pc, #24]	@ (8009608 <cleanup_stdio+0x3c>)
 80095ee:	4299      	cmp	r1, r3
 80095f0:	d004      	beq.n	80095fc <cleanup_stdio+0x30>
 80095f2:	4620      	mov	r0, r4
 80095f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f8:	f000 be84 	b.w	800a304 <_fflush_r>
 80095fc:	bd10      	pop	{r4, pc}
 80095fe:	bf00      	nop
 8009600:	20004b24 	.word	0x20004b24
 8009604:	20004b8c 	.word	0x20004b8c
 8009608:	20004bf4 	.word	0x20004bf4

0800960c <global_stdio_init.part.0>:
 800960c:	b510      	push	{r4, lr}
 800960e:	4b0b      	ldr	r3, [pc, #44]	@ (800963c <global_stdio_init.part.0+0x30>)
 8009610:	4c0b      	ldr	r4, [pc, #44]	@ (8009640 <global_stdio_init.part.0+0x34>)
 8009612:	4a0c      	ldr	r2, [pc, #48]	@ (8009644 <global_stdio_init.part.0+0x38>)
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	4620      	mov	r0, r4
 8009618:	2200      	movs	r2, #0
 800961a:	2104      	movs	r1, #4
 800961c:	f7ff ff94 	bl	8009548 <std>
 8009620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009624:	2201      	movs	r2, #1
 8009626:	2109      	movs	r1, #9
 8009628:	f7ff ff8e 	bl	8009548 <std>
 800962c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009630:	2202      	movs	r2, #2
 8009632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009636:	2112      	movs	r1, #18
 8009638:	f7ff bf86 	b.w	8009548 <std>
 800963c:	20004c5c 	.word	0x20004c5c
 8009640:	20004b24 	.word	0x20004b24
 8009644:	080095b5 	.word	0x080095b5

08009648 <__sfp_lock_acquire>:
 8009648:	4801      	ldr	r0, [pc, #4]	@ (8009650 <__sfp_lock_acquire+0x8>)
 800964a:	f000 ba00 	b.w	8009a4e <__retarget_lock_acquire_recursive>
 800964e:	bf00      	nop
 8009650:	20004c65 	.word	0x20004c65

08009654 <__sfp_lock_release>:
 8009654:	4801      	ldr	r0, [pc, #4]	@ (800965c <__sfp_lock_release+0x8>)
 8009656:	f000 b9fb 	b.w	8009a50 <__retarget_lock_release_recursive>
 800965a:	bf00      	nop
 800965c:	20004c65 	.word	0x20004c65

08009660 <__sinit>:
 8009660:	b510      	push	{r4, lr}
 8009662:	4604      	mov	r4, r0
 8009664:	f7ff fff0 	bl	8009648 <__sfp_lock_acquire>
 8009668:	6a23      	ldr	r3, [r4, #32]
 800966a:	b11b      	cbz	r3, 8009674 <__sinit+0x14>
 800966c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009670:	f7ff bff0 	b.w	8009654 <__sfp_lock_release>
 8009674:	4b04      	ldr	r3, [pc, #16]	@ (8009688 <__sinit+0x28>)
 8009676:	6223      	str	r3, [r4, #32]
 8009678:	4b04      	ldr	r3, [pc, #16]	@ (800968c <__sinit+0x2c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1f5      	bne.n	800966c <__sinit+0xc>
 8009680:	f7ff ffc4 	bl	800960c <global_stdio_init.part.0>
 8009684:	e7f2      	b.n	800966c <__sinit+0xc>
 8009686:	bf00      	nop
 8009688:	080095cd 	.word	0x080095cd
 800968c:	20004c5c 	.word	0x20004c5c

08009690 <_fwalk_sglue>:
 8009690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009694:	4607      	mov	r7, r0
 8009696:	4688      	mov	r8, r1
 8009698:	4614      	mov	r4, r2
 800969a:	2600      	movs	r6, #0
 800969c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096a0:	f1b9 0901 	subs.w	r9, r9, #1
 80096a4:	d505      	bpl.n	80096b2 <_fwalk_sglue+0x22>
 80096a6:	6824      	ldr	r4, [r4, #0]
 80096a8:	2c00      	cmp	r4, #0
 80096aa:	d1f7      	bne.n	800969c <_fwalk_sglue+0xc>
 80096ac:	4630      	mov	r0, r6
 80096ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b2:	89ab      	ldrh	r3, [r5, #12]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d907      	bls.n	80096c8 <_fwalk_sglue+0x38>
 80096b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096bc:	3301      	adds	r3, #1
 80096be:	d003      	beq.n	80096c8 <_fwalk_sglue+0x38>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4638      	mov	r0, r7
 80096c4:	47c0      	blx	r8
 80096c6:	4306      	orrs	r6, r0
 80096c8:	3568      	adds	r5, #104	@ 0x68
 80096ca:	e7e9      	b.n	80096a0 <_fwalk_sglue+0x10>

080096cc <iprintf>:
 80096cc:	b40f      	push	{r0, r1, r2, r3}
 80096ce:	b507      	push	{r0, r1, r2, lr}
 80096d0:	4906      	ldr	r1, [pc, #24]	@ (80096ec <iprintf+0x20>)
 80096d2:	ab04      	add	r3, sp, #16
 80096d4:	6808      	ldr	r0, [r1, #0]
 80096d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096da:	6881      	ldr	r1, [r0, #8]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	f000 fae9 	bl	8009cb4 <_vfiprintf_r>
 80096e2:	b003      	add	sp, #12
 80096e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e8:	b004      	add	sp, #16
 80096ea:	4770      	bx	lr
 80096ec:	2000001c 	.word	0x2000001c

080096f0 <_puts_r>:
 80096f0:	6a03      	ldr	r3, [r0, #32]
 80096f2:	b570      	push	{r4, r5, r6, lr}
 80096f4:	6884      	ldr	r4, [r0, #8]
 80096f6:	4605      	mov	r5, r0
 80096f8:	460e      	mov	r6, r1
 80096fa:	b90b      	cbnz	r3, 8009700 <_puts_r+0x10>
 80096fc:	f7ff ffb0 	bl	8009660 <__sinit>
 8009700:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009702:	07db      	lsls	r3, r3, #31
 8009704:	d405      	bmi.n	8009712 <_puts_r+0x22>
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	0598      	lsls	r0, r3, #22
 800970a:	d402      	bmi.n	8009712 <_puts_r+0x22>
 800970c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800970e:	f000 f99e 	bl	8009a4e <__retarget_lock_acquire_recursive>
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	0719      	lsls	r1, r3, #28
 8009716:	d502      	bpl.n	800971e <_puts_r+0x2e>
 8009718:	6923      	ldr	r3, [r4, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d135      	bne.n	800978a <_puts_r+0x9a>
 800971e:	4621      	mov	r1, r4
 8009720:	4628      	mov	r0, r5
 8009722:	f000 f8c5 	bl	80098b0 <__swsetup_r>
 8009726:	b380      	cbz	r0, 800978a <_puts_r+0x9a>
 8009728:	f04f 35ff 	mov.w	r5, #4294967295
 800972c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800972e:	07da      	lsls	r2, r3, #31
 8009730:	d405      	bmi.n	800973e <_puts_r+0x4e>
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	059b      	lsls	r3, r3, #22
 8009736:	d402      	bmi.n	800973e <_puts_r+0x4e>
 8009738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800973a:	f000 f989 	bl	8009a50 <__retarget_lock_release_recursive>
 800973e:	4628      	mov	r0, r5
 8009740:	bd70      	pop	{r4, r5, r6, pc}
 8009742:	2b00      	cmp	r3, #0
 8009744:	da04      	bge.n	8009750 <_puts_r+0x60>
 8009746:	69a2      	ldr	r2, [r4, #24]
 8009748:	429a      	cmp	r2, r3
 800974a:	dc17      	bgt.n	800977c <_puts_r+0x8c>
 800974c:	290a      	cmp	r1, #10
 800974e:	d015      	beq.n	800977c <_puts_r+0x8c>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	6022      	str	r2, [r4, #0]
 8009756:	7019      	strb	r1, [r3, #0]
 8009758:	68a3      	ldr	r3, [r4, #8]
 800975a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800975e:	3b01      	subs	r3, #1
 8009760:	60a3      	str	r3, [r4, #8]
 8009762:	2900      	cmp	r1, #0
 8009764:	d1ed      	bne.n	8009742 <_puts_r+0x52>
 8009766:	2b00      	cmp	r3, #0
 8009768:	da11      	bge.n	800978e <_puts_r+0x9e>
 800976a:	4622      	mov	r2, r4
 800976c:	210a      	movs	r1, #10
 800976e:	4628      	mov	r0, r5
 8009770:	f000 f85f 	bl	8009832 <__swbuf_r>
 8009774:	3001      	adds	r0, #1
 8009776:	d0d7      	beq.n	8009728 <_puts_r+0x38>
 8009778:	250a      	movs	r5, #10
 800977a:	e7d7      	b.n	800972c <_puts_r+0x3c>
 800977c:	4622      	mov	r2, r4
 800977e:	4628      	mov	r0, r5
 8009780:	f000 f857 	bl	8009832 <__swbuf_r>
 8009784:	3001      	adds	r0, #1
 8009786:	d1e7      	bne.n	8009758 <_puts_r+0x68>
 8009788:	e7ce      	b.n	8009728 <_puts_r+0x38>
 800978a:	3e01      	subs	r6, #1
 800978c:	e7e4      	b.n	8009758 <_puts_r+0x68>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	6022      	str	r2, [r4, #0]
 8009794:	220a      	movs	r2, #10
 8009796:	701a      	strb	r2, [r3, #0]
 8009798:	e7ee      	b.n	8009778 <_puts_r+0x88>
	...

0800979c <puts>:
 800979c:	4b02      	ldr	r3, [pc, #8]	@ (80097a8 <puts+0xc>)
 800979e:	4601      	mov	r1, r0
 80097a0:	6818      	ldr	r0, [r3, #0]
 80097a2:	f7ff bfa5 	b.w	80096f0 <_puts_r>
 80097a6:	bf00      	nop
 80097a8:	2000001c 	.word	0x2000001c

080097ac <__sread>:
 80097ac:	b510      	push	{r4, lr}
 80097ae:	460c      	mov	r4, r1
 80097b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b4:	f000 f8fc 	bl	80099b0 <_read_r>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	bfab      	itete	ge
 80097bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097be:	89a3      	ldrhlt	r3, [r4, #12]
 80097c0:	181b      	addge	r3, r3, r0
 80097c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097c6:	bfac      	ite	ge
 80097c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80097ca:	81a3      	strhlt	r3, [r4, #12]
 80097cc:	bd10      	pop	{r4, pc}

080097ce <__swrite>:
 80097ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d2:	461f      	mov	r7, r3
 80097d4:	898b      	ldrh	r3, [r1, #12]
 80097d6:	05db      	lsls	r3, r3, #23
 80097d8:	4605      	mov	r5, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	4616      	mov	r6, r2
 80097de:	d505      	bpl.n	80097ec <__swrite+0x1e>
 80097e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e4:	2302      	movs	r3, #2
 80097e6:	2200      	movs	r2, #0
 80097e8:	f000 f8d0 	bl	800998c <_lseek_r>
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097f6:	81a3      	strh	r3, [r4, #12]
 80097f8:	4632      	mov	r2, r6
 80097fa:	463b      	mov	r3, r7
 80097fc:	4628      	mov	r0, r5
 80097fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009802:	f000 b8e7 	b.w	80099d4 <_write_r>

08009806 <__sseek>:
 8009806:	b510      	push	{r4, lr}
 8009808:	460c      	mov	r4, r1
 800980a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800980e:	f000 f8bd 	bl	800998c <_lseek_r>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	bf15      	itete	ne
 8009818:	6560      	strne	r0, [r4, #84]	@ 0x54
 800981a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800981e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009822:	81a3      	strheq	r3, [r4, #12]
 8009824:	bf18      	it	ne
 8009826:	81a3      	strhne	r3, [r4, #12]
 8009828:	bd10      	pop	{r4, pc}

0800982a <__sclose>:
 800982a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800982e:	f000 b89d 	b.w	800996c <_close_r>

08009832 <__swbuf_r>:
 8009832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009834:	460e      	mov	r6, r1
 8009836:	4614      	mov	r4, r2
 8009838:	4605      	mov	r5, r0
 800983a:	b118      	cbz	r0, 8009844 <__swbuf_r+0x12>
 800983c:	6a03      	ldr	r3, [r0, #32]
 800983e:	b90b      	cbnz	r3, 8009844 <__swbuf_r+0x12>
 8009840:	f7ff ff0e 	bl	8009660 <__sinit>
 8009844:	69a3      	ldr	r3, [r4, #24]
 8009846:	60a3      	str	r3, [r4, #8]
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	071a      	lsls	r2, r3, #28
 800984c:	d501      	bpl.n	8009852 <__swbuf_r+0x20>
 800984e:	6923      	ldr	r3, [r4, #16]
 8009850:	b943      	cbnz	r3, 8009864 <__swbuf_r+0x32>
 8009852:	4621      	mov	r1, r4
 8009854:	4628      	mov	r0, r5
 8009856:	f000 f82b 	bl	80098b0 <__swsetup_r>
 800985a:	b118      	cbz	r0, 8009864 <__swbuf_r+0x32>
 800985c:	f04f 37ff 	mov.w	r7, #4294967295
 8009860:	4638      	mov	r0, r7
 8009862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	6922      	ldr	r2, [r4, #16]
 8009868:	1a98      	subs	r0, r3, r2
 800986a:	6963      	ldr	r3, [r4, #20]
 800986c:	b2f6      	uxtb	r6, r6
 800986e:	4283      	cmp	r3, r0
 8009870:	4637      	mov	r7, r6
 8009872:	dc05      	bgt.n	8009880 <__swbuf_r+0x4e>
 8009874:	4621      	mov	r1, r4
 8009876:	4628      	mov	r0, r5
 8009878:	f000 fd44 	bl	800a304 <_fflush_r>
 800987c:	2800      	cmp	r0, #0
 800987e:	d1ed      	bne.n	800985c <__swbuf_r+0x2a>
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	3b01      	subs	r3, #1
 8009884:	60a3      	str	r3, [r4, #8]
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	6022      	str	r2, [r4, #0]
 800988c:	701e      	strb	r6, [r3, #0]
 800988e:	6962      	ldr	r2, [r4, #20]
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	429a      	cmp	r2, r3
 8009894:	d004      	beq.n	80098a0 <__swbuf_r+0x6e>
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	07db      	lsls	r3, r3, #31
 800989a:	d5e1      	bpl.n	8009860 <__swbuf_r+0x2e>
 800989c:	2e0a      	cmp	r6, #10
 800989e:	d1df      	bne.n	8009860 <__swbuf_r+0x2e>
 80098a0:	4621      	mov	r1, r4
 80098a2:	4628      	mov	r0, r5
 80098a4:	f000 fd2e 	bl	800a304 <_fflush_r>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d0d9      	beq.n	8009860 <__swbuf_r+0x2e>
 80098ac:	e7d6      	b.n	800985c <__swbuf_r+0x2a>
	...

080098b0 <__swsetup_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4b29      	ldr	r3, [pc, #164]	@ (8009958 <__swsetup_r+0xa8>)
 80098b4:	4605      	mov	r5, r0
 80098b6:	6818      	ldr	r0, [r3, #0]
 80098b8:	460c      	mov	r4, r1
 80098ba:	b118      	cbz	r0, 80098c4 <__swsetup_r+0x14>
 80098bc:	6a03      	ldr	r3, [r0, #32]
 80098be:	b90b      	cbnz	r3, 80098c4 <__swsetup_r+0x14>
 80098c0:	f7ff fece 	bl	8009660 <__sinit>
 80098c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c8:	0719      	lsls	r1, r3, #28
 80098ca:	d422      	bmi.n	8009912 <__swsetup_r+0x62>
 80098cc:	06da      	lsls	r2, r3, #27
 80098ce:	d407      	bmi.n	80098e0 <__swsetup_r+0x30>
 80098d0:	2209      	movs	r2, #9
 80098d2:	602a      	str	r2, [r5, #0]
 80098d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	f04f 30ff 	mov.w	r0, #4294967295
 80098de:	e033      	b.n	8009948 <__swsetup_r+0x98>
 80098e0:	0758      	lsls	r0, r3, #29
 80098e2:	d512      	bpl.n	800990a <__swsetup_r+0x5a>
 80098e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098e6:	b141      	cbz	r1, 80098fa <__swsetup_r+0x4a>
 80098e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098ec:	4299      	cmp	r1, r3
 80098ee:	d002      	beq.n	80098f6 <__swsetup_r+0x46>
 80098f0:	4628      	mov	r0, r5
 80098f2:	f000 f8bd 	bl	8009a70 <_free_r>
 80098f6:	2300      	movs	r3, #0
 80098f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	2300      	movs	r3, #0
 8009904:	6063      	str	r3, [r4, #4]
 8009906:	6923      	ldr	r3, [r4, #16]
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	f043 0308 	orr.w	r3, r3, #8
 8009910:	81a3      	strh	r3, [r4, #12]
 8009912:	6923      	ldr	r3, [r4, #16]
 8009914:	b94b      	cbnz	r3, 800992a <__swsetup_r+0x7a>
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800991c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009920:	d003      	beq.n	800992a <__swsetup_r+0x7a>
 8009922:	4621      	mov	r1, r4
 8009924:	4628      	mov	r0, r5
 8009926:	f000 fd3b 	bl	800a3a0 <__smakebuf_r>
 800992a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992e:	f013 0201 	ands.w	r2, r3, #1
 8009932:	d00a      	beq.n	800994a <__swsetup_r+0x9a>
 8009934:	2200      	movs	r2, #0
 8009936:	60a2      	str	r2, [r4, #8]
 8009938:	6962      	ldr	r2, [r4, #20]
 800993a:	4252      	negs	r2, r2
 800993c:	61a2      	str	r2, [r4, #24]
 800993e:	6922      	ldr	r2, [r4, #16]
 8009940:	b942      	cbnz	r2, 8009954 <__swsetup_r+0xa4>
 8009942:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009946:	d1c5      	bne.n	80098d4 <__swsetup_r+0x24>
 8009948:	bd38      	pop	{r3, r4, r5, pc}
 800994a:	0799      	lsls	r1, r3, #30
 800994c:	bf58      	it	pl
 800994e:	6962      	ldrpl	r2, [r4, #20]
 8009950:	60a2      	str	r2, [r4, #8]
 8009952:	e7f4      	b.n	800993e <__swsetup_r+0x8e>
 8009954:	2000      	movs	r0, #0
 8009956:	e7f7      	b.n	8009948 <__swsetup_r+0x98>
 8009958:	2000001c 	.word	0x2000001c

0800995c <memset>:
 800995c:	4402      	add	r2, r0
 800995e:	4603      	mov	r3, r0
 8009960:	4293      	cmp	r3, r2
 8009962:	d100      	bne.n	8009966 <memset+0xa>
 8009964:	4770      	bx	lr
 8009966:	f803 1b01 	strb.w	r1, [r3], #1
 800996a:	e7f9      	b.n	8009960 <memset+0x4>

0800996c <_close_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d06      	ldr	r5, [pc, #24]	@ (8009988 <_close_r+0x1c>)
 8009970:	2300      	movs	r3, #0
 8009972:	4604      	mov	r4, r0
 8009974:	4608      	mov	r0, r1
 8009976:	602b      	str	r3, [r5, #0]
 8009978:	f7f7 fda5 	bl	80014c6 <_close>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	d102      	bne.n	8009986 <_close_r+0x1a>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	b103      	cbz	r3, 8009986 <_close_r+0x1a>
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	20004c60 	.word	0x20004c60

0800998c <_lseek_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d07      	ldr	r5, [pc, #28]	@ (80099ac <_lseek_r+0x20>)
 8009990:	4604      	mov	r4, r0
 8009992:	4608      	mov	r0, r1
 8009994:	4611      	mov	r1, r2
 8009996:	2200      	movs	r2, #0
 8009998:	602a      	str	r2, [r5, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	f7f7 fdba 	bl	8001514 <_lseek>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_lseek_r+0x1e>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_lseek_r+0x1e>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	20004c60 	.word	0x20004c60

080099b0 <_read_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d07      	ldr	r5, [pc, #28]	@ (80099d0 <_read_r+0x20>)
 80099b4:	4604      	mov	r4, r0
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	602a      	str	r2, [r5, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	f7f7 fd48 	bl	8001454 <_read>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_read_r+0x1e>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_read_r+0x1e>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20004c60 	.word	0x20004c60

080099d4 <_write_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	@ (80099f4 <_write_r+0x20>)
 80099d8:	4604      	mov	r4, r0
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7f7 fd53 	bl	800148e <_write>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_write_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_write_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20004c60 	.word	0x20004c60

080099f8 <__errno>:
 80099f8:	4b01      	ldr	r3, [pc, #4]	@ (8009a00 <__errno+0x8>)
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	2000001c 	.word	0x2000001c

08009a04 <__libc_init_array>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	4d0d      	ldr	r5, [pc, #52]	@ (8009a3c <__libc_init_array+0x38>)
 8009a08:	4c0d      	ldr	r4, [pc, #52]	@ (8009a40 <__libc_init_array+0x3c>)
 8009a0a:	1b64      	subs	r4, r4, r5
 8009a0c:	10a4      	asrs	r4, r4, #2
 8009a0e:	2600      	movs	r6, #0
 8009a10:	42a6      	cmp	r6, r4
 8009a12:	d109      	bne.n	8009a28 <__libc_init_array+0x24>
 8009a14:	4d0b      	ldr	r5, [pc, #44]	@ (8009a44 <__libc_init_array+0x40>)
 8009a16:	4c0c      	ldr	r4, [pc, #48]	@ (8009a48 <__libc_init_array+0x44>)
 8009a18:	f000 fd30 	bl	800a47c <_init>
 8009a1c:	1b64      	subs	r4, r4, r5
 8009a1e:	10a4      	asrs	r4, r4, #2
 8009a20:	2600      	movs	r6, #0
 8009a22:	42a6      	cmp	r6, r4
 8009a24:	d105      	bne.n	8009a32 <__libc_init_array+0x2e>
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
 8009a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a2c:	4798      	blx	r3
 8009a2e:	3601      	adds	r6, #1
 8009a30:	e7ee      	b.n	8009a10 <__libc_init_array+0xc>
 8009a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a36:	4798      	blx	r3
 8009a38:	3601      	adds	r6, #1
 8009a3a:	e7f2      	b.n	8009a22 <__libc_init_array+0x1e>
 8009a3c:	0800a5c8 	.word	0x0800a5c8
 8009a40:	0800a5c8 	.word	0x0800a5c8
 8009a44:	0800a5c8 	.word	0x0800a5c8
 8009a48:	0800a5cc 	.word	0x0800a5cc

08009a4c <__retarget_lock_init_recursive>:
 8009a4c:	4770      	bx	lr

08009a4e <__retarget_lock_acquire_recursive>:
 8009a4e:	4770      	bx	lr

08009a50 <__retarget_lock_release_recursive>:
 8009a50:	4770      	bx	lr

08009a52 <memcpy>:
 8009a52:	440a      	add	r2, r1
 8009a54:	4291      	cmp	r1, r2
 8009a56:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a5a:	d100      	bne.n	8009a5e <memcpy+0xc>
 8009a5c:	4770      	bx	lr
 8009a5e:	b510      	push	{r4, lr}
 8009a60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a68:	4291      	cmp	r1, r2
 8009a6a:	d1f9      	bne.n	8009a60 <memcpy+0xe>
 8009a6c:	bd10      	pop	{r4, pc}
	...

08009a70 <_free_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4605      	mov	r5, r0
 8009a74:	2900      	cmp	r1, #0
 8009a76:	d041      	beq.n	8009afc <_free_r+0x8c>
 8009a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a7c:	1f0c      	subs	r4, r1, #4
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	bfb8      	it	lt
 8009a82:	18e4      	addlt	r4, r4, r3
 8009a84:	f000 f8e0 	bl	8009c48 <__malloc_lock>
 8009a88:	4a1d      	ldr	r2, [pc, #116]	@ (8009b00 <_free_r+0x90>)
 8009a8a:	6813      	ldr	r3, [r2, #0]
 8009a8c:	b933      	cbnz	r3, 8009a9c <_free_r+0x2c>
 8009a8e:	6063      	str	r3, [r4, #4]
 8009a90:	6014      	str	r4, [r2, #0]
 8009a92:	4628      	mov	r0, r5
 8009a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a98:	f000 b8dc 	b.w	8009c54 <__malloc_unlock>
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	d908      	bls.n	8009ab2 <_free_r+0x42>
 8009aa0:	6820      	ldr	r0, [r4, #0]
 8009aa2:	1821      	adds	r1, r4, r0
 8009aa4:	428b      	cmp	r3, r1
 8009aa6:	bf01      	itttt	eq
 8009aa8:	6819      	ldreq	r1, [r3, #0]
 8009aaa:	685b      	ldreq	r3, [r3, #4]
 8009aac:	1809      	addeq	r1, r1, r0
 8009aae:	6021      	streq	r1, [r4, #0]
 8009ab0:	e7ed      	b.n	8009a8e <_free_r+0x1e>
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	b10b      	cbz	r3, 8009abc <_free_r+0x4c>
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	d9fa      	bls.n	8009ab2 <_free_r+0x42>
 8009abc:	6811      	ldr	r1, [r2, #0]
 8009abe:	1850      	adds	r0, r2, r1
 8009ac0:	42a0      	cmp	r0, r4
 8009ac2:	d10b      	bne.n	8009adc <_free_r+0x6c>
 8009ac4:	6820      	ldr	r0, [r4, #0]
 8009ac6:	4401      	add	r1, r0
 8009ac8:	1850      	adds	r0, r2, r1
 8009aca:	4283      	cmp	r3, r0
 8009acc:	6011      	str	r1, [r2, #0]
 8009ace:	d1e0      	bne.n	8009a92 <_free_r+0x22>
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	6053      	str	r3, [r2, #4]
 8009ad6:	4408      	add	r0, r1
 8009ad8:	6010      	str	r0, [r2, #0]
 8009ada:	e7da      	b.n	8009a92 <_free_r+0x22>
 8009adc:	d902      	bls.n	8009ae4 <_free_r+0x74>
 8009ade:	230c      	movs	r3, #12
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	e7d6      	b.n	8009a92 <_free_r+0x22>
 8009ae4:	6820      	ldr	r0, [r4, #0]
 8009ae6:	1821      	adds	r1, r4, r0
 8009ae8:	428b      	cmp	r3, r1
 8009aea:	bf04      	itt	eq
 8009aec:	6819      	ldreq	r1, [r3, #0]
 8009aee:	685b      	ldreq	r3, [r3, #4]
 8009af0:	6063      	str	r3, [r4, #4]
 8009af2:	bf04      	itt	eq
 8009af4:	1809      	addeq	r1, r1, r0
 8009af6:	6021      	streq	r1, [r4, #0]
 8009af8:	6054      	str	r4, [r2, #4]
 8009afa:	e7ca      	b.n	8009a92 <_free_r+0x22>
 8009afc:	bd38      	pop	{r3, r4, r5, pc}
 8009afe:	bf00      	nop
 8009b00:	20004c6c 	.word	0x20004c6c

08009b04 <sbrk_aligned>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	4e0f      	ldr	r6, [pc, #60]	@ (8009b44 <sbrk_aligned+0x40>)
 8009b08:	460c      	mov	r4, r1
 8009b0a:	6831      	ldr	r1, [r6, #0]
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	b911      	cbnz	r1, 8009b16 <sbrk_aligned+0x12>
 8009b10:	f000 fca4 	bl	800a45c <_sbrk_r>
 8009b14:	6030      	str	r0, [r6, #0]
 8009b16:	4621      	mov	r1, r4
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f000 fc9f 	bl	800a45c <_sbrk_r>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	d103      	bne.n	8009b2a <sbrk_aligned+0x26>
 8009b22:	f04f 34ff 	mov.w	r4, #4294967295
 8009b26:	4620      	mov	r0, r4
 8009b28:	bd70      	pop	{r4, r5, r6, pc}
 8009b2a:	1cc4      	adds	r4, r0, #3
 8009b2c:	f024 0403 	bic.w	r4, r4, #3
 8009b30:	42a0      	cmp	r0, r4
 8009b32:	d0f8      	beq.n	8009b26 <sbrk_aligned+0x22>
 8009b34:	1a21      	subs	r1, r4, r0
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 fc90 	bl	800a45c <_sbrk_r>
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d1f2      	bne.n	8009b26 <sbrk_aligned+0x22>
 8009b40:	e7ef      	b.n	8009b22 <sbrk_aligned+0x1e>
 8009b42:	bf00      	nop
 8009b44:	20004c68 	.word	0x20004c68

08009b48 <_malloc_r>:
 8009b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b4c:	1ccd      	adds	r5, r1, #3
 8009b4e:	f025 0503 	bic.w	r5, r5, #3
 8009b52:	3508      	adds	r5, #8
 8009b54:	2d0c      	cmp	r5, #12
 8009b56:	bf38      	it	cc
 8009b58:	250c      	movcc	r5, #12
 8009b5a:	2d00      	cmp	r5, #0
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	db01      	blt.n	8009b64 <_malloc_r+0x1c>
 8009b60:	42a9      	cmp	r1, r5
 8009b62:	d904      	bls.n	8009b6e <_malloc_r+0x26>
 8009b64:	230c      	movs	r3, #12
 8009b66:	6033      	str	r3, [r6, #0]
 8009b68:	2000      	movs	r0, #0
 8009b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c44 <_malloc_r+0xfc>
 8009b72:	f000 f869 	bl	8009c48 <__malloc_lock>
 8009b76:	f8d8 3000 	ldr.w	r3, [r8]
 8009b7a:	461c      	mov	r4, r3
 8009b7c:	bb44      	cbnz	r4, 8009bd0 <_malloc_r+0x88>
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4630      	mov	r0, r6
 8009b82:	f7ff ffbf 	bl	8009b04 <sbrk_aligned>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	4604      	mov	r4, r0
 8009b8a:	d158      	bne.n	8009c3e <_malloc_r+0xf6>
 8009b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8009b90:	4627      	mov	r7, r4
 8009b92:	2f00      	cmp	r7, #0
 8009b94:	d143      	bne.n	8009c1e <_malloc_r+0xd6>
 8009b96:	2c00      	cmp	r4, #0
 8009b98:	d04b      	beq.n	8009c32 <_malloc_r+0xea>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	eb04 0903 	add.w	r9, r4, r3
 8009ba4:	f000 fc5a 	bl	800a45c <_sbrk_r>
 8009ba8:	4581      	cmp	r9, r0
 8009baa:	d142      	bne.n	8009c32 <_malloc_r+0xea>
 8009bac:	6821      	ldr	r1, [r4, #0]
 8009bae:	1a6d      	subs	r5, r5, r1
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7ff ffa6 	bl	8009b04 <sbrk_aligned>
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d03a      	beq.n	8009c32 <_malloc_r+0xea>
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	442b      	add	r3, r5
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	bb62      	cbnz	r2, 8009c24 <_malloc_r+0xdc>
 8009bca:	f8c8 7000 	str.w	r7, [r8]
 8009bce:	e00f      	b.n	8009bf0 <_malloc_r+0xa8>
 8009bd0:	6822      	ldr	r2, [r4, #0]
 8009bd2:	1b52      	subs	r2, r2, r5
 8009bd4:	d420      	bmi.n	8009c18 <_malloc_r+0xd0>
 8009bd6:	2a0b      	cmp	r2, #11
 8009bd8:	d917      	bls.n	8009c0a <_malloc_r+0xc2>
 8009bda:	1961      	adds	r1, r4, r5
 8009bdc:	42a3      	cmp	r3, r4
 8009bde:	6025      	str	r5, [r4, #0]
 8009be0:	bf18      	it	ne
 8009be2:	6059      	strne	r1, [r3, #4]
 8009be4:	6863      	ldr	r3, [r4, #4]
 8009be6:	bf08      	it	eq
 8009be8:	f8c8 1000 	streq.w	r1, [r8]
 8009bec:	5162      	str	r2, [r4, r5]
 8009bee:	604b      	str	r3, [r1, #4]
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	f000 f82f 	bl	8009c54 <__malloc_unlock>
 8009bf6:	f104 000b 	add.w	r0, r4, #11
 8009bfa:	1d23      	adds	r3, r4, #4
 8009bfc:	f020 0007 	bic.w	r0, r0, #7
 8009c00:	1ac2      	subs	r2, r0, r3
 8009c02:	bf1c      	itt	ne
 8009c04:	1a1b      	subne	r3, r3, r0
 8009c06:	50a3      	strne	r3, [r4, r2]
 8009c08:	e7af      	b.n	8009b6a <_malloc_r+0x22>
 8009c0a:	6862      	ldr	r2, [r4, #4]
 8009c0c:	42a3      	cmp	r3, r4
 8009c0e:	bf0c      	ite	eq
 8009c10:	f8c8 2000 	streq.w	r2, [r8]
 8009c14:	605a      	strne	r2, [r3, #4]
 8009c16:	e7eb      	b.n	8009bf0 <_malloc_r+0xa8>
 8009c18:	4623      	mov	r3, r4
 8009c1a:	6864      	ldr	r4, [r4, #4]
 8009c1c:	e7ae      	b.n	8009b7c <_malloc_r+0x34>
 8009c1e:	463c      	mov	r4, r7
 8009c20:	687f      	ldr	r7, [r7, #4]
 8009c22:	e7b6      	b.n	8009b92 <_malloc_r+0x4a>
 8009c24:	461a      	mov	r2, r3
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	42a3      	cmp	r3, r4
 8009c2a:	d1fb      	bne.n	8009c24 <_malloc_r+0xdc>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	6053      	str	r3, [r2, #4]
 8009c30:	e7de      	b.n	8009bf0 <_malloc_r+0xa8>
 8009c32:	230c      	movs	r3, #12
 8009c34:	6033      	str	r3, [r6, #0]
 8009c36:	4630      	mov	r0, r6
 8009c38:	f000 f80c 	bl	8009c54 <__malloc_unlock>
 8009c3c:	e794      	b.n	8009b68 <_malloc_r+0x20>
 8009c3e:	6005      	str	r5, [r0, #0]
 8009c40:	e7d6      	b.n	8009bf0 <_malloc_r+0xa8>
 8009c42:	bf00      	nop
 8009c44:	20004c6c 	.word	0x20004c6c

08009c48 <__malloc_lock>:
 8009c48:	4801      	ldr	r0, [pc, #4]	@ (8009c50 <__malloc_lock+0x8>)
 8009c4a:	f7ff bf00 	b.w	8009a4e <__retarget_lock_acquire_recursive>
 8009c4e:	bf00      	nop
 8009c50:	20004c64 	.word	0x20004c64

08009c54 <__malloc_unlock>:
 8009c54:	4801      	ldr	r0, [pc, #4]	@ (8009c5c <__malloc_unlock+0x8>)
 8009c56:	f7ff befb 	b.w	8009a50 <__retarget_lock_release_recursive>
 8009c5a:	bf00      	nop
 8009c5c:	20004c64 	.word	0x20004c64

08009c60 <__sfputc_r>:
 8009c60:	6893      	ldr	r3, [r2, #8]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	b410      	push	{r4}
 8009c68:	6093      	str	r3, [r2, #8]
 8009c6a:	da08      	bge.n	8009c7e <__sfputc_r+0x1e>
 8009c6c:	6994      	ldr	r4, [r2, #24]
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	db01      	blt.n	8009c76 <__sfputc_r+0x16>
 8009c72:	290a      	cmp	r1, #10
 8009c74:	d103      	bne.n	8009c7e <__sfputc_r+0x1e>
 8009c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c7a:	f7ff bdda 	b.w	8009832 <__swbuf_r>
 8009c7e:	6813      	ldr	r3, [r2, #0]
 8009c80:	1c58      	adds	r0, r3, #1
 8009c82:	6010      	str	r0, [r2, #0]
 8009c84:	7019      	strb	r1, [r3, #0]
 8009c86:	4608      	mov	r0, r1
 8009c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <__sfputs_r>:
 8009c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c90:	4606      	mov	r6, r0
 8009c92:	460f      	mov	r7, r1
 8009c94:	4614      	mov	r4, r2
 8009c96:	18d5      	adds	r5, r2, r3
 8009c98:	42ac      	cmp	r4, r5
 8009c9a:	d101      	bne.n	8009ca0 <__sfputs_r+0x12>
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	e007      	b.n	8009cb0 <__sfputs_r+0x22>
 8009ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca4:	463a      	mov	r2, r7
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f7ff ffda 	bl	8009c60 <__sfputc_r>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d1f3      	bne.n	8009c98 <__sfputs_r+0xa>
 8009cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cb4 <_vfiprintf_r>:
 8009cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb8:	460d      	mov	r5, r1
 8009cba:	b09d      	sub	sp, #116	@ 0x74
 8009cbc:	4614      	mov	r4, r2
 8009cbe:	4698      	mov	r8, r3
 8009cc0:	4606      	mov	r6, r0
 8009cc2:	b118      	cbz	r0, 8009ccc <_vfiprintf_r+0x18>
 8009cc4:	6a03      	ldr	r3, [r0, #32]
 8009cc6:	b90b      	cbnz	r3, 8009ccc <_vfiprintf_r+0x18>
 8009cc8:	f7ff fcca 	bl	8009660 <__sinit>
 8009ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cce:	07d9      	lsls	r1, r3, #31
 8009cd0:	d405      	bmi.n	8009cde <_vfiprintf_r+0x2a>
 8009cd2:	89ab      	ldrh	r3, [r5, #12]
 8009cd4:	059a      	lsls	r2, r3, #22
 8009cd6:	d402      	bmi.n	8009cde <_vfiprintf_r+0x2a>
 8009cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cda:	f7ff feb8 	bl	8009a4e <__retarget_lock_acquire_recursive>
 8009cde:	89ab      	ldrh	r3, [r5, #12]
 8009ce0:	071b      	lsls	r3, r3, #28
 8009ce2:	d501      	bpl.n	8009ce8 <_vfiprintf_r+0x34>
 8009ce4:	692b      	ldr	r3, [r5, #16]
 8009ce6:	b99b      	cbnz	r3, 8009d10 <_vfiprintf_r+0x5c>
 8009ce8:	4629      	mov	r1, r5
 8009cea:	4630      	mov	r0, r6
 8009cec:	f7ff fde0 	bl	80098b0 <__swsetup_r>
 8009cf0:	b170      	cbz	r0, 8009d10 <_vfiprintf_r+0x5c>
 8009cf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cf4:	07dc      	lsls	r4, r3, #31
 8009cf6:	d504      	bpl.n	8009d02 <_vfiprintf_r+0x4e>
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfc:	b01d      	add	sp, #116	@ 0x74
 8009cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	0598      	lsls	r0, r3, #22
 8009d06:	d4f7      	bmi.n	8009cf8 <_vfiprintf_r+0x44>
 8009d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d0a:	f7ff fea1 	bl	8009a50 <__retarget_lock_release_recursive>
 8009d0e:	e7f3      	b.n	8009cf8 <_vfiprintf_r+0x44>
 8009d10:	2300      	movs	r3, #0
 8009d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d14:	2320      	movs	r3, #32
 8009d16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1e:	2330      	movs	r3, #48	@ 0x30
 8009d20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ed0 <_vfiprintf_r+0x21c>
 8009d24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d28:	f04f 0901 	mov.w	r9, #1
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	469a      	mov	sl, r3
 8009d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d34:	b10a      	cbz	r2, 8009d3a <_vfiprintf_r+0x86>
 8009d36:	2a25      	cmp	r2, #37	@ 0x25
 8009d38:	d1f9      	bne.n	8009d2e <_vfiprintf_r+0x7a>
 8009d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3e:	d00b      	beq.n	8009d58 <_vfiprintf_r+0xa4>
 8009d40:	465b      	mov	r3, fp
 8009d42:	4622      	mov	r2, r4
 8009d44:	4629      	mov	r1, r5
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff ffa1 	bl	8009c8e <__sfputs_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	f000 80a7 	beq.w	8009ea0 <_vfiprintf_r+0x1ec>
 8009d52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d54:	445a      	add	r2, fp
 8009d56:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d58:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 809f 	beq.w	8009ea0 <_vfiprintf_r+0x1ec>
 8009d62:	2300      	movs	r3, #0
 8009d64:	f04f 32ff 	mov.w	r2, #4294967295
 8009d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6c:	f10a 0a01 	add.w	sl, sl, #1
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	9307      	str	r3, [sp, #28]
 8009d74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d78:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d7a:	4654      	mov	r4, sl
 8009d7c:	2205      	movs	r2, #5
 8009d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d82:	4853      	ldr	r0, [pc, #332]	@ (8009ed0 <_vfiprintf_r+0x21c>)
 8009d84:	f7f6 fa4c 	bl	8000220 <memchr>
 8009d88:	9a04      	ldr	r2, [sp, #16]
 8009d8a:	b9d8      	cbnz	r0, 8009dc4 <_vfiprintf_r+0x110>
 8009d8c:	06d1      	lsls	r1, r2, #27
 8009d8e:	bf44      	itt	mi
 8009d90:	2320      	movmi	r3, #32
 8009d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d96:	0713      	lsls	r3, r2, #28
 8009d98:	bf44      	itt	mi
 8009d9a:	232b      	movmi	r3, #43	@ 0x2b
 8009d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009da0:	f89a 3000 	ldrb.w	r3, [sl]
 8009da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009da6:	d015      	beq.n	8009dd4 <_vfiprintf_r+0x120>
 8009da8:	9a07      	ldr	r2, [sp, #28]
 8009daa:	4654      	mov	r4, sl
 8009dac:	2000      	movs	r0, #0
 8009dae:	f04f 0c0a 	mov.w	ip, #10
 8009db2:	4621      	mov	r1, r4
 8009db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db8:	3b30      	subs	r3, #48	@ 0x30
 8009dba:	2b09      	cmp	r3, #9
 8009dbc:	d94b      	bls.n	8009e56 <_vfiprintf_r+0x1a2>
 8009dbe:	b1b0      	cbz	r0, 8009dee <_vfiprintf_r+0x13a>
 8009dc0:	9207      	str	r2, [sp, #28]
 8009dc2:	e014      	b.n	8009dee <_vfiprintf_r+0x13a>
 8009dc4:	eba0 0308 	sub.w	r3, r0, r8
 8009dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	46a2      	mov	sl, r4
 8009dd2:	e7d2      	b.n	8009d7a <_vfiprintf_r+0xc6>
 8009dd4:	9b03      	ldr	r3, [sp, #12]
 8009dd6:	1d19      	adds	r1, r3, #4
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	9103      	str	r1, [sp, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bfbb      	ittet	lt
 8009de0:	425b      	neglt	r3, r3
 8009de2:	f042 0202 	orrlt.w	r2, r2, #2
 8009de6:	9307      	strge	r3, [sp, #28]
 8009de8:	9307      	strlt	r3, [sp, #28]
 8009dea:	bfb8      	it	lt
 8009dec:	9204      	strlt	r2, [sp, #16]
 8009dee:	7823      	ldrb	r3, [r4, #0]
 8009df0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009df2:	d10a      	bne.n	8009e0a <_vfiprintf_r+0x156>
 8009df4:	7863      	ldrb	r3, [r4, #1]
 8009df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009df8:	d132      	bne.n	8009e60 <_vfiprintf_r+0x1ac>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	1d1a      	adds	r2, r3, #4
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	9203      	str	r2, [sp, #12]
 8009e02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e06:	3402      	adds	r4, #2
 8009e08:	9305      	str	r3, [sp, #20]
 8009e0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ee0 <_vfiprintf_r+0x22c>
 8009e0e:	7821      	ldrb	r1, [r4, #0]
 8009e10:	2203      	movs	r2, #3
 8009e12:	4650      	mov	r0, sl
 8009e14:	f7f6 fa04 	bl	8000220 <memchr>
 8009e18:	b138      	cbz	r0, 8009e2a <_vfiprintf_r+0x176>
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	eba0 000a 	sub.w	r0, r0, sl
 8009e20:	2240      	movs	r2, #64	@ 0x40
 8009e22:	4082      	lsls	r2, r0
 8009e24:	4313      	orrs	r3, r2
 8009e26:	3401      	adds	r4, #1
 8009e28:	9304      	str	r3, [sp, #16]
 8009e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2e:	4829      	ldr	r0, [pc, #164]	@ (8009ed4 <_vfiprintf_r+0x220>)
 8009e30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e34:	2206      	movs	r2, #6
 8009e36:	f7f6 f9f3 	bl	8000220 <memchr>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d03f      	beq.n	8009ebe <_vfiprintf_r+0x20a>
 8009e3e:	4b26      	ldr	r3, [pc, #152]	@ (8009ed8 <_vfiprintf_r+0x224>)
 8009e40:	bb1b      	cbnz	r3, 8009e8a <_vfiprintf_r+0x1d6>
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	3307      	adds	r3, #7
 8009e46:	f023 0307 	bic.w	r3, r3, #7
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	9303      	str	r3, [sp, #12]
 8009e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e50:	443b      	add	r3, r7
 8009e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e54:	e76a      	b.n	8009d2c <_vfiprintf_r+0x78>
 8009e56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	e7a8      	b.n	8009db2 <_vfiprintf_r+0xfe>
 8009e60:	2300      	movs	r3, #0
 8009e62:	3401      	adds	r4, #1
 8009e64:	9305      	str	r3, [sp, #20]
 8009e66:	4619      	mov	r1, r3
 8009e68:	f04f 0c0a 	mov.w	ip, #10
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e72:	3a30      	subs	r2, #48	@ 0x30
 8009e74:	2a09      	cmp	r2, #9
 8009e76:	d903      	bls.n	8009e80 <_vfiprintf_r+0x1cc>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d0c6      	beq.n	8009e0a <_vfiprintf_r+0x156>
 8009e7c:	9105      	str	r1, [sp, #20]
 8009e7e:	e7c4      	b.n	8009e0a <_vfiprintf_r+0x156>
 8009e80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e84:	4604      	mov	r4, r0
 8009e86:	2301      	movs	r3, #1
 8009e88:	e7f0      	b.n	8009e6c <_vfiprintf_r+0x1b8>
 8009e8a:	ab03      	add	r3, sp, #12
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	462a      	mov	r2, r5
 8009e90:	4b12      	ldr	r3, [pc, #72]	@ (8009edc <_vfiprintf_r+0x228>)
 8009e92:	a904      	add	r1, sp, #16
 8009e94:	4630      	mov	r0, r6
 8009e96:	f3af 8000 	nop.w
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	1c78      	adds	r0, r7, #1
 8009e9e:	d1d6      	bne.n	8009e4e <_vfiprintf_r+0x19a>
 8009ea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ea2:	07d9      	lsls	r1, r3, #31
 8009ea4:	d405      	bmi.n	8009eb2 <_vfiprintf_r+0x1fe>
 8009ea6:	89ab      	ldrh	r3, [r5, #12]
 8009ea8:	059a      	lsls	r2, r3, #22
 8009eaa:	d402      	bmi.n	8009eb2 <_vfiprintf_r+0x1fe>
 8009eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eae:	f7ff fdcf 	bl	8009a50 <__retarget_lock_release_recursive>
 8009eb2:	89ab      	ldrh	r3, [r5, #12]
 8009eb4:	065b      	lsls	r3, r3, #25
 8009eb6:	f53f af1f 	bmi.w	8009cf8 <_vfiprintf_r+0x44>
 8009eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ebc:	e71e      	b.n	8009cfc <_vfiprintf_r+0x48>
 8009ebe:	ab03      	add	r3, sp, #12
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	462a      	mov	r2, r5
 8009ec4:	4b05      	ldr	r3, [pc, #20]	@ (8009edc <_vfiprintf_r+0x228>)
 8009ec6:	a904      	add	r1, sp, #16
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f000 f879 	bl	8009fc0 <_printf_i>
 8009ece:	e7e4      	b.n	8009e9a <_vfiprintf_r+0x1e6>
 8009ed0:	0800a58c 	.word	0x0800a58c
 8009ed4:	0800a596 	.word	0x0800a596
 8009ed8:	00000000 	.word	0x00000000
 8009edc:	08009c8f 	.word	0x08009c8f
 8009ee0:	0800a592 	.word	0x0800a592

08009ee4 <_printf_common>:
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	4616      	mov	r6, r2
 8009eea:	4698      	mov	r8, r3
 8009eec:	688a      	ldr	r2, [r1, #8]
 8009eee:	690b      	ldr	r3, [r1, #16]
 8009ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	bfb8      	it	lt
 8009ef8:	4613      	movlt	r3, r2
 8009efa:	6033      	str	r3, [r6, #0]
 8009efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f00:	4607      	mov	r7, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	b10a      	cbz	r2, 8009f0a <_printf_common+0x26>
 8009f06:	3301      	adds	r3, #1
 8009f08:	6033      	str	r3, [r6, #0]
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	0699      	lsls	r1, r3, #26
 8009f0e:	bf42      	ittt	mi
 8009f10:	6833      	ldrmi	r3, [r6, #0]
 8009f12:	3302      	addmi	r3, #2
 8009f14:	6033      	strmi	r3, [r6, #0]
 8009f16:	6825      	ldr	r5, [r4, #0]
 8009f18:	f015 0506 	ands.w	r5, r5, #6
 8009f1c:	d106      	bne.n	8009f2c <_printf_common+0x48>
 8009f1e:	f104 0a19 	add.w	sl, r4, #25
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	6832      	ldr	r2, [r6, #0]
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dc26      	bgt.n	8009f7a <_printf_common+0x96>
 8009f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f30:	6822      	ldr	r2, [r4, #0]
 8009f32:	3b00      	subs	r3, #0
 8009f34:	bf18      	it	ne
 8009f36:	2301      	movne	r3, #1
 8009f38:	0692      	lsls	r2, r2, #26
 8009f3a:	d42b      	bmi.n	8009f94 <_printf_common+0xb0>
 8009f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f40:	4641      	mov	r1, r8
 8009f42:	4638      	mov	r0, r7
 8009f44:	47c8      	blx	r9
 8009f46:	3001      	adds	r0, #1
 8009f48:	d01e      	beq.n	8009f88 <_printf_common+0xa4>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	6922      	ldr	r2, [r4, #16]
 8009f4e:	f003 0306 	and.w	r3, r3, #6
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	bf02      	ittt	eq
 8009f56:	68e5      	ldreq	r5, [r4, #12]
 8009f58:	6833      	ldreq	r3, [r6, #0]
 8009f5a:	1aed      	subeq	r5, r5, r3
 8009f5c:	68a3      	ldr	r3, [r4, #8]
 8009f5e:	bf0c      	ite	eq
 8009f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f64:	2500      	movne	r5, #0
 8009f66:	4293      	cmp	r3, r2
 8009f68:	bfc4      	itt	gt
 8009f6a:	1a9b      	subgt	r3, r3, r2
 8009f6c:	18ed      	addgt	r5, r5, r3
 8009f6e:	2600      	movs	r6, #0
 8009f70:	341a      	adds	r4, #26
 8009f72:	42b5      	cmp	r5, r6
 8009f74:	d11a      	bne.n	8009fac <_printf_common+0xc8>
 8009f76:	2000      	movs	r0, #0
 8009f78:	e008      	b.n	8009f8c <_printf_common+0xa8>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4652      	mov	r2, sl
 8009f7e:	4641      	mov	r1, r8
 8009f80:	4638      	mov	r0, r7
 8009f82:	47c8      	blx	r9
 8009f84:	3001      	adds	r0, #1
 8009f86:	d103      	bne.n	8009f90 <_printf_common+0xac>
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f90:	3501      	adds	r5, #1
 8009f92:	e7c6      	b.n	8009f22 <_printf_common+0x3e>
 8009f94:	18e1      	adds	r1, r4, r3
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	2030      	movs	r0, #48	@ 0x30
 8009f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f9e:	4422      	add	r2, r4
 8009fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fa8:	3302      	adds	r3, #2
 8009faa:	e7c7      	b.n	8009f3c <_printf_common+0x58>
 8009fac:	2301      	movs	r3, #1
 8009fae:	4622      	mov	r2, r4
 8009fb0:	4641      	mov	r1, r8
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	47c8      	blx	r9
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	d0e6      	beq.n	8009f88 <_printf_common+0xa4>
 8009fba:	3601      	adds	r6, #1
 8009fbc:	e7d9      	b.n	8009f72 <_printf_common+0x8e>
	...

08009fc0 <_printf_i>:
 8009fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc4:	7e0f      	ldrb	r7, [r1, #24]
 8009fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fc8:	2f78      	cmp	r7, #120	@ 0x78
 8009fca:	4691      	mov	r9, r2
 8009fcc:	4680      	mov	r8, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	469a      	mov	sl, r3
 8009fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fd6:	d807      	bhi.n	8009fe8 <_printf_i+0x28>
 8009fd8:	2f62      	cmp	r7, #98	@ 0x62
 8009fda:	d80a      	bhi.n	8009ff2 <_printf_i+0x32>
 8009fdc:	2f00      	cmp	r7, #0
 8009fde:	f000 80d1 	beq.w	800a184 <_printf_i+0x1c4>
 8009fe2:	2f58      	cmp	r7, #88	@ 0x58
 8009fe4:	f000 80b8 	beq.w	800a158 <_printf_i+0x198>
 8009fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ff0:	e03a      	b.n	800a068 <_printf_i+0xa8>
 8009ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ff6:	2b15      	cmp	r3, #21
 8009ff8:	d8f6      	bhi.n	8009fe8 <_printf_i+0x28>
 8009ffa:	a101      	add	r1, pc, #4	@ (adr r1, 800a000 <_printf_i+0x40>)
 8009ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a06d 	.word	0x0800a06d
 800a008:	08009fe9 	.word	0x08009fe9
 800a00c:	08009fe9 	.word	0x08009fe9
 800a010:	08009fe9 	.word	0x08009fe9
 800a014:	08009fe9 	.word	0x08009fe9
 800a018:	0800a06d 	.word	0x0800a06d
 800a01c:	08009fe9 	.word	0x08009fe9
 800a020:	08009fe9 	.word	0x08009fe9
 800a024:	08009fe9 	.word	0x08009fe9
 800a028:	08009fe9 	.word	0x08009fe9
 800a02c:	0800a16b 	.word	0x0800a16b
 800a030:	0800a097 	.word	0x0800a097
 800a034:	0800a125 	.word	0x0800a125
 800a038:	08009fe9 	.word	0x08009fe9
 800a03c:	08009fe9 	.word	0x08009fe9
 800a040:	0800a18d 	.word	0x0800a18d
 800a044:	08009fe9 	.word	0x08009fe9
 800a048:	0800a097 	.word	0x0800a097
 800a04c:	08009fe9 	.word	0x08009fe9
 800a050:	08009fe9 	.word	0x08009fe9
 800a054:	0800a12d 	.word	0x0800a12d
 800a058:	6833      	ldr	r3, [r6, #0]
 800a05a:	1d1a      	adds	r2, r3, #4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	6032      	str	r2, [r6, #0]
 800a060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a068:	2301      	movs	r3, #1
 800a06a:	e09c      	b.n	800a1a6 <_printf_i+0x1e6>
 800a06c:	6833      	ldr	r3, [r6, #0]
 800a06e:	6820      	ldr	r0, [r4, #0]
 800a070:	1d19      	adds	r1, r3, #4
 800a072:	6031      	str	r1, [r6, #0]
 800a074:	0606      	lsls	r6, r0, #24
 800a076:	d501      	bpl.n	800a07c <_printf_i+0xbc>
 800a078:	681d      	ldr	r5, [r3, #0]
 800a07a:	e003      	b.n	800a084 <_printf_i+0xc4>
 800a07c:	0645      	lsls	r5, r0, #25
 800a07e:	d5fb      	bpl.n	800a078 <_printf_i+0xb8>
 800a080:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a084:	2d00      	cmp	r5, #0
 800a086:	da03      	bge.n	800a090 <_printf_i+0xd0>
 800a088:	232d      	movs	r3, #45	@ 0x2d
 800a08a:	426d      	negs	r5, r5
 800a08c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a090:	4858      	ldr	r0, [pc, #352]	@ (800a1f4 <_printf_i+0x234>)
 800a092:	230a      	movs	r3, #10
 800a094:	e011      	b.n	800a0ba <_printf_i+0xfa>
 800a096:	6821      	ldr	r1, [r4, #0]
 800a098:	6833      	ldr	r3, [r6, #0]
 800a09a:	0608      	lsls	r0, r1, #24
 800a09c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0a0:	d402      	bmi.n	800a0a8 <_printf_i+0xe8>
 800a0a2:	0649      	lsls	r1, r1, #25
 800a0a4:	bf48      	it	mi
 800a0a6:	b2ad      	uxthmi	r5, r5
 800a0a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0aa:	4852      	ldr	r0, [pc, #328]	@ (800a1f4 <_printf_i+0x234>)
 800a0ac:	6033      	str	r3, [r6, #0]
 800a0ae:	bf14      	ite	ne
 800a0b0:	230a      	movne	r3, #10
 800a0b2:	2308      	moveq	r3, #8
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0ba:	6866      	ldr	r6, [r4, #4]
 800a0bc:	60a6      	str	r6, [r4, #8]
 800a0be:	2e00      	cmp	r6, #0
 800a0c0:	db05      	blt.n	800a0ce <_printf_i+0x10e>
 800a0c2:	6821      	ldr	r1, [r4, #0]
 800a0c4:	432e      	orrs	r6, r5
 800a0c6:	f021 0104 	bic.w	r1, r1, #4
 800a0ca:	6021      	str	r1, [r4, #0]
 800a0cc:	d04b      	beq.n	800a166 <_printf_i+0x1a6>
 800a0ce:	4616      	mov	r6, r2
 800a0d0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0d4:	fb03 5711 	mls	r7, r3, r1, r5
 800a0d8:	5dc7      	ldrb	r7, [r0, r7]
 800a0da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0de:	462f      	mov	r7, r5
 800a0e0:	42bb      	cmp	r3, r7
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	d9f4      	bls.n	800a0d0 <_printf_i+0x110>
 800a0e6:	2b08      	cmp	r3, #8
 800a0e8:	d10b      	bne.n	800a102 <_printf_i+0x142>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	07df      	lsls	r7, r3, #31
 800a0ee:	d508      	bpl.n	800a102 <_printf_i+0x142>
 800a0f0:	6923      	ldr	r3, [r4, #16]
 800a0f2:	6861      	ldr	r1, [r4, #4]
 800a0f4:	4299      	cmp	r1, r3
 800a0f6:	bfde      	ittt	le
 800a0f8:	2330      	movle	r3, #48	@ 0x30
 800a0fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a102:	1b92      	subs	r2, r2, r6
 800a104:	6122      	str	r2, [r4, #16]
 800a106:	f8cd a000 	str.w	sl, [sp]
 800a10a:	464b      	mov	r3, r9
 800a10c:	aa03      	add	r2, sp, #12
 800a10e:	4621      	mov	r1, r4
 800a110:	4640      	mov	r0, r8
 800a112:	f7ff fee7 	bl	8009ee4 <_printf_common>
 800a116:	3001      	adds	r0, #1
 800a118:	d14a      	bne.n	800a1b0 <_printf_i+0x1f0>
 800a11a:	f04f 30ff 	mov.w	r0, #4294967295
 800a11e:	b004      	add	sp, #16
 800a120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	f043 0320 	orr.w	r3, r3, #32
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	4832      	ldr	r0, [pc, #200]	@ (800a1f8 <_printf_i+0x238>)
 800a12e:	2778      	movs	r7, #120	@ 0x78
 800a130:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	6831      	ldr	r1, [r6, #0]
 800a138:	061f      	lsls	r7, r3, #24
 800a13a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a13e:	d402      	bmi.n	800a146 <_printf_i+0x186>
 800a140:	065f      	lsls	r7, r3, #25
 800a142:	bf48      	it	mi
 800a144:	b2ad      	uxthmi	r5, r5
 800a146:	6031      	str	r1, [r6, #0]
 800a148:	07d9      	lsls	r1, r3, #31
 800a14a:	bf44      	itt	mi
 800a14c:	f043 0320 	orrmi.w	r3, r3, #32
 800a150:	6023      	strmi	r3, [r4, #0]
 800a152:	b11d      	cbz	r5, 800a15c <_printf_i+0x19c>
 800a154:	2310      	movs	r3, #16
 800a156:	e7ad      	b.n	800a0b4 <_printf_i+0xf4>
 800a158:	4826      	ldr	r0, [pc, #152]	@ (800a1f4 <_printf_i+0x234>)
 800a15a:	e7e9      	b.n	800a130 <_printf_i+0x170>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	f023 0320 	bic.w	r3, r3, #32
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	e7f6      	b.n	800a154 <_printf_i+0x194>
 800a166:	4616      	mov	r6, r2
 800a168:	e7bd      	b.n	800a0e6 <_printf_i+0x126>
 800a16a:	6833      	ldr	r3, [r6, #0]
 800a16c:	6825      	ldr	r5, [r4, #0]
 800a16e:	6961      	ldr	r1, [r4, #20]
 800a170:	1d18      	adds	r0, r3, #4
 800a172:	6030      	str	r0, [r6, #0]
 800a174:	062e      	lsls	r6, r5, #24
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	d501      	bpl.n	800a17e <_printf_i+0x1be>
 800a17a:	6019      	str	r1, [r3, #0]
 800a17c:	e002      	b.n	800a184 <_printf_i+0x1c4>
 800a17e:	0668      	lsls	r0, r5, #25
 800a180:	d5fb      	bpl.n	800a17a <_printf_i+0x1ba>
 800a182:	8019      	strh	r1, [r3, #0]
 800a184:	2300      	movs	r3, #0
 800a186:	6123      	str	r3, [r4, #16]
 800a188:	4616      	mov	r6, r2
 800a18a:	e7bc      	b.n	800a106 <_printf_i+0x146>
 800a18c:	6833      	ldr	r3, [r6, #0]
 800a18e:	1d1a      	adds	r2, r3, #4
 800a190:	6032      	str	r2, [r6, #0]
 800a192:	681e      	ldr	r6, [r3, #0]
 800a194:	6862      	ldr	r2, [r4, #4]
 800a196:	2100      	movs	r1, #0
 800a198:	4630      	mov	r0, r6
 800a19a:	f7f6 f841 	bl	8000220 <memchr>
 800a19e:	b108      	cbz	r0, 800a1a4 <_printf_i+0x1e4>
 800a1a0:	1b80      	subs	r0, r0, r6
 800a1a2:	6060      	str	r0, [r4, #4]
 800a1a4:	6863      	ldr	r3, [r4, #4]
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1ae:	e7aa      	b.n	800a106 <_printf_i+0x146>
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	4632      	mov	r2, r6
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	47d0      	blx	sl
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d0ad      	beq.n	800a11a <_printf_i+0x15a>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	079b      	lsls	r3, r3, #30
 800a1c2:	d413      	bmi.n	800a1ec <_printf_i+0x22c>
 800a1c4:	68e0      	ldr	r0, [r4, #12]
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	4298      	cmp	r0, r3
 800a1ca:	bfb8      	it	lt
 800a1cc:	4618      	movlt	r0, r3
 800a1ce:	e7a6      	b.n	800a11e <_printf_i+0x15e>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	47d0      	blx	sl
 800a1da:	3001      	adds	r0, #1
 800a1dc:	d09d      	beq.n	800a11a <_printf_i+0x15a>
 800a1de:	3501      	adds	r5, #1
 800a1e0:	68e3      	ldr	r3, [r4, #12]
 800a1e2:	9903      	ldr	r1, [sp, #12]
 800a1e4:	1a5b      	subs	r3, r3, r1
 800a1e6:	42ab      	cmp	r3, r5
 800a1e8:	dcf2      	bgt.n	800a1d0 <_printf_i+0x210>
 800a1ea:	e7eb      	b.n	800a1c4 <_printf_i+0x204>
 800a1ec:	2500      	movs	r5, #0
 800a1ee:	f104 0619 	add.w	r6, r4, #25
 800a1f2:	e7f5      	b.n	800a1e0 <_printf_i+0x220>
 800a1f4:	0800a59d 	.word	0x0800a59d
 800a1f8:	0800a5ae 	.word	0x0800a5ae

0800a1fc <__sflush_r>:
 800a1fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a204:	0716      	lsls	r6, r2, #28
 800a206:	4605      	mov	r5, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	d454      	bmi.n	800a2b6 <__sflush_r+0xba>
 800a20c:	684b      	ldr	r3, [r1, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	dc02      	bgt.n	800a218 <__sflush_r+0x1c>
 800a212:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	dd48      	ble.n	800a2aa <__sflush_r+0xae>
 800a218:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	d045      	beq.n	800a2aa <__sflush_r+0xae>
 800a21e:	2300      	movs	r3, #0
 800a220:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a224:	682f      	ldr	r7, [r5, #0]
 800a226:	6a21      	ldr	r1, [r4, #32]
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	d030      	beq.n	800a28e <__sflush_r+0x92>
 800a22c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	0759      	lsls	r1, r3, #29
 800a232:	d505      	bpl.n	800a240 <__sflush_r+0x44>
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	1ad2      	subs	r2, r2, r3
 800a238:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a23a:	b10b      	cbz	r3, 800a240 <__sflush_r+0x44>
 800a23c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a23e:	1ad2      	subs	r2, r2, r3
 800a240:	2300      	movs	r3, #0
 800a242:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a244:	6a21      	ldr	r1, [r4, #32]
 800a246:	4628      	mov	r0, r5
 800a248:	47b0      	blx	r6
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	d106      	bne.n	800a25e <__sflush_r+0x62>
 800a250:	6829      	ldr	r1, [r5, #0]
 800a252:	291d      	cmp	r1, #29
 800a254:	d82b      	bhi.n	800a2ae <__sflush_r+0xb2>
 800a256:	4a2a      	ldr	r2, [pc, #168]	@ (800a300 <__sflush_r+0x104>)
 800a258:	40ca      	lsrs	r2, r1
 800a25a:	07d6      	lsls	r6, r2, #31
 800a25c:	d527      	bpl.n	800a2ae <__sflush_r+0xb2>
 800a25e:	2200      	movs	r2, #0
 800a260:	6062      	str	r2, [r4, #4]
 800a262:	04d9      	lsls	r1, r3, #19
 800a264:	6922      	ldr	r2, [r4, #16]
 800a266:	6022      	str	r2, [r4, #0]
 800a268:	d504      	bpl.n	800a274 <__sflush_r+0x78>
 800a26a:	1c42      	adds	r2, r0, #1
 800a26c:	d101      	bne.n	800a272 <__sflush_r+0x76>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b903      	cbnz	r3, 800a274 <__sflush_r+0x78>
 800a272:	6560      	str	r0, [r4, #84]	@ 0x54
 800a274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a276:	602f      	str	r7, [r5, #0]
 800a278:	b1b9      	cbz	r1, 800a2aa <__sflush_r+0xae>
 800a27a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a27e:	4299      	cmp	r1, r3
 800a280:	d002      	beq.n	800a288 <__sflush_r+0x8c>
 800a282:	4628      	mov	r0, r5
 800a284:	f7ff fbf4 	bl	8009a70 <_free_r>
 800a288:	2300      	movs	r3, #0
 800a28a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a28c:	e00d      	b.n	800a2aa <__sflush_r+0xae>
 800a28e:	2301      	movs	r3, #1
 800a290:	4628      	mov	r0, r5
 800a292:	47b0      	blx	r6
 800a294:	4602      	mov	r2, r0
 800a296:	1c50      	adds	r0, r2, #1
 800a298:	d1c9      	bne.n	800a22e <__sflush_r+0x32>
 800a29a:	682b      	ldr	r3, [r5, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0c6      	beq.n	800a22e <__sflush_r+0x32>
 800a2a0:	2b1d      	cmp	r3, #29
 800a2a2:	d001      	beq.n	800a2a8 <__sflush_r+0xac>
 800a2a4:	2b16      	cmp	r3, #22
 800a2a6:	d11e      	bne.n	800a2e6 <__sflush_r+0xea>
 800a2a8:	602f      	str	r7, [r5, #0]
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e022      	b.n	800a2f4 <__sflush_r+0xf8>
 800a2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2b2:	b21b      	sxth	r3, r3
 800a2b4:	e01b      	b.n	800a2ee <__sflush_r+0xf2>
 800a2b6:	690f      	ldr	r7, [r1, #16]
 800a2b8:	2f00      	cmp	r7, #0
 800a2ba:	d0f6      	beq.n	800a2aa <__sflush_r+0xae>
 800a2bc:	0793      	lsls	r3, r2, #30
 800a2be:	680e      	ldr	r6, [r1, #0]
 800a2c0:	bf08      	it	eq
 800a2c2:	694b      	ldreq	r3, [r1, #20]
 800a2c4:	600f      	str	r7, [r1, #0]
 800a2c6:	bf18      	it	ne
 800a2c8:	2300      	movne	r3, #0
 800a2ca:	eba6 0807 	sub.w	r8, r6, r7
 800a2ce:	608b      	str	r3, [r1, #8]
 800a2d0:	f1b8 0f00 	cmp.w	r8, #0
 800a2d4:	dde9      	ble.n	800a2aa <__sflush_r+0xae>
 800a2d6:	6a21      	ldr	r1, [r4, #32]
 800a2d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2da:	4643      	mov	r3, r8
 800a2dc:	463a      	mov	r2, r7
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b0      	blx	r6
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	dc08      	bgt.n	800a2f8 <__sflush_r+0xfc>
 800a2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f8:	4407      	add	r7, r0
 800a2fa:	eba8 0800 	sub.w	r8, r8, r0
 800a2fe:	e7e7      	b.n	800a2d0 <__sflush_r+0xd4>
 800a300:	20400001 	.word	0x20400001

0800a304 <_fflush_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	690b      	ldr	r3, [r1, #16]
 800a308:	4605      	mov	r5, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	b913      	cbnz	r3, 800a314 <_fflush_r+0x10>
 800a30e:	2500      	movs	r5, #0
 800a310:	4628      	mov	r0, r5
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	b118      	cbz	r0, 800a31e <_fflush_r+0x1a>
 800a316:	6a03      	ldr	r3, [r0, #32]
 800a318:	b90b      	cbnz	r3, 800a31e <_fflush_r+0x1a>
 800a31a:	f7ff f9a1 	bl	8009660 <__sinit>
 800a31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0f3      	beq.n	800a30e <_fflush_r+0xa>
 800a326:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a328:	07d0      	lsls	r0, r2, #31
 800a32a:	d404      	bmi.n	800a336 <_fflush_r+0x32>
 800a32c:	0599      	lsls	r1, r3, #22
 800a32e:	d402      	bmi.n	800a336 <_fflush_r+0x32>
 800a330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a332:	f7ff fb8c 	bl	8009a4e <__retarget_lock_acquire_recursive>
 800a336:	4628      	mov	r0, r5
 800a338:	4621      	mov	r1, r4
 800a33a:	f7ff ff5f 	bl	800a1fc <__sflush_r>
 800a33e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a340:	07da      	lsls	r2, r3, #31
 800a342:	4605      	mov	r5, r0
 800a344:	d4e4      	bmi.n	800a310 <_fflush_r+0xc>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	059b      	lsls	r3, r3, #22
 800a34a:	d4e1      	bmi.n	800a310 <_fflush_r+0xc>
 800a34c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a34e:	f7ff fb7f 	bl	8009a50 <__retarget_lock_release_recursive>
 800a352:	e7dd      	b.n	800a310 <_fflush_r+0xc>

0800a354 <__swhatbuf_r>:
 800a354:	b570      	push	{r4, r5, r6, lr}
 800a356:	460c      	mov	r4, r1
 800a358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35c:	2900      	cmp	r1, #0
 800a35e:	b096      	sub	sp, #88	@ 0x58
 800a360:	4615      	mov	r5, r2
 800a362:	461e      	mov	r6, r3
 800a364:	da0d      	bge.n	800a382 <__swhatbuf_r+0x2e>
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a36c:	f04f 0100 	mov.w	r1, #0
 800a370:	bf14      	ite	ne
 800a372:	2340      	movne	r3, #64	@ 0x40
 800a374:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a378:	2000      	movs	r0, #0
 800a37a:	6031      	str	r1, [r6, #0]
 800a37c:	602b      	str	r3, [r5, #0]
 800a37e:	b016      	add	sp, #88	@ 0x58
 800a380:	bd70      	pop	{r4, r5, r6, pc}
 800a382:	466a      	mov	r2, sp
 800a384:	f000 f848 	bl	800a418 <_fstat_r>
 800a388:	2800      	cmp	r0, #0
 800a38a:	dbec      	blt.n	800a366 <__swhatbuf_r+0x12>
 800a38c:	9901      	ldr	r1, [sp, #4]
 800a38e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a392:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a396:	4259      	negs	r1, r3
 800a398:	4159      	adcs	r1, r3
 800a39a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a39e:	e7eb      	b.n	800a378 <__swhatbuf_r+0x24>

0800a3a0 <__smakebuf_r>:
 800a3a0:	898b      	ldrh	r3, [r1, #12]
 800a3a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3a4:	079d      	lsls	r5, r3, #30
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	d507      	bpl.n	800a3bc <__smakebuf_r+0x1c>
 800a3ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	b003      	add	sp, #12
 800a3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3bc:	ab01      	add	r3, sp, #4
 800a3be:	466a      	mov	r2, sp
 800a3c0:	f7ff ffc8 	bl	800a354 <__swhatbuf_r>
 800a3c4:	9f00      	ldr	r7, [sp, #0]
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff fbbc 	bl	8009b48 <_malloc_r>
 800a3d0:	b948      	cbnz	r0, 800a3e6 <__smakebuf_r+0x46>
 800a3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d6:	059a      	lsls	r2, r3, #22
 800a3d8:	d4ee      	bmi.n	800a3b8 <__smakebuf_r+0x18>
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	f043 0302 	orr.w	r3, r3, #2
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	e7e2      	b.n	800a3ac <__smakebuf_r+0xc>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	6020      	str	r0, [r4, #0]
 800a3ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3f6:	b15b      	cbz	r3, 800a410 <__smakebuf_r+0x70>
 800a3f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f000 f81d 	bl	800a43c <_isatty_r>
 800a402:	b128      	cbz	r0, 800a410 <__smakebuf_r+0x70>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	f023 0303 	bic.w	r3, r3, #3
 800a40a:	f043 0301 	orr.w	r3, r3, #1
 800a40e:	81a3      	strh	r3, [r4, #12]
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	431d      	orrs	r5, r3
 800a414:	81a5      	strh	r5, [r4, #12]
 800a416:	e7cf      	b.n	800a3b8 <__smakebuf_r+0x18>

0800a418 <_fstat_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d07      	ldr	r5, [pc, #28]	@ (800a438 <_fstat_r+0x20>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	602b      	str	r3, [r5, #0]
 800a426:	f7f7 f85a 	bl	80014de <_fstat>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	d102      	bne.n	800a434 <_fstat_r+0x1c>
 800a42e:	682b      	ldr	r3, [r5, #0]
 800a430:	b103      	cbz	r3, 800a434 <_fstat_r+0x1c>
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	bf00      	nop
 800a438:	20004c60 	.word	0x20004c60

0800a43c <_isatty_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4d06      	ldr	r5, [pc, #24]	@ (800a458 <_isatty_r+0x1c>)
 800a440:	2300      	movs	r3, #0
 800a442:	4604      	mov	r4, r0
 800a444:	4608      	mov	r0, r1
 800a446:	602b      	str	r3, [r5, #0]
 800a448:	f7f7 f859 	bl	80014fe <_isatty>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_isatty_r+0x1a>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_isatty_r+0x1a>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20004c60 	.word	0x20004c60

0800a45c <_sbrk_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	@ (800a478 <_sbrk_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f7 f862 	bl	8001530 <_sbrk>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_sbrk_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_sbrk_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20004c60 	.word	0x20004c60

0800a47c <_init>:
 800a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47e:	bf00      	nop
 800a480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a482:	bc08      	pop	{r3}
 800a484:	469e      	mov	lr, r3
 800a486:	4770      	bx	lr

0800a488 <_fini>:
 800a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48a:	bf00      	nop
 800a48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48e:	bc08      	pop	{r3}
 800a490:	469e      	mov	lr, r3
 800a492:	4770      	bx	lr
