/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "i2c.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "pmic_mp5475.h"
#include "eeprom_25lc256.h"
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
// [요구사항 3] RTOS Task 핸들 및 속성 정의
osThreadId_t i2cTaskHandle;
const osThreadAttr_t i2cTask_attributes = {
  .name = "i2cTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
osThreadId_t spiTaskHandle;
const osThreadAttr_t spiTask_attributes = {
  .name = "spiTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

// [요구사항 3] Mutex 정의
osMutexId_t g_commsMutexHandle;
const osMutexAttr_t commsMutex_attributes = {
  .name = "commsMutex"
};

// Task 간 데이터 공유를 위한 전역 변수
PmicFaultStatus g_pmic_faults;
bool g_is_fault_detected = false;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void I2C_Task_Entry(void *argument);
void SPI_Task_Entry(void *argument);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// printf를 UART2로 리디렉션하기 위한 코드
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
    return ch;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */
  printf("\r\n--- ECU System Initialized (RTOS + DMA Version) ---\r\n");
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* Create the mutex(es) */
  /* USER CODE BEGIN RTOS_MUTEX */
  // [요구사항 3] Mutex 생성
  g_commsMutexHandle = osMutexNew(&commsMutex_attributes);
  if (g_commsMutexHandle == NULL) {
      printf("Failed to create Mutex!\r\n");
      Error_Handler();
  }
  /* USER CODE END RTOS_MUTEX */

  /* Create the thread(s) */
  /* USER CODE BEGIN RTOS_THREADS */
  // [요구사항 3] Task 생성
  i2cTaskHandle = osThreadNew(I2C_Task_Entry, NULL, &i2cTask_attributes);
  spiTaskHandle = osThreadNew(SPI_Task_Entry, NULL, &spiTask_attributes);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  printf("RTOS Scheduler Starting...\r\n");
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}


/**
  * @brief  System Clock Configuration
  * ... (CubeMX가 생성한 코드는 여기에 그대로 존재) ...
  */
void SystemClock_Config(void)
{
    // ... CubeMX가 생성한 코드는 여기에 그대로 존재 ...
}

/* USER CODE BEGIN 4 */
// [요구사항 3] I2C Task 구현: 주기적으로 PMIC Fault를 확인하여 전역 변수에 기록
void I2C_Task_Entry(void *argument)
{
  printf("I2C Task Started.\r\n");
  for(;;)
  {
    // Mutex를 획득 (다른 통신 Task가 끝나길 대기)
    if (osMutexAcquire(g_commsMutexHandle, 100) == osOK)
    {
        printf("\nI2C Task: Checking PMIC faults...\r\n");
        if (pmic_get_all_faults(&g_pmic_faults) == HAL_OK)
        {
            if(g_pmic_faults.is_uv_fault || g_pmic_faults.is_oc_fault)
            {
                g_is_fault_detected = true;
            } else {
                g_is_fault_detected = false;
            }
        } else {
            printf("I2C Task: Communication Error!\r\n");
            g_is_fault_detected = false;
        }

        // Mutex 반납
        osMutexRelease(g_commsMutexHandle);
    } else {
        printf("I2C Task: Mutex acquire timeout!\r\n");
    }

    osDelay(1000); // 1초 대기
  }
}

// [요구사항 3] SPI Task 구현: Fault가 감지되면 EEPROM에 DTC를 저장
void SPI_Task_Entry(void *argument)
{
  printf("SPI Task Started.\r\n");
  for(;;)
  {
    // Mutex를 획득 (I2C Task가 끝나길 대기)
    if (osMutexAcquire(g_commsMutexHandle, 100) == osOK)
    {
        if (g_is_fault_detected)
        {
          printf("SPI Task: Fault detected, storing/verifying DTCs...\r\n");
          if (g_pmic_faults.is_uv_fault) {
              eeprom_write_32bit(DTC_UV_ADDRESS, DTC_CODE_UV);
              uint32_t read_val = eeprom_read_32bit(DTC_UV_ADDRESS);
              printf(" > UV DTC Stored. Verified: 0x%lX\r\n", read_val);
          }
          // ... 다른 Fault들도 여기에 추가 ...

          // 한번 처리했으므로 플래그 초기화
          g_is_fault_detected = false;
        } else {
          //printf("SPI Task: No faults to process.\r\n");
        }

        // Mutex 반납
        osMutexRelease(g_commsMutexHandle);
    } else {
        printf("SPI Task: Mutex acquire timeout!\r\n");
    }

    osDelay(1000); // I2C Task와 주기를 맞춤
  }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
